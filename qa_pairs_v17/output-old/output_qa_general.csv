corpusid,title,url,section_title,num_reference,section,section_sentence_prefixed,question_by_general_with_sentence_indexes,question_by_general,sentence_indexes_by_general,judge_ansvar,sentences_by_general,qa_status,answer_rephrased,QA_pair_general
256231532,Social Influence Dialogue Systems: A Survey of Datasets and Models For Social Influence Tasks,https://www.semanticscholar.org/paper/a1275e92f4830e5bbd53bc1b1fa44a9a2f024f88,Language Generation,5,"An important aspect of the system design is an effective way to realize the language, that is, to generate the next response so that it portrays the desired strategic behaviors. Borrowing from task-oriented and open-domain research, existing dialogue models for social influence use a variety of methods to generate the final system response.

Templates and retrieval methods: Predefined templates and response retrieval from the training data simplify the generation pipeline, improving controllability and modularity. He et al. (2018) used templates in their generator which are later filled by retrieving similar responses from the data. This allowed the authors to explore supervised and reinforcement learning at the level of DAs for the influence strategy of the system. Conditional Generation: Text generation methods result in more diverse responses, but negatively impact the controllability and interpretability. Prior work relies on autoregressive text generation conditioned on the dialogue history, non-conversational context, and additional annotations. These are either encoder-decoder networks (Lewis et al., 2017;Li et al., 2020;Joshi et al., 2020) or use a decoderonly design (Li et al., 2020). A useful future direction is to combine generation with retrieval for knowledge-grounded settings like argumentation. Similar methods have been explored for other NLP tasks like open-domain question answering and question generation (Lewis et al., 2020).","sent1: An important aspect of the system design is an effective way to realize the language, that is, to generate the next response so that it portrays the desired strategic behaviors.
sent2: Borrowing from task-oriented and open-domain research, existing dialogue models for social influence use a variety of methods to generate the final system response.Templates and retrieval methods: Predefined templates and response retrieval from the training data simplify the generation pipeline, improving controllability and modularity.
sent3: He et al. (2018) used templates in their generator which are later filled by retrieving similar responses from the data.
sent4: This allowed the authors to explore supervised and reinforcement learning at the level of DAs for the influence strategy of the system.
sent5: Conditional Generation: Text generation methods result in more diverse responses, but negatively impact the controllability and interpretability.
sent6: Prior work relies on autoregressive text generation conditioned on the dialogue history, non-conversational context, and additional annotations.
sent7: These are either encoder-decoder networks (Lewis et al., 2017;Li et al., 2020;Joshi et al., 2020) or use a decoderonly design (Li et al., 2020).
sent8: A useful future direction is to combine generation with retrieval for knowledge-grounded settings like argumentation.
sent9: Similar methods have been explored for other NLP tasks like open-domain question answering and question generation (Lewis et al., 2020).","Question: What are the different methods used for generating responses in social influence dialogue systems, and what are their respective advantages and disadvantages?

Supporting sentence: sent2, sent3, sent4, sent5, sent6, sent7, sent8","What are the different methods used for generating responses in social influence dialogue systems, and what are their respective advantages and disadvantages?","sent2, sent3, sent4, sent5, sent6, sent7, sent8",7,"Borrowing from task-oriented and open-domain research, existing dialogue models for social influence use a variety of methods to generate the final system response.Templates and retrieval methods: Predefined templates and response retrieval from the training data simplify the generation pipeline, improving controllability and modularity.

He et al. (2018) used templates in their generator which are later filled by retrieving similar responses from the data.

This allowed the authors to explore supervised and reinforcement learning at the level of DAs for the influence strategy of the system.

Conditional Generation: Text generation methods result in more diverse responses, but negatively impact the controllability and interpretability.

Prior work relies on autoregressive text generation conditioned on the dialogue history, non-conversational context, and additional annotations.

These are either encoder-decoder networks (Lewis et al., 2017;Li et al., 2020;Joshi et al., 2020) or use a decoderonly design (Li et al., 2020).

A useful future direction is to combine generation with retrieval for knowledge-grounded settings like argumentation.",invalid,,"Question:

What are the different methods used for generating responses in social influence dialogue systems, and what are their respective advantages and disadvantages?

Answer:

nan"
252200083,"A Survey in Automatic Irony Processing: Linguistic, Cognitive, and Multi-X Perspectives",https://www.semanticscholar.org/paper/77696f90afa79ac06ea58abcc91bf5e10f72b934,Irony in Communication,5,"Researchers claim that by using ironies, people have several kinds of intentions.

Be polite: According to Brown et al. (1987), when unfavorable attitudes such as resistance, criticism, and complaints are stated with irony, the threat to the listener's reputation is reduced. The irony, as stated in Giora (1995), is an indirect negation. People prefer to utilize indirect negation to be polite to their listeners because direct negation can generate great unhappiness;

Ease criticisms: As reported by Dews and Winner (1995), irony helps to ease the expression's evaluative function. They believe that the incompatibility between literal meaning and contextual meaning can make it difficult to articulate negative feelings. However, Toplak and Katz (2000) argued that, while irony literally avoids conflict, it is more aggressive from the perspective of the speaker's goal;

Self-protection: Sperber and Wilson (1986) proposed the ""echoic"" idea, which stated that irony is a detached utterance that is simply an echo of another people's thought. It's a self-protection tactic, especially when the speakers are members of marginalized groups. According to , the irony is an ""off-record"" statement that allows speakers to deny their true intentions and avoid being challenged;

Be amusing:  reported that when young people intend to be humorous, 50% of their communication is ironic. It can assist people in creating a dialogue platform on which speakers and listeners can agree and communicate more easily.","sent1: Researchers claim that by using ironies, people have several kinds of intentions.
sent2: Be polite: According to Brown et al. (1987), when unfavorable attitudes such as resistance, criticism, and complaints are stated with irony, the threat to the listener's reputation is reduced.
sent3: The irony, as stated in Giora (1995), is an indirect negation.
sent4: People prefer to utilize indirect negation to be polite to their listeners because direct negation can generate great unhappiness;Ease criticisms: As reported by Dews and Winner (1995), irony helps to ease the expression's evaluative function.
sent5: They believe that the incompatibility between literal meaning and contextual meaning can make it difficult to articulate negative feelings.
sent6: However, Toplak and Katz (2000) argued that, while irony literally avoids conflict, it is more aggressive from the perspective of the speaker's goal;Self-protection: Sperber and Wilson (1986) proposed the ""echoic"" idea, which stated that irony is a detached utterance that is simply an echo of another people's thought.
sent7: It's a self-protection tactic, especially when the speakers are members of marginalized groups.
sent8: According to , the irony is an ""off-record"" statement that allows speakers to deny their true intentions and avoid being challenged;Be amusing:  reported that when young people intend to be humorous, 50% of their communication is ironic.
sent9: It can assist people in creating a dialogue platform on which speakers and listeners can agree and communicate more easily.","Question: What are the various intentions behind the use of irony in communication?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the various intentions behind the use of irony in communication?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",7,"Researchers claim that by using ironies, people have several kinds of intentions.

Be polite: According to Brown et al. (1987), when unfavorable attitudes such as resistance, criticism, and complaints are stated with irony, the threat to the listener's reputation is reduced.

The irony, as stated in Giora (1995), is an indirect negation.

People prefer to utilize indirect negation to be polite to their listeners because direct negation can generate great unhappiness;Ease criticisms: As reported by Dews and Winner (1995), irony helps to ease the expression's evaluative function.

They believe that the incompatibility between literal meaning and contextual meaning can make it difficult to articulate negative feelings.

However, Toplak and Katz (2000) argued that, while irony literally avoids conflict, it is more aggressive from the perspective of the speaker's goal;Self-protection: Sperber and Wilson (1986) proposed the ""echoic"" idea, which stated that irony is a detached utterance that is simply an echo of another people's thought.

It's a self-protection tactic, especially when the speakers are members of marginalized groups.

According to , the irony is an ""off-record"" statement that allows speakers to deny their true intentions and avoid being challenged;Be amusing:  reported that when young people intend to be humorous, 50% of their communication is ironic.

It can assist people in creating a dialogue platform on which speakers and listeners can agree and communicate more easily.",invalid,,"Question:

What are the various intentions behind the use of irony in communication?

Answer:

nan"
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Discussion,6,"The three WS signals listed above work directly on actual questions instead of pseudo pairs as in §3 so that the NR model can adapt better to the target-domain question distribution. The bottleneck is the quality of the WS signals. SRs and PLMs are unsupervised, which could be more robust when we face a completely different domain (Dai et al., 2022). Otherwise, if we already have certain amounts relevance annotations from the target or similar domains, usually using a supervised teacher model is preferred. Nevertheless, these WS signals inevitably contain noise, and can harm the downstream performance if the noise is significant. There are two main strategies to reduce the noise effects: (1) Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2) Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022). Another potential issue is that the amount of training data in this section relies on the amount of questions we have. Unlike the document set which we can obtain for free, the question set takes time to collect and are often orders of magnitudes smaller. If no sufficient questions are available, we can use synthetic questions from question generation, then apply same WS signals in this section, which has been shown to perform on par with using real questions in certain domains Thakur et al., 2022).","sent1: The three WS signals listed above work directly on actual questions instead of pseudo pairs as in §3 so that the NR model can adapt better to the target-domain question distribution.
sent2: The bottleneck is the quality of the WS signals.
sent3: SRs and PLMs are unsupervised, which could be more robust when we face a completely different domain (Dai et al., 2022).
sent4: Otherwise, if we already have certain amounts relevance annotations from the target or similar domains, usually using a supervised teacher model is preferred.
sent5: Nevertheless, these WS signals inevitably contain noise, and can harm the downstream performance if the noise is significant.
sent6: There are two main strategies to reduce the noise effects: (1)
sent7: Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2)
sent8: Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022).
sent9: Another potential issue is that the amount of training data in this section relies on the amount of questions we have.
sent10: Unlike the document set which we can obtain for free, the question set takes time to collect and are often orders of magnitudes smaller.
sent11: If no sufficient questions are available, we can use synthetic questions from question generation, then apply same WS signals in this section, which has been shown to perform on par with using real questions in certain domains Thakur et al., 2022).","Question: What are the main strategies to mitigate noise in weak supervision signals for neural ranking models?

Supporting sentence: sent5, sent6, sent7, sent8",What are the main strategies to mitigate noise in weak supervision signals for neural ranking models?,"sent5, sent6, sent7, sent8",2,"Nevertheless, these WS signals inevitably contain noise, and can harm the downstream performance if the noise is significant.

There are two main strategies to reduce the noise effects: (1)

Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2)

Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022).",implement,"Weak supervision signals inevitably contain noise, which can harm downstream performance if the noise is significant.

There are two main strategies to reduce the noise effects: (1)

One strategy is to apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017; Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020), which reduces the chances of models overfitting to the exact labels. Another strategy is to...

Another strategy is to apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020; Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018; Zhu et al., 2022).","Question:

What are the main strategies to mitigate noise in weak supervision signals for neural ranking models?

Answer:

Weak supervision signals inevitably contain noise, which can harm downstream performance if the noise is significant.

There are two main strategies to reduce the noise effects: (1)One strategy is to apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017; Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020), which reduces the chances of models overfitting to the exact labels.

Another strategy is to...Another strategy is to apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020; Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018; Zhu et al., 2022)."
252683270,A Decade of Knowledge Graphs in Natural Language Processing: A Survey,https://www.semanticscholar.org/paper/2341353cae858ce06225e46356c472b71dc63372,Knowledge Application,15,"Existing KGs can be used in a multitude of popular NLP tasks. Here we outline the most popular ones.

Question answering (QA) was found to be the most common NLP task using KGs. This task is typically divided into textual QA and question answering over knowledge bases (KBQA). Textual QA derives answers from unstructured documents while KBQA does so from predefined knowledge bases (Fu et al., 2020). KBQA is naturally tied to KGs while textual QA can also be approached by using KGs as a source of common-sense knowledge when answering questions. As Zhu et al. (2021) conclude, this approach is desired not only because it is helpful for generating answers, but also because it makes answers more interpretable.

Semantic search refers to ""search with meaning"", where the goal is not just to search for literal matches, but to understand the search intent and query context as well (Bast et al., 2016). This label denoted studies that use KGs for search, recommendations, and analytics. Examples are a big semantic network of everyday concepts called ConceptNet (Speer et al., 2017) and a KG of scholarly communications and the relationships, among them the Microsoft Academic Graph .

Conversational interfaces constitute another NLP field that can benefit from world knowledge contained in KGs. Zhou et al. (2018)  Natural language generation (NLG) is a subfield of NLP and computational linguistics that is concerned with models which generate natural language output from scratch. KGs are used in this subfield for producing natural language text from KGs (Koncel-Kedziorski et al., 2019), generating question-answer pairs (Reddy et al., 2017), the multi-modal task of image captioning (Lu et al., 2018), or data augmentation in low-resource settings (Sharifirad et al., 2018).

Text analysis combines various analytical NLP techniques and methods that are applied to process and understand textual data. Exemplary tasks are sentiment detection (Kumar et al., 2018), topic modeling , or word sense disambiguation .

Augmented language models are a combination of large pretrained language models (PLMs) such as BERT (Devlin et al., 2019) and GPT (Radford et al., 2018) with knowledge contained in KGs. Since PLMs derive their knowledge from huge amounts of unstructured training data, a rising research trend is in combining them with structured knowledge. Knowledge from KGs can be infused into language models in their input, architecture, output, or some combination thereof (Colon-Hernandez et al., 2021). Some notable examples we outline are ERNIE (Zhang et al., 2019b), COMET (Bosselut et al., 2019), K-BERT (Liu et al., 2020b), and KEPLER (Wang et al., 2021b). Table 3 shows the distribution of papers according to the different research and contribution types as defined in Table 4 and 5 in the Appendix. It shows that most papers conduct validation research, investigating new techniques or methods that have not yet been implemented in practice. A considerable number of papers, although significantly less, focus on solution proposals of approaches by demonstrating their advantages and applicability by a small example or argumentation. However, these papers usually lack a profound empirical evaluation. Secondary research accounts for only a small number of papers and is severely underrepresented in the research field of KGs in NLP. As already mentioned in Section 1 and Section 2, there is a notable lack of studies that summarize, compile, or synthesize existing research regarding KGs in NLP. Moreover, evaluation research papers that implement and evaluate approaches in an industry context are equally scarce. Opinion papers are almost non-existent.","sent1: Existing KGs can be used in a multitude of popular NLP tasks.
sent2: Here we outline the most popular ones.
sent3: Question answering (QA) was found to be the most common NLP task using KGs.
sent4: This task is typically divided into textual QA and question answering over knowledge bases (KBQA).
sent5: Textual QA derives answers from unstructured documents while KBQA does so from predefined knowledge bases (Fu et al., 2020).
sent6: KBQA is naturally tied to KGs while textual QA can also be approached by using KGs as a source of common-sense knowledge when answering questions.
sent7: As Zhu et al. (2021) conclude, this approach is desired not only because it is helpful for generating answers, but also because it makes answers more interpretable.
sent8: Semantic search refers to ""search with meaning"", where the goal is not just to search for literal matches, but to understand the search intent and query context as well (Bast et al., 2016).
sent9: This label denoted studies that use KGs for search, recommendations, and analytics.
sent10: Examples are a big semantic network of everyday concepts called ConceptNet (Speer et al., 2017) and a KG of scholarly communications and the relationships, among them the Microsoft Academic Graph .
sent11: Conversational interfaces constitute another NLP field that can benefit from world knowledge contained in KGs.
sent12: Zhou et al. (2018)  Natural language generation (NLG) is a subfield of NLP and computational linguistics that is concerned with models which generate natural language output from scratch.
sent13: KGs are used in this subfield for producing natural language text from KGs (Koncel-Kedziorski et al., 2019), generating question-answer pairs (Reddy et al., 2017), the multi-modal task of image captioning (Lu et al., 2018), or data augmentation in low-resource settings (Sharifirad et al., 2018).
sent14: Text analysis combines various analytical NLP techniques and methods that are applied to process and understand textual data.
sent15: Exemplary tasks are sentiment detection (Kumar et al., 2018), topic modeling , or word sense disambiguation .
sent16: Augmented language models are a combination of large pretrained language models (PLMs) such as BERT (Devlin et al., 2019) and GPT (Radford et al., 2018) with knowledge contained in KGs.
sent17: Since PLMs derive their knowledge from huge amounts of unstructured training data, a rising research trend is in combining them with structured knowledge.
sent18: Knowledge from KGs can be infused into language models in their input, architecture, output, or some combination thereof (Colon-Hernandez et al., 2021).
sent19: Some notable examples we outline are ERNIE (Zhang et al., 2019b), COMET (Bosselut et al., 2019), K-BERT (Liu et al., 2020b), and KEPLER (Wang et al., 2021b).
sent20: Table 3 shows the distribution of papers according to the different research and contribution types as defined in Table 4 and 5 in the Appendix.
sent21: It shows that most papers conduct validation research, investigating new techniques or methods that have not yet been implemented in practice.
sent22: A considerable number of papers, although significantly less, focus on solution proposals of approaches by demonstrating their advantages and applicability by a small example or argumentation.
sent23: However, these papers usually lack a profound empirical evaluation.
sent24: Secondary research accounts for only a small number of papers and is severely underrepresented in the research field of KGs in NLP.
sent25: As already mentioned in Section 1 and Section 2, there is a notable lack of studies that summarize, compile, or synthesize existing research regarding KGs in NLP.
sent26: Moreover, evaluation research papers that implement and evaluate approaches in an industry context are equally scarce.
sent27: Opinion papers are almost non-existent.","Question: How are knowledge graphs utilized in various natural language processing tasks?

Supporting sentence: sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent11, sent13, sent14, sent16, sent17, sent18",How are knowledge graphs utilized in various natural language processing tasks?,"sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent11, sent13, sent14, sent16, sent17, sent18",9,"Existing KGs can be used in a multitude of popular NLP tasks.

Question answering (QA) was found to be the most common NLP task using KGs.

This task is typically divided into textual QA and question answering over knowledge bases (KBQA).

Textual QA derives answers from unstructured documents while KBQA does so from predefined knowledge bases (Fu et al., 2020).

KBQA is naturally tied to KGs while textual QA can also be approached by using KGs as a source of common-sense knowledge when answering questions.

As Zhu et al. (2021) conclude, this approach is desired not only because it is helpful for generating answers, but also because it makes answers more interpretable.

Semantic search refers to ""search with meaning"", where the goal is not just to search for literal matches, but to understand the search intent and query context as well (Bast et al., 2016).

This label denoted studies that use KGs for search, recommendations, and analytics.

Conversational interfaces constitute another NLP field that can benefit from world knowledge contained in KGs.

KGs are used in this subfield for producing natural language text from KGs (Koncel-Kedziorski et al., 2019), generating question-answer pairs (Reddy et al., 2017), the multi-modal task of image captioning (Lu et al., 2018), or data augmentation in low-resource settings (Sharifirad et al., 2018).

Text analysis combines various analytical NLP techniques and methods that are applied to process and understand textual data.

Augmented language models are a combination of large pretrained language models (PLMs) such as BERT (Devlin et al., 2019) and GPT (Radford et al., 2018) with knowledge contained in KGs.

Since PLMs derive their knowledge from huge amounts of unstructured training data, a rising research trend is in combining them with structured knowledge.

Knowledge from KGs can be infused into language models in their input, architecture, output, or some combination thereof (Colon-Hernandez et al., 2021).",invalid,,"Question:

How are knowledge graphs utilized in various natural language processing tasks?

Answer:

nan"
219177284,Conversational Machine Comprehension: a Literature Review,https://www.semanticscholar.org/paper/daadce35dc3694ae02dae07da7a3285daf3eab32,What is Conversational Machine Comprehension?,4,"The task of CMC is defined as: Given a passage P , the conversation history in the form of questionanswer pairs {Q 1 , A 1 , Q 2 , A 2 , ..., Q i−1 , A i−1 } and a question Q i , the model needs to predict the answer A i . The answer A i can either be a text span (s i , e i ) (Choi et al., 2018) or a free-form text {a i,1 , a i,2 , ..., a i,j } with evidence R i (Reddy et al., 2019). Single-turn MRC models cannot directly cater to CMC, as the latter is much more challenging to address. The major challenges being:

• The encoding module needs to encode not only P and A i but also the conversational history.

• General observation about information-seeking dialog in humans suggests that the starting dialogturns tend to focus on the beginning chunks of the passage and shift focus to the later chunks as the conversation progresses (Choi et al., 2018). The model is thus expected to capture these focal shifts during a conversation and reason pragmatically, instead of only matching lexically or via paraphrasing.

• Multi-turn conversations are generally incremental and co-referential. These conversational dialogs are either drilling down (the current question is a request for more information about the topic), shifting topic (the current question is not immediately relevant to something previously discussed), returning topic (the current question is asking about a topic again after it had previously been shifted away from), clarification of topic, or definition of an entity (Yatskar, 2019). The model should, therefore, be able to take context from history which may or may not be immediate.","sent1: The task of CMC is defined as: Given a passage P , the conversation history in the form of questionanswer pairs {Q 1 , A 1 , Q 2 , A 2 , ..., Q i−1 , A i−1 } and a question Q i , the model needs to predict the answer A i .
sent2: The answer A i can either be a text span (s i , e i ) (Choi et al., 2018) or a free-form text {a i,1 , a i,2 , ..., a i,j } with evidence R i (Reddy et al., 2019).
sent3: Single-turn MRC models cannot directly cater to CMC, as the latter is much more challenging to address.
sent4: The major challenges being: • The encoding module needs to encode not only P and A i but also the conversational history.
sent5: • General observation about information-seeking dialog in humans suggests that the starting dialogturns tend to focus on the beginning chunks of the passage and shift focus to the later chunks as the conversation progresses (Choi et al., 2018).
sent6: The model is thus expected to capture these focal shifts during a conversation and reason pragmatically, instead of only matching lexically or via paraphrasing.
sent7: • Multi-turn conversations are generally incremental and co-referential.
sent8: These conversational dialogs are either drilling down (the current question is a request for more information about the topic), shifting topic (the current question is not immediately relevant to something previously discussed), returning topic (the current question is asking about a topic again after it had previously been shifted away from), clarification of topic, or definition of an entity (Yatskar, 2019).
sent9: The model should, therefore, be able to take context from history which may or may not be immediate.","Question: What are the primary challenges in designing models for Conversational Machine Comprehension (CMC)?

Supporting sentence: sent3, sent4, sent5, sent6, sent7, sent8",What are the primary challenges in designing models for Conversational Machine Comprehension (CMC)?,"sent3, sent4, sent5, sent6, sent7, sent8",3,"Single-turn MRC models cannot directly cater to CMC, as the latter is much more challenging to address.

The major challenges being: • The encoding module needs to encode not only P and A i but also the conversational history.

• General observation about information-seeking dialog in humans suggests that the starting dialogturns tend to focus on the beginning chunks of the passage and shift focus to the later chunks as the conversation progresses (Choi et al., 2018).

The model is thus expected to capture these focal shifts during a conversation and reason pragmatically, instead of only matching lexically or via paraphrasing.

• Multi-turn conversations are generally incremental and co-referential.

These conversational dialogs are either drilling down (the current question is a request for more information about the topic), shifting topic (the current question is not immediately relevant to something previously discussed), returning topic (the current question is asking about a topic again after it had previously been shifted away from), clarification of topic, or definition of an entity (Yatskar, 2019).",implement,"Single-turn MRC models cannot directly cater to Conversational Machine Comprehension (CMC), as the latter is much more challenging to address.

The major challenges include the need for the encoding module to encode not only the passage and the current answer but also the conversational history.

General observations about information-seeking dialog in humans suggest that the starting dialog turns tend to focus on the beginning chunks of the passage and shift focus to the later chunks as the conversation progresses (Choi et al., 2018).

The model is thus expected to capture these focal shifts during a conversation and reason pragmatically, instead of only matching lexically or via paraphrasing.

Multi-turn conversations are generally incremental and co-referential.

These conversational dialogs can involve drilling down (requesting more information about the topic), shifting topic (introducing a new topic), returning to a previous topic, clarifying a topic, or defining an entity (Yatskar, 2019).","Question:

What are the primary challenges in designing models for Conversational Machine Comprehension (CMC)?

Answer:

Single-turn MRC models cannot directly cater to Conversational Machine Comprehension (CMC), as the latter is much more challenging to address.

The major challenges include the need for the encoding module to encode not only the passage and the current answer but also the conversational history.

General observations about information-seeking dialog in humans suggest that the starting dialog turns tend to focus on the beginning chunks of the passage and shift focus to the later chunks as the conversation progresses (Choi et al., 2018).

The model is thus expected to capture these focal shifts during a conversation and reason pragmatically, instead of only matching lexically or via paraphrasing.

Multi-turn conversations are generally incremental and co-referential.

These conversational dialogs can involve drilling down (requesting more information about the topic), shifting topic (introducing a new topic), returning to a previous topic, clarifying a topic, or defining an entity (Yatskar, 2019)."
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Internal classifier training Exit criterion,21,"DeeBERT (Xin et al., 2020b) two-stage; sum of CE loss entropy < θ RightTool (Schwartz et al., 2020) joint; sum of CE loss calibrated max class probability > θ FastBERT  two-stage; self-distillation entropy < θ RomeBERT (Geng et al., 2021) joint; self-distillation + GR entropy < θ SkipBERT (2022) joint; weighted sum of CE + KD max class probability > θ PABEE (Zhou et al., 2020a) joint; weighted sum of CE loss patience (#consistent prediction > θ ) Voting  joint; sum of CE + diversity loss accumulated votes > θ LeeBERT (Zhu, 2021) joint; auto-weighted sum of CE + KD loss patience (#consistent prediction > θ ) Past-Future (Liao et al., 2021) joint; weighted sum of CE + imitation learning entropy < θ PCEE-BERT (2022a) joint; weighted sum of CE patience (#consistent IC confidence > θ)

BERxiT (Xin et al., 2021) alternate; sum of CE loss estimated confidence > θ CAT (Schuster et al., 2021) joint; avg. of CE loss estimated conformity > θ

CascadeBERT (Li et al., 2021a) standard model FT with confidence calibration calibrated max class probability > θ place lower BERT layers and uses confidencebased early exit for higher layers to achieve maximum acceleration.

Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation. That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded. Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions. Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training. They first jointly train the internal classifiers with BERT by a weighted sum of cross-entropy losses that assigns larger weights for upper classifiers. For inference, the model exits when k consecutive internal classifiers make the same prediction. Other than improvement on performance and efficiency, they find that PABEE can improve adversarial robustness, which they attribute to the ensemble effect.  further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution. They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold. Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy: they promote consistency across internal classifiers by distilling them to each other. However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair. They optimize these weights by a cross-level optimization algorithm.

They adopt PABEE's patience-based strategy for exiting. Liao et al. (2021) train linear transformation layers called ""imitation learners"", to approximate the hidden states of future layers based on current hidden states. For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners. Entropy is used as the exit criterion. PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidencebased methods. The inference is terminated when multiple layers are confident.

Learning-based Early Exit Another stream of research is to learn a criterion for early exiting.

BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations. They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction. It takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit. CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.

Cascading Cascading can be seen as a special form of early exit, performed at the model level. Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers. Therefore, they propose to use a suite of complete models with different numbers of layers for cascading. CascadeBERT executes models one by one, from the smallest to the largest. It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.

Applications Although early exit is originally developed for classification, there have been works extending it to more tasks and settings. Li et al. (2021b) propose Token-Level Early-Exit that targets early exiting for sequence labeling. They use the maximum class probability as confidence on a per-token basis. Once the confidence hits the threshold, the hidden states of the corresponding tokens will be frozen and directly copied to upper layers. These exited tokens will not attend to other tokens at upper layers but can still be attended by other tokens. The model completely exits when every token exits. A similar idea is also presented in Elbayad et al. (2020) and Liu et al. (2021b) where hidden states of some positions can be frozen and directly copied to upper layers, although the former is focused on generation and the latter is for classification. Xin et al. (2020a) apply DeeBERT (Xin et al., 2020b) to document ranking and set different thresholds to the negative and positive classes for early exiting, to accommodate the imbalanced class distribution in document ranking. ELUE (Liu et al., 2021a) is a benchmark which evaluates the Pareto Front of early exit models on the FLOPs-performance plane. They provide a BERT-like baseline with jointly pretrained internal classifiers, to mitigate the gap between pretraining and fine-tuning.","sent1: DeeBERT (Xin et al., 2020b) two-stage; sum of CE loss entropy < θ RightTool (Schwartz et al., 2020) joint; sum of CE loss calibrated max class probability > θ FastBERT  two-stage; self-distillation entropy <
sent2: θ RomeBERT (Geng et al., 2021) joint; self-distillation + GR entropy < θ SkipBERT (2022) joint; weighted sum of CE + KD max class probability > θ PABEE (Zhou et al., 2020a) joint; weighted sum of CE loss patience (#consistent prediction > θ )
sent3: Voting  joint; sum of CE + diversity loss accumulated votes >
sent4: θ LeeBERT (Zhu, 2021) joint; auto-weighted sum of CE + KD loss patience (#consistent prediction > θ )
sent5: Past-Future (Liao et al., 2021) joint; weighted sum of CE + imitation learning entropy < θ PCEE-BERT (2022a) joint; weighted sum of CE patience (#consistent IC confidence > θ)BERxiT (Xin et al., 2021) alternate; sum of CE loss estimated confidence > θ CAT (Schuster et al., 2021) joint; avg. of CE loss estimated conformity > θCascadeBERT (Li et al., 2021a) standard model FT with confidence calibration calibrated max class probability > θ place lower BERT layers and uses confidencebased early exit for higher layers to achieve maximum acceleration.
sent6: Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation.
sent7: That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.
sent8: Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.
sent9: Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training.
sent10: They first jointly train the internal classifiers with BERT by a weighted sum of cross-entropy losses that assigns larger weights for upper classifiers.
sent11: For inference, the model exits when k consecutive internal classifiers make the same prediction.
sent12: Other than improvement on performance and efficiency, they find that PABEE can improve adversarial robustness, which they attribute to the ensemble effect.
sent13: further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution.
sent14: They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold.
sent15: Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy: they promote consistency across internal classifiers by distilling them to each other.
sent16: However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair.
sent17: They optimize these weights by a cross-level optimization algorithm.
sent18: They adopt PABEE's patience-based strategy for exiting.
sent19: Liao et al. (2021) train linear transformation layers called ""imitation learners"", to approximate the hidden states of future layers based on current hidden states.
sent20: For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners.
sent21: Entropy is used as the exit criterion.
sent22: PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidencebased methods.
sent23: The inference is terminated when multiple layers are confident.
sent24: Learning-based Early Exit Another stream of research is to learn a criterion for early exiting.
sent25: BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations.
sent26: They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction.
sent27: It takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit.
sent28: CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.
sent29: Cascading Cascading can be seen as a special form of early exit, performed at the model level.
sent30: Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers.
sent31: Therefore, they propose to use a suite of complete models with different numbers of layers for cascading.
sent32: CascadeBERT executes models one by one, from the smallest to the largest.
sent33: It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.
sent34: Applications Although early exit is originally developed for classification, there have been works extending it to more tasks and settings.
sent35: Li et al. (2021b) propose Token-Level Early-Exit that targets early exiting for sequence labeling.
sent36: They use the maximum class probability as confidence on a per-token basis.
sent37: Once the confidence hits the threshold, the hidden states of the corresponding tokens will be frozen and directly copied to upper layers.
sent38: These exited tokens will not attend to other tokens at upper layers but can still be attended by other tokens.
sent39: The model completely exits when every token exits.
sent40: A similar idea is also presented in Elbayad et al. (2020) and Liu et al. (2021b) where hidden states of some positions can be frozen and directly copied to upper layers, although the former is focused on generation and the latter is for classification.
sent41: Xin et al. (2020a) apply DeeBERT (Xin et al., 2020b) to document ranking and set different thresholds to the negative and positive classes for early exiting, to accommodate the imbalanced class distribution in document ranking.
sent42: ELUE (Liu et al., 2021a) is a benchmark which evaluates the Pareto Front of early exit models on the FLOPs-performance plane.
sent43: They provide a BERT-like baseline with jointly pretrained internal classifiers, to mitigate the gap between pretraining and fine-tuning.","Question: What are the different strategies for implementing early exit mechanisms in dynamic neural networks for NLP?

Supporting sentence: sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33",What are the different strategies for implementing early exit mechanisms in dynamic neural networks for NLP?,"sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33",3,"Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation.

That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.

Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training.

They first jointly train the internal classifiers with BERT by a weighted sum of cross-entropy losses that assigns larger weights for upper classifiers.

For inference, the model exits when k consecutive internal classifiers make the same prediction.

Other than improvement on performance and efficiency, they find that PABEE can improve adversarial robustness, which they attribute to the ensemble effect.

further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution.

They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold.

Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy: they promote consistency across internal classifiers by distilling them to each other.

However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair.

They optimize these weights by a cross-level optimization algorithm.

They adopt PABEE's patience-based strategy for exiting.

Liao et al. (2021) train linear transformation layers called ""imitation learners"", to approximate the hidden states of future layers based on current hidden states.

For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners.

Entropy is used as the exit criterion.

PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidencebased methods.

The inference is terminated when multiple layers are confident.

Learning-based Early Exit Another stream of research is to learn a criterion for early exiting.

BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations.

They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction.

It takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit.

CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.

Cascading Cascading can be seen as a special form of early exit, performed at the model level.

Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers.

Therefore, they propose to use a suite of complete models with different numbers of layers for cascading.

CascadeBERT executes models one by one, from the smallest to the largest.

It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.",implement,"One drawback in confidence-based early exit is wasted computation.

If the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.

Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training.

They first jointly train the internal classifiers with BERT by using a weighted sum of cross-entropy losses that assigns larger weights to upper classifiers.

For inference, the model exits when k consecutive internal classifiers make the same prediction.

Other than improvement on performance and efficiency, PABEE can also enhance adversarial robustness, which is attributed to the ensemble effect.

They further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution.

They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold.

Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy by promoting consistency across internal classifiers through mutual distillation.

However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair.

They optimize these weights by a cross-level optimization algorithm.

They adopt PABEE's patience-based strategy for exiting.

Liao et al. (2021) train linear transformation layers called ""imitation learners"" to approximate the hidden states of future layers based on current hidden states.

For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners.

Entropy is used as the exit criterion.

PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidence-based methods.

The inference is terminated when multiple layers are confident.

Another stream of research focuses on learning a criterion for early exiting.

BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of the Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations.

They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction.

The LTE module takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit.

CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.

Cascading can be seen as a special form of early exit, performed at the model level.

Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers.

Therefore, they propose to use a suite of complete models with different numbers of layers for cascading.

CascadeBERT executes models sequentially, starting from the smallest to the largest.

It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.","Question:

What are the different strategies for implementing early exit mechanisms in dynamic neural networks for NLP?

Answer:

One drawback in confidence-based early exit is wasted computation.

If the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.

Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training.

They first jointly train the internal classifiers with BERT by using a weighted sum of cross-entropy losses that assigns larger weights to upper classifiers.

For inference, the model exits when k consecutive internal classifiers make the same prediction.

Other than improvement on performance and efficiency, PABEE can also enhance adversarial robustness, which is attributed to the ensemble effect.

They further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution.

They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold.

Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy by promoting consistency across internal classifiers through mutual distillation.

However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair.

They optimize these weights by a cross-level optimization algorithm.

They adopt PABEE's patience-based strategy for exiting.

Liao et al. (2021) train linear transformation layers called ""imitation learners"" to approximate the hidden states of future layers based on current hidden states.

For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners.

Entropy is used as the exit criterion.

PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidence-based methods.

The inference is terminated when multiple layers are confident.

Another stream of research focuses on learning a criterion for early exiting.

BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of the Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations.

They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction.

The LTE module takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit.

CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.

Cascading can be seen as a special form of early exit, performed at the model level.

Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers.

Therefore, they propose to use a suite of complete models with different numbers of layers for cascading.

CascadeBERT executes models sequentially, starting from the smallest to the largest.

It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold."
248426721,What Do You Mean by Relation Extraction? A Survey on Datasets and Study on Scientific Relation Classification,https://www.semanticscholar.org/paper/29a369d83a7d6a49f6a3259bee23bd4d95db0b16,The Relation Extraction Task,11,"Conceptually, RE involves a pipeline of steps (see Figure 2). Starting from the raw text, the first step consists in identifying the entities and eventually assigning them a type. Entities involve either nominals or named entities, and hence it is either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD). 5 After entities are identified, approaches start to be more blurry as studies have approached RE via different angles.

One way is to take two steps, Relation Identification (RI) and subsequent Relation Classification (RC) , as illustrated in Figure 2. This means to first identify from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI). As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations (e.g., entity pairs involving distant entities, or entity type pairs not licensed by the relations are not even considered). The last step (RC) is usually a multi-class classification to assign a relation type r to the positive samples from the previous step. Some studies merge RI and RC (Seganti et al., 2021) into one step, by adding a no-relation (no-rel) label. Other studies instead reduce the task to RC, and assume there exists a relation between two entities and the task is to determine the type (without a no-rel label). Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase. Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019). Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set. 6 What Do You Mean by Relation Extraction? RE studies rarely address the whole pipeline. We 5 Some studies divide the entity extraction into two substeps: identification (often called MD), and subsequent classification into entity types. 6 Some studies name such relation Other (Hendrickx et al., 2010). analyze all the ACL papers published in the last five years which contain the Relation Extraction keyword in the title and determine which sub-task is performed (NER/MD, RI, RC). Table 2 shows such investigation. We leave out from this analysis (a) papers which make use of distant supervision or which somehow involve knowledge bases, (b) shared task papers, (c) the bioNLP field, (d) temporal RE, and (e) Open RE. The result shows that gold entities are usually assumed for RE, presumably given the complexity of the NER/MD task on its own. Most importantly, for end-to-end models, recent work has shown that ablations for steps like NER are lacking (Taillé et al., 2020). Our analysis further shows that it is difficult to determine the RI setup. While RC is always performed, the situation is different for RI (or no-rel). Sometimes RI is clearly not done (i.e., the paper assumes a scenario in which every instance contains at least one relation), but most of the times it is either not clear from the paper, or done in a simplified scenario (e.g., datasets which already clear out most of the no-rel entity pair instances). As this blurriness hampers fair evaluation, we propose that studies clearly state which step they include, i.e., whether the work focus is on RC, RI+RC or the full RE pipeline and how special cases (no-rel and NOTA) are handled. These details are utterly important as they impact both model estimation and evaluation.

Pipeline or Joint Model? The traditional RE pipeline is, by definition of pipeline, prone to error propagation by sub-tasks. Joint entity and relation extraction approaches have been proposed in order to alleviate this problem (Miwa and Bansal, 2016;Zhang et al., 2017a;Bekoulis et al., 2018a,b;Wang and Lu, 2020;Wang et al., 2021). However, Taillé et al. (2020) recently discussed the challenge of properly evaluating such complex models. They surveyed the evaluation metrics of recently published works on end-to-end RE referring to the Strict, Boundaries, Relaxed evaluation setting pro-  posed by Bekoulis et al. (2018a). They observe unfair comparisons and overestimations of end-toend models, and claim the need for more rigorous reports of evaluation settings, including detailed datasets statistics. While some recent work shifts to joint models, it is still an open question which approach (joint or pipeline) is the most robust. Zhong and Chen (2021) found that when incorporating modern pretrained language models (e.g., BERT) using separate encoders can surpass existing joint models. Since the output label space is different, separate encoders could better capture distinct contextual information. At the moment it is not clear if one approach is more suitable than the other for RE. For this reason and because of our final goal, which is a closer look to sub-domains in the scientific field, we follow the pipeline approach and, following most work from Table 2, we here restrict the setup by focusing on the RC task.","sent1: Conceptually, RE involves a pipeline of steps (see Figure 2).
sent2: Starting from the raw text, the first step consists in identifying the entities and eventually assigning them a type.
sent3: Entities involve either nominals or named entities, and hence it is either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD).
sent4: 5 After entities are identified, approaches start to be more blurry as studies have approached RE via different angles.
sent5: One way is to take two steps, Relation Identification (RI) and subsequent Relation Classification (RC) , as illustrated in Figure 2.
sent6: This means to first identify from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI).
sent7: As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations (e.g., entity pairs involving distant entities, or entity type pairs not licensed by the relations are not even considered).
sent8: The last step (RC) is usually a multi-class classification to assign a relation type r to the positive samples from the previous step.
sent9: Some studies merge RI and RC (Seganti et al., 2021) into one step, by adding a no-relation (no-rel) label.
sent10: Other studies instead reduce the task to RC, and assume there exists a relation between two entities and the task is to determine the type (without a no-rel label).
sent11: Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase.
sent12: Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).
sent13: Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set.
sent14: 6 What Do You Mean by Relation Extraction?
sent15: RE studies rarely address the whole pipeline.
sent16: We 5 Some studies divide the entity extraction into two substeps: identification (often called MD), and subsequent classification into entity types.
sent17: 6 Some studies name such relation Other (Hendrickx et al., 2010). analyze all the ACL papers published in the last five years which contain the Relation Extraction keyword in the title and determine which sub-task is performed (NER/MD, RI, RC).
sent18: Table 2 shows such investigation.
sent19: We leave out from this analysis (a) papers which make use of distant supervision or which somehow involve knowledge bases, (b) shared task papers, (c) the bioNLP field, (d) temporal RE, and (e) Open RE.
sent20: The result shows that gold entities are usually assumed for RE, presumably given the complexity of the NER/MD task on its own.
sent21: Most importantly, for end-to-end models, recent work has shown that ablations for steps like NER are lacking (Taillé et al., 2020).
sent22: Our analysis further shows that it is difficult to determine the RI setup.
sent23: While RC is always performed, the situation is different for RI (or no-rel).
sent24: Sometimes RI is clearly not done (i.e., the paper assumes a scenario in which every instance contains at least one relation), but most of the times it is either not clear from the paper, or done in a simplified scenario (e.g., datasets which already clear out most of the no-rel entity pair instances).
sent25: As this blurriness hampers fair evaluation, we propose that studies clearly state which step they include, i.e., whether the work focus is on RC, RI+RC or the full RE pipeline and how special cases (no-rel and NOTA) are handled.
sent26: These details are utterly important as they impact both model estimation and evaluation.
sent27: Pipeline or Joint Model? The traditional RE pipeline is, by definition of pipeline, prone to error propagation by sub-tasks.
sent28: Joint entity and relation extraction approaches have been proposed in order to alleviate this problem (Miwa and Bansal, 2016;Zhang et al., 2017a;Bekoulis et al., 2018a,b;Wang and Lu, 2020;Wang et al., 2021).
sent29: However, Taillé et al. (2020) recently discussed the challenge of properly evaluating such complex models.
sent30: They surveyed the evaluation metrics of recently published works on end-to-end RE referring to the Strict, Boundaries, Relaxed evaluation setting pro-  posed by Bekoulis et al. (2018a).
sent31: They observe unfair comparisons and overestimations of end-toend models, and claim the need for more rigorous reports of evaluation settings, including detailed datasets statistics.
sent32: While some recent work shifts to joint models, it is still an open question which approach (joint or pipeline) is the most robust.
sent33: Zhong and Chen (2021) found that when incorporating modern pretrained language models (e.g., BERT) using separate encoders can surpass existing joint models.
sent34: Since the output label space is different, separate encoders could better capture distinct contextual information.
sent35: At the moment it is not clear if one approach is more suitable than the other for RE.
sent36: For this reason and because of our final goal, which is a closer look to sub-domains in the scientific field, we follow the pipeline approach and, following most work from Table 2, we here restrict the setup by focusing on the RC task.","Question: What are the main steps involved in the Relation Extraction (RE) pipeline, and how do different studies approach these steps?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13","What are the main steps involved in the Relation Extraction (RE) pipeline, and how do different studies approach these steps?","sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",3,"Conceptually, RE involves a pipeline of steps (see Figure 2).

Starting from the raw text, the first step consists in identifying the entities and eventually assigning them a type.

Entities involve either nominals or named entities, and hence it is either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD).

5 After entities are identified, approaches start to be more blurry as studies have approached RE via different angles.

One way is to take two steps, Relation Identification (RI) and subsequent Relation Classification (RC) , as illustrated in Figure 2.

This means to first identify from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI).

As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations (e.g., entity pairs involving distant entities, or entity type pairs not licensed by the relations are not even considered).

The last step (RC) is usually a multi-class classification to assign a relation type r to the positive samples from the previous step.

Some studies merge RI and RC (Seganti et al., 2021) into one step, by adding a no-relation (no-rel) label.

Other studies instead reduce the task to RC, and assume there exists a relation between two entities and the task is to determine the type (without a no-rel label).

Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set.",implement,"Conceptually, Relation Extraction (RE) involves a pipeline of steps.

The first step involves identifying the entities in the raw text and assigning them a type.

Entities can be either nominals or named entities, which means the process involves either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD).

After entities are identified, approaches start to diverge as studies have tackled RE from various perspectives.

One approach is to take two steps: Relation Identification (RI) and subsequent Relation Classification (RC).

This involves first identifying from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI).

As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations.

The last step, Relation Classification (RC), is usually a multi-class classification to assign a relation type to the positive samples from the previous step.

Some studies merge RI and RC (Seganti et al., 2021) into one step by adding a no-relation (no-rel) label.

Other studies instead reduce the task to RC, assuming there exists a relation between two entities and the task is to determine the type (without a no-rel label).

Regardless, RI is influenced by the RC setup: relations that are not included in the RC label set are considered negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

Note that the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set.","Question:

What are the main steps involved in the Relation Extraction (RE) pipeline, and how do different studies approach these steps?

Answer:

Conceptually, Relation Extraction (RE) involves a pipeline of steps.

The first step involves identifying the entities in the raw text and assigning them a type.

Entities can be either nominals or named entities, which means the process involves either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD).

After entities are identified, approaches start to diverge as studies have tackled RE from various perspectives.

One approach is to take two steps: Relation Identification (RI) and subsequent Relation Classification (RC).

This involves first identifying from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI).

As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations.

The last step, Relation Classification (RC), is usually a multi-class classification to assign a relation type to the positive samples from the previous step.

Some studies merge RI and RC (Seganti et al., 2021) into one step by adding a no-relation (no-rel) label.

Other studies instead reduce the task to RC, assuming there exists a relation between two entities and the task is to determine the type (without a no-rel label).

Regardless, RI is influenced by the RC setup: relations that are not included in the RC label set are considered negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

Note that the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set."
254854317,The Decades Progress on Code-Switching Research in NLP: A Systematic Survey on Trends and Challenges,https://www.semanticscholar.org/paper/44ebfdb670007b3949507be0d1a1fca93bc3d5d5,Utilizing Neural Networks,7,"Following general NLP trends, we see the adoption of neural methods and pre-trained models growing in popularity over time. In contrast, the statistical and rule-based approaches are diminishing. Compared to ISCA, we see more adaptation of the pre-training model. This is because ACL work is more text-based focused, where pre-trained LMs are more widely available.

Neural-Based Models Figure 5 shows that the trend of using neural-based models started in 2013, and the usage of rule/linguistic constraint and statistical methods diminished gradually through time, but they are still used even with a low percentage. RNN and LSTM architectures are commonly used in sequence modeling, such as language modeling (Adel et al., 2013;Vu and Schultz, 2014;Adel et al., 2014c;Winata et al., 2018a;Garg et al., 2018a;Winata et al., 2019c) and CSW identification (Samih et al., 2016a). DNN-based and hybrid HMM-DNN models are used in speech recognition models .

Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer. Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017). A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018). A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b). Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021). Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b). In the speech domain, Lovenia et al. (2022) utilize wav2vec 2.0 (Baevski et al., 2020) as a starting model before fine-tuning.

Language Models Many pre-trained model approaches utilize multilingual LMs, such as mBERT or XLM-R to deal with CSW data (Khanuja et al., 2020b;Aguilar and Solorio, 2020;Pant and Dadu, 2020;Patwa et al., 2020;Winata et al., 2021a). These models are often fine-tuned with the downstream task or with CSW text to better adapt to the languages. Some downstream fine-tuning approaches use synthetic CSW data due to a lack of available datasets. Aguilar et al. (2021) propose a character-based subword module (char2subword) of the mBERT that learns the subword embedding that is suitable for modeling the noisy CSW text. Winata et al. (2021a) compare the performance of the multilingual LM versus the language-specific LM for CSW context. While XLM-R provides the best result, it is also computationally heavy. There needed to be more exploration of larger models. We see that pre-trained LMs provide better empirical results on current benchmark tasks and enables an end-to-end approach. Therefore, one can theoretically work on CSW tasks without any linguistic understanding of the language, assuming the dataset for model finetuning is available. However, the downside is that there is little understanding of how and when the LMs would fail, thus we encourage more interpretability work on these LMs in CSW setting.  et al., 2023), especially on different CSW variations. CSW style can vary in different regions of the world, and it would be interesting to gather more datasets on unexplored and unknown styles, which can be useful for further research and investigation on linguistics and NLP. Therefore, one future direction is to broaden the language scope of CSW research.","sent1: Following general NLP trends, we see the adoption of neural methods and pre-trained models growing in popularity over time.
sent2: In contrast, the statistical and rule-based approaches are diminishing.
sent3: Compared to ISCA, we see more adaptation of the pre-training model.
sent4: This is because ACL work is more text-based focused, where pre-trained LMs are more widely available.
sent5: Neural-Based Models Figure 5 shows that the trend of using neural-based models started in 2013, and the usage of rule/linguistic constraint and statistical methods diminished gradually through time, but they are still used even with a low percentage.
sent6: RNN and LSTM architectures are commonly used in sequence modeling, such as language modeling (Adel et al., 2013;Vu and Schultz, 2014;Adel et al., 2014c;Winata et al., 2018a;Garg et al., 2018a;Winata et al., 2019c) and CSW identification (Samih et al., 2016a).
sent7: DNN-based and hybrid HMM-DNN models are used in speech recognition models .
sent8: Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.
sent9: Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).
sent10: A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).
sent11: A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).
sent12: Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021).
sent13: Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b).
sent14: In the speech domain, Lovenia et al. (2022) utilize wav2vec 2.0 (Baevski et al., 2020) as a starting model before fine-tuning.
sent15: Language Models Many pre-trained model approaches utilize multilingual LMs, such as mBERT or XLM-R to deal with CSW data (Khanuja et al., 2020b;Aguilar and Solorio, 2020;Pant and Dadu, 2020;Patwa et al., 2020;Winata et al., 2021a).
sent16: These models are often fine-tuned with the downstream task or with CSW text to better adapt to the languages.
sent17: Some downstream fine-tuning approaches use synthetic CSW data due to a lack of available datasets.
sent18: Aguilar et al. (2021) propose a character-based subword module (char2subword) of the mBERT that learns the subword embedding that is suitable for modeling the noisy CSW text.
sent19: Winata et al. (2021a) compare the performance of the multilingual LM versus the language-specific LM for CSW context.
sent20: While XLM-R provides the best result, it is also computationally heavy.
sent21: There needed to be more exploration of larger models.
sent22: We see that pre-trained LMs provide better empirical results on current benchmark tasks and enables an end-to-end approach.
sent23: Therefore, one can theoretically work on CSW tasks without any linguistic understanding of the language, assuming the dataset for model finetuning is available.
sent24: However, the downside is that there is little understanding of how and when the LMs would fail, thus we encourage more interpretability work on these LMs in CSW setting.  et al., 2023), especially on different CSW variations.
sent25: CSW style can vary in different regions of the world, and it would be interesting to gather more datasets on unexplored and unknown styles, which can be useful for further research and investigation on linguistics and NLP.
sent26: Therefore, one future direction is to broaden the language scope of CSW research.","Question: How have neural-based models and pre-trained embeddings been utilized in code-switching research in NLP?

Supporting sentence: sent1, sent2, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24",How have neural-based models and pre-trained embeddings been utilized in code-switching research in NLP?,"sent1, sent2, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24",6,"Following general NLP trends, we see the adoption of neural methods and pre-trained models growing in popularity over time.

In contrast, the statistical and rule-based approaches are diminishing.

Neural-Based Models Figure 5 shows that the trend of using neural-based models started in 2013, and the usage of rule/linguistic constraint and statistical methods diminished gradually through time, but they are still used even with a low percentage.

RNN and LSTM architectures are commonly used in sequence modeling, such as language modeling (Adel et al., 2013;Vu and Schultz, 2014;Adel et al., 2014c;Winata et al., 2018a;Garg et al., 2018a;Winata et al., 2019c) and CSW identification (Samih et al., 2016a).

DNN-based and hybrid HMM-DNN models are used in speech recognition models .

Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.

Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).

A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).

A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).

Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021).

Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b).

In the speech domain, Lovenia et al. (2022) utilize wav2vec 2.0 (Baevski et al., 2020) as a starting model before fine-tuning.

Language Models Many pre-trained model approaches utilize multilingual LMs, such as mBERT or XLM-R to deal with CSW data (Khanuja et al., 2020b;Aguilar and Solorio, 2020;Pant and Dadu, 2020;Patwa et al., 2020;Winata et al., 2021a).

These models are often fine-tuned with the downstream task or with CSW text to better adapt to the languages.

Some downstream fine-tuning approaches use synthetic CSW data due to a lack of available datasets.

Aguilar et al. (2021) propose a character-based subword module (char2subword) of the mBERT that learns the subword embedding that is suitable for modeling the noisy CSW text.

Winata et al. (2021a) compare the performance of the multilingual LM versus the language-specific LM for CSW context.

While XLM-R provides the best result, it is also computationally heavy.

There needed to be more exploration of larger models.

We see that pre-trained LMs provide better empirical results on current benchmark tasks and enables an end-to-end approach.

Therefore, one can theoretically work on CSW tasks without any linguistic understanding of the language, assuming the dataset for model finetuning is available.

However, the downside is that there is little understanding of how and when the LMs would fail, thus we encourage more interpretability work on these LMs in CSW setting.  et al., 2023), especially on different CSW variations.",invalid,,"Question:

How have neural-based models and pre-trained embeddings been utilized in code-switching research in NLP?

Answer:

nan"
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,Self-attention heads,7,"Attention is widely considered to be useful for understanding Transformer models, and several studies proposed classification of attention head types:

• attending to the word itself, to previous/next words and to the end of the sentence (Raganato and Tiedemann, 2018);

• attending to previous/next tokens,    (Kovaleva et al., 2019) According to Clark et al. (2019), ""attention weight has a clear meaning: how much a particular word will be weighted when computing the next representation for the current word"". However, Kovaleva et al. (2019) showed that most selfattention heads do not directly encode any nontrivial linguistic information, since less than half of them had the ""heterogeneous"" pattern 2 . Much of the model encoded the vertical pattern (attention to [CLS], [SEP], and punctuation tokens), consistent with the observations by Clark et al. (2019). This apparent redundancy must be related to the overparametrization issue (see section 7).

Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends a lot to [SEP] and punctuation. Clark et al. (2019) hypothesize that periods and commas are simply almost as frequent as [CLS] and [SEP], and the model learns to rely on them. They suggest also that the function of [SEP] might be one of ""no-op"", a signal to ignore the head if its pattern is not applicable to the current case.

[SEP] gets increased attention starting in layer 5, but its importance for prediction drops. If this hypothesis is correct, attention probing studies that excluded the [SEP] and [CLS] tokens (as e.g.  and Htut et al. (2019)) should perhaps be revisited.

Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.

Some BERT heads seem to specialize in certain types of syntactic relations. Htut et al.

(2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions. The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in obj role more than the positional baseline. The evidence for nsubj, advmod, and amod has some variation between these two studies. The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in machine translation context. Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.

Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax (see subsection 4.1).  present evidence that attention weights are weak indicators of subjectverb agreement and reflexive anafora. Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.

Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system,. Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks. Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998). Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","sent1: Attention is widely considered to be useful for understanding Transformer models, and several studies proposed classification of attention head types:• attending to the word itself, to previous/next words and to the end of the sentence (Raganato and Tiedemann, 2018);• attending to previous/next tokens,    (Kovaleva et al., 2019)
sent2: According to Clark et al. (2019), ""attention weight has a clear meaning: how much a particular word will be weighted when computing the next representation for the current word"".
sent3: However, Kovaleva et al. (2019) showed that most selfattention heads do not directly encode any nontrivial linguistic information, since less than half of them had the ""heterogeneous"" pattern 2 .
sent4: Much of the model encoded the vertical pattern (attention to [CLS], [SEP], and punctuation tokens), consistent with the observations by Clark et al. (2019).
sent5: This apparent redundancy must be related to the overparametrization issue (see section 7).
sent6: Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends a lot to [SEP] and punctuation.
sent7: Clark et al. (2019) hypothesize that periods and commas are simply almost as frequent as [CLS] and [SEP], and the model learns to rely on them.
sent8: They suggest also that the function of [SEP] might be one of ""no-op"", a signal to ignore the head if its pattern is not applicable to the current case.
sent9: [SEP] gets increased attention starting in layer 5, but its importance for prediction drops.
sent10: If this hypothesis is correct, attention probing studies that excluded the [SEP] and [CLS] tokens (as e.g.  and Htut et al. (2019)) should perhaps be revisited.
sent11: Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.
sent12: Some BERT heads seem to specialize in certain types of syntactic relations.
sent13: Htut et al.(2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions.
sent14: The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in obj role more than the positional baseline.
sent15: The evidence for nsubj, advmod, and amod has some variation between these two studies.
sent16: The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in machine translation context.
sent17: Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax (see subsection 4.1).
sent18: present evidence that attention weights are weak indicators of subjectverb agreement and reflexive anafora.
sent19: Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.
sent20: Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system,.
sent21: Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.
sent22: Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).
sent23: Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","Question: What are the different types of self-attention head patterns identified in BERT, and how do they contribute to its performance?

Supporting sentence: sent1, sent2, sent3, sent4, sent6, sent7, sent8, sent9, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23","What are the different types of self-attention head patterns identified in BERT, and how do they contribute to its performance?","sent1, sent2, sent3, sent4, sent6, sent7, sent8, sent9, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23",2,"Attention is widely considered to be useful for understanding Transformer models, and several studies proposed classification of attention head types:• attending to the word itself, to previous/next words and to the end of the sentence (Raganato and Tiedemann, 2018);• attending to previous/next tokens,    (Kovaleva et al., 2019)

According to Clark et al. (2019), ""attention weight has a clear meaning: how much a particular word will be weighted when computing the next representation for the current word"".

However, Kovaleva et al. (2019) showed that most selfattention heads do not directly encode any nontrivial linguistic information, since less than half of them had the ""heterogeneous"" pattern 2 .

Much of the model encoded the vertical pattern (attention to [CLS], [SEP], and punctuation tokens), consistent with the observations by Clark et al. (2019).

Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends a lot to [SEP] and punctuation.

Clark et al. (2019) hypothesize that periods and commas are simply almost as frequent as [CLS] and [SEP], and the model learns to rely on them.

They suggest also that the function of [SEP] might be one of ""no-op"", a signal to ignore the head if its pattern is not applicable to the current case.

[SEP] gets increased attention starting in layer 5, but its importance for prediction drops.

Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.

Some BERT heads seem to specialize in certain types of syntactic relations.

Htut et al.(2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions.

The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in obj role more than the positional baseline.

The evidence for nsubj, advmod, and amod has some variation between these two studies.

The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in machine translation context.

Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax (see subsection 4.1).

present evidence that attention weights are weak indicators of subjectverb agreement and reflexive anafora.

Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.

Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system,.

Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.",implement,"Several studies have proposed classifications of attention head types in BERT, including attending to the word itself, to previous/next words, and to the end of the sentence (Raganato and Tiedemann, 2018), as well as attending to previous/next tokens (Kovaleva et al., 2019).

According to Clark et al. (2019), attention weight indicates how much a particular word will be weighted when computing the next representation for the current word.

However, Kovaleva et al. (2019) showed that most self-attention heads do not directly encode any nontrivial linguistic information, as less than half of them exhibited the ""heterogeneous"" pattern.

Much of the model encoded the vertical pattern, which involves attention to [CLS], [SEP], and punctuation tokens, consistent with the observations by Clark et al. (2019).

Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends significantly to [SEP] and punctuation.

Clark et al. (2019) hypothesize that periods and commas are almost as frequent as [CLS] and [SEP], leading the model to learn to rely on them.

They also suggest that the function of [SEP] might be a ""no-op,"" serving as a signal to ignore the head if its pattern is not applicable to the current case.

[SEP] gets increased attention starting in layer 5, but its importance for prediction drops.

Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.

Some BERT heads seem to specialize in certain types of syntactic relations.

Htut et al. (2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions.

The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in the object role more than the positional baseline.

The evidence for nsubj, advmod, and amod has some variation between these two studies.

The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in the machine translation context.

Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis. Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax.

They present evidence that attention weights are weak indicators of subject-verb agreement and reflexive anaphora.

Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.

Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system.

Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","Question:

What are the different types of self-attention head patterns identified in BERT, and how do they contribute to its performance?

Answer:

Several studies have proposed classifications of attention head types in BERT, including attending to the word itself, to previous/next words, and to the end of the sentence (Raganato and Tiedemann, 2018), as well as attending to previous/next tokens (Kovaleva et al., 2019).

According to Clark et al. (2019), attention weight indicates how much a particular word will be weighted when computing the next representation for the current word.

However, Kovaleva et al. (2019) showed that most self-attention heads do not directly encode any nontrivial linguistic information, as less than half of them exhibited the ""heterogeneous"" pattern.

Much of the model encoded the vertical pattern, which involves attention to [CLS], [SEP], and punctuation tokens, consistent with the observations by Clark et al. (2019).Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends significantly to [SEP] and punctuation.

Clark et al. (2019) hypothesize that periods and commas are almost as frequent as [CLS] and [SEP], leading the model to learn to rely on them.

They also suggest that the function of [SEP] might be a ""no-op,"" serving as a signal to ignore the head if its pattern is not applicable to the current case.

[SEP] gets increased attention starting in layer 5, but its importance for prediction drops.

Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.

Some BERT heads seem to specialize in certain types of syntactic relations.

Htut et al. (2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions.

The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in the object role more than the positional baseline.

The evidence for nsubj, advmod, and amod has some variation between these two studies.

The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in the machine translation context.

Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.

Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax.

They present evidence that attention weights are weak indicators of subject-verb agreement and reflexive anaphora.

Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.

Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system.

Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks."
254877175,A Survey of Deep Learning for Mathematical Reasoning,https://www.semanticscholar.org/paper/2dbec38fe353ab0e495ad09263389dbc9260824d,Task-specific Fine-tuning for Math,6,"Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task. This is also a common practice when there is not enough data for training the large models from scratch. As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a). Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).

Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task. This is also a common practice when there is not enough data for training the large models from scratch. As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a). Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).","sent1: Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task.
sent2: This is also a common practice when there is not enough data for training the large models from scratch.
sent3: As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).
sent4: Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task.
sent5: This is also a common practice when there is not enough data for training the large models from scratch.
sent6: As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).
sent7: Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).","Question: What are the different approaches to task-specific fine-tuning for mathematical reasoning in pre-trained language models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",What are the different approaches to task-specific fine-tuning for mathematical reasoning in pre-trained language models?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",3,"Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task.

This is also a common practice when there is not enough data for training the large models from scratch.

As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).Task-specific fine-tuning is a technique to improve the performance of a pre-trained language model on a specific task.

This is also a common practice when there is not enough data for training the large models from scratch.

As shown in Table 3, existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020;Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).",implement,"Task-specific fine-tuning is a technique used to improve the performance of a pre-trained language model on a specific task.

This approach is also commonly used when there is insufficient data to train large models from scratch.

Existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020; Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).

This is also a common practice when there is not enough data for training the large models from scratch.

Existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020; Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).","Question:

What are the different approaches to task-specific fine-tuning for mathematical reasoning in pre-trained language models?

Answer:

Task-specific fine-tuning is a technique used to improve the performance of a pre-trained language model on a specific task.

This approach is also commonly used when there is insufficient data to train large models from scratch.

Existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020; Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b).

This is also a common practice when there is not enough data for training the large models from scratch.

Existing work fine-tunes pre-trained language models on a variety of downstream tasks, such as math word problems (Kim et al., 2020; Shen et al., 2021), MathQA (Zhao et al., 2022), geometry problem solving (Lu et al., 2021a), linear algebra (Charton, 2022), and theorem proving (Welleck et al., 2022a).

Apart from fine-tuning the model parameters, some work also uses pre-trained language models as encoders and ensembles them with other modules for downstream tasks (Lu et al., 2021b)."
234093015,A Survey of Data Augmentation Approaches for NLP,https://www.semanticscholar.org/paper/63d8426ba1f51a8525dd19fd8ec92934ec71aea5,Example Interpolation Techniques,5,"Another class of DA techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples. This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA). Ensuing work has explored interpolating inner components (Verma et al., 2019;Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).

Another class of extensions of MIXUP which has been growing in the vision community attempts to fuse raw input image pairs together into a single 2 Table 1 compares several DA methods by various aspects relating to their applicability, dependencies, and requirements. Figure 2: Dependency tree morphing DA applied to a Turkish sentence, Şahin and Steedman (2018) input image, rather than improve the continuous interpolation mechanism. Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017) and COPY-PASTE (Ghiasi et al., 2020). For instance, CUTMIX replaces a small sub-region of Image A with a patch sampled from Image B, with the labels mixed in proportion to sub-region sizes. There is potential to borrow ideas and inspiration from these works for NLP, e.g. for multimodal work involving both images and text (see ""Multimodal challenges"" in §6).

A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs. This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c). Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others. SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α). The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).","sent1: Another class of DA techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples.
sent2: This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA).
sent3: Ensuing work has explored interpolating inner components (Verma et al., 2019;Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).
sent4: Another class of extensions of MIXUP which has been growing in the vision community attempts to fuse raw input image pairs together into a single 2 Table 1 compares several DA methods by various aspects relating to their applicability, dependencies, and requirements.
sent5: Figure 2: Dependency tree morphing DA applied to a Turkish sentence, Şahin and Steedman (2018) input image, rather than improve the continuous interpolation mechanism.
sent6: Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017) and COPY-PASTE (Ghiasi et al., 2020).
sent7: For instance, CUTMIX replaces a small sub-region of Image A with a patch sampled from Image B, with the labels mixed in proportion to sub-region sizes.
sent8: There is potential to borrow ideas and inspiration from these works for NLP, e.g. for multimodal work involving both images and text (see ""Multimodal challenges"" in §6).
sent9: A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs.
sent10: This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c).
sent11: Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others.
sent12: SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α).
sent13: The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).","Question: What are the key developments and techniques in the class of data augmentation methods known as Mixed Sample Data Augmentation (MSDA) for NLP?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",What are the key developments and techniques in the class of data augmentation methods known as Mixed Sample Data Augmentation (MSDA) for NLP?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",2,"Another class of DA techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples.

This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA).

Ensuing work has explored interpolating inner components (Verma et al., 2019;Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).

Another class of extensions of MIXUP which has been growing in the vision community attempts to fuse raw input image pairs together into a single 2 Table 1 compares several DA methods by various aspects relating to their applicability, dependencies, and requirements.

Figure 2: Dependency tree morphing DA applied to a Turkish sentence, Şahin and Steedman (2018) input image, rather than improve the continuous interpolation mechanism.

Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017) and COPY-PASTE (Ghiasi et al., 2020).

For instance, CUTMIX replaces a small sub-region of Image A with a patch sampled from Image B, with the labels mixed in proportion to sub-region sizes.

There is potential to borrow ideas and inspiration from these works for NLP, e.g. for multimodal work involving both images and text (see ""Multimodal challenges"" in §6).

A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs.

This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c).

Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others.

SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α).

The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).",implement,"Another class of data augmentation techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples.

This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA).

Ensuing work has explored interpolating inner components (Verma et al., 2019; Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).

Another class of extensions of MIXUP, which has been growing in the vision community, attempts to fuse raw input image pairs together into a single example.

Another notable extension of MIXUP involves dependency tree morphing data augmentation, as applied to a Turkish sentence by Şahin and Steedman (2018), which focuses on fusing raw input pairs rather than improving the continuous interpolation mechanism.

Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017), and COPY-PASTE (Ghiasi et al., 2020).

For instance, CUTMIX replaces a small sub-region of one image with a patch sampled from another image, with the labels mixed in proportion to sub-region sizes.

There is potential to borrow ideas and inspiration from these works for NLP, particularly for multimodal tasks involving both images and text.

A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs.

This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c).

Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others.

SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways: the ""hard"" version samples a binary mask and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient.

The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).","Question:

What are the key developments and techniques in the class of data augmentation methods known as Mixed Sample Data Augmentation (MSDA) for NLP?

Answer:

Another class of data augmentation techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples.

This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA).

Ensuing work has explored interpolating inner components (Verma et al., 2019; Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).

Another class of extensions of MIXUP, which has been growing in the vision community, attempts to fuse raw input image pairs together into a single example.

Another notable extension of MIXUP involves dependency tree morphing data augmentation, as applied to a Turkish sentence by Şahin and Steedman (2018), which focuses on fusing raw input pairs rather than improving the continuous interpolation mechanism.

Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017), and COPY-PASTE (Ghiasi et al., 2020).

For instance, CUTMIX replaces a small sub-region of one image with a patch sampled from another image, with the labels mixed in proportion to sub-region sizes.

There is potential to borrow ideas and inspiration from these works for NLP, particularly for multimodal tasks involving both images and text.

A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs.

This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c).

Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others.

SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways: the ""hard"" version samples a binary mask and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient.

The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a)."
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Benchmarks and Metrics,7,"To evaluate the NL2Code task, high-quality benchmarks and reliable metrics are fundamental and essential. In this section, we provide a brief overview of current benchmarks and metrics, as well as our observations and the open challenges.

We summarize 17 well-studied NL2Code benchmarks in Table 3, where we can find that each of these benchmarks has its own characteristics regarding size, language, complexity, and scenario. We observe that most benchmarks contain a limited number of instances. For example, the widely used HumanEval and MBPP have 164 and 974 instances, respectively. This is because these benchmarks are typically hand-written to ensure that LLMs have not seen them during training. In the era of large language models, it is crucial to avoid data leak-age when creating new benchmarks. Additionally, most current benchmarks have their problem descriptions in English and code solutions in Python.

Recently, several multi-lingual benchmarks have been proposed, such as MBXP (Athiwaratkun et al., 2022), HumanEvalX (Zheng et al., 2023), and Mul-tiPL (Cassano et al., 2022), which cover multiple programming languages, and ODEX (Wang et al., 2022c), which covers multiple natural languages. Details of multi-lingual benchmarks are listed in Appendix Table 7. Furthermore, benchmarks have been proposed for other practical scenarios, such as data science (Lai et al., 2022), public library (Zan et al., 2022b), private library (Zan et al., 2022a), multi-turn program synthesis (Nijkamp et al., 2023), and code security (Siddiq and msiddiq, 2022). For execution-based benchmarks, comprehensive test cases with complete coverage of the generated program can ensure the trustworthiness of evaluation results. As a reference, the average number of test cases for each benchmark, as well as the length statistics of the problem descriptions and solutions are also provided in Table 3.

Manually evaluating the generated code is impractical, which calls for the need for automatic metrics. The above mentioned benchmarks all provide test cases for execution-based evaluation, where metrics such as pass@k (Chen et al., 2021), n@k (Li et al., 2022b), test case aver-age (Hendrycks et al., 2021), and execution accuracy (Rajkumar et al., 2022) can be used. However, this approach has stringent requirements for the quality of test cases and can only evaluate executable code. For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code. So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.","sent1: To evaluate the NL2Code task, high-quality benchmarks and reliable metrics are fundamental and essential.
sent2: In this section, we provide a brief overview of current benchmarks and metrics, as well as our observations and the open challenges.
sent3: We summarize 17 well-studied NL2Code benchmarks in Table 3, where we can find that each of these benchmarks has its own characteristics regarding size, language, complexity, and scenario.
sent4: We observe that most benchmarks contain a limited number of instances.
sent5: For example, the widely used HumanEval and MBPP have 164 and 974 instances, respectively.
sent6: This is because these benchmarks are typically hand-written to ensure that LLMs have not seen them during training.
sent7: In the era of large language models, it is crucial to avoid data leak-age when creating new benchmarks.
sent8: Additionally, most current benchmarks have their problem descriptions in English and code solutions in Python.
sent9: Recently, several multi-lingual benchmarks have been proposed, such as MBXP (Athiwaratkun et al., 2022), HumanEvalX (Zheng et al., 2023), and Mul-tiPL (Cassano et al., 2022), which cover multiple programming languages, and ODEX (Wang et al., 2022c), which covers multiple natural languages.
sent10: Details of multi-lingual benchmarks are listed in Appendix Table 7.
sent11: Furthermore, benchmarks have been proposed for other practical scenarios, such as data science (Lai et al., 2022), public library (Zan et al., 2022b), private library (Zan et al., 2022a), multi-turn program synthesis (Nijkamp et al., 2023), and code security (Siddiq and msiddiq, 2022).
sent12: For execution-based benchmarks, comprehensive test cases with complete coverage of the generated program can ensure the trustworthiness of evaluation results.
sent13: As a reference, the average number of test cases for each benchmark, as well as the length statistics of the problem descriptions and solutions are also provided in Table 3.
sent14: Manually evaluating the generated code is impractical, which calls for the need for automatic metrics.
sent15: The above mentioned benchmarks all provide test cases for execution-based evaluation, where metrics such as pass@k (Chen et al., 2021), n@k (Li et al., 2022b), test case aver-age (Hendrycks et al., 2021), and execution accuracy (Rajkumar et al., 2022) can be used.
sent16: However, this approach has stringent requirements for the quality of test cases and can only evaluate executable code.
sent17: For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code.
sent18: So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.","Question: What are the current challenges and limitations in designing benchmarks and metrics for evaluating NL2Code tasks?

Supporting sentence: sent4, sent6, sent7, sent12, sent16, sent17, sent18",What are the current challenges and limitations in designing benchmarks and metrics for evaluating NL2Code tasks?,"sent4, sent6, sent7, sent12, sent16, sent17, sent18",7,"We observe that most benchmarks contain a limited number of instances.

This is because these benchmarks are typically hand-written to ensure that LLMs have not seen them during training.

In the era of large language models, it is crucial to avoid data leak-age when creating new benchmarks.

For execution-based benchmarks, comprehensive test cases with complete coverage of the generated program can ensure the trustworthiness of evaluation results.

However, this approach has stringent requirements for the quality of test cases and can only evaluate executable code.

For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code.

So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.",invalid,,"Question:

What are the current challenges and limitations in designing benchmarks and metrics for evaluating NL2Code tasks?

Answer:

nan"
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Single-Domain Datasets,14,"Single-domain text-to-SQL datasets typically collect question-SQL pairs for a single database in some real-world tasks, including early ones such as Academic (Li and Jagadish, 2014), Advising (Finegan-Dollak et al., 2018), ATIS (Price, 1990;Dahl et al., 1994), GeoQuery (Zelle and Mooney, 1996), Yelp and IMDB (Yaghmazadeh et al., 2017), Scholar (Iyer et al., 2017) and Restaurants (Tang and Mooney, 2000;Popescu et al., 2003), as well as recent ones such as SEDE (Hazoom et al., 2021), ESQL (Chen et al., 2021a) and MIMICSQL (Wang et al., 2020d). These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples. Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.

domains (Finegan-Dollak et al., 2018;Yu et al., 2018c). However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020). Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.

Appendix B gives a detailed discussion on domain knowledge and dataset convention, and concrete text-to-SQL examples.

Large Scale Cross-domain Datasets Large cross-domain datasets such as WikiSQL (Zhong et al., 2017) and Spider (Yu et al., 2018c) are proposed to better evaluate deep neural models. Wik-iSQL uses tables extracted from Wikipedia and lets annotators paraphrase questions generated for the tables. Compared to other datasets, WikiSQL is an order of magnitude larger, containing 80,654 natural utterances in total (Zhong et al., 2017). However, WikiSQL contains only simple SQL queries, and only a single table is queried within each SQL query (Yu et al., 2018c). Yu et al. (2018c) propose Spider, which contains 200 databases with an average of 5 tables for each database, to test models' performance on complicated unseen SQL queries and their ability to generalize to new domains. Furthermore, researchers expand Spider to study various issues of their inter-est (Lei et al., 2020;Zeng et al., 2020;Gan et al., 2021b;Taniguchi et al., 2021;Gan et al., 2021a).

Besides, researchers build several large-scale text-to-SQL datasets in different languages such as CSpider (Min et al., 2019a), TableQA (Sun et al., 2020), DuSQL (Wang et al., 2020c) in Chinese, ViText2SQL (Tuan Nguyen et al., 2020) in Vietnamese, and PortugueseSpider (José and Cozman, 2021) in Portuguese. Given that human translation has shown to be more accurate than machine translation (Min et al., 2019a), these datasets are annotated mainly by human experts based on the English Spider dataset. These Spider-based datasets can serve as potential resources for multi-lingual text-to-SQL research.

Other Datasets Several context-dependent textto-SQL datasets have been proposed, which involve user interactions with the text-to-SQL system in English (Price, 1990;Dahl et al., 1994;Yu et al., 2019a,b) and Chinese (Guo et al., 2021). In addition, researchers collect datasets to study questions in text-to-SQL being answerable or not (Zhang et al., 2020), lexicon-level mapping (Shi et al., 2020b) and cross-domain evaluation for real Web databases (Lee et al., 2021).

Appendix C.1 discusses more details about datasets mentioned in § 2.","sent1: Single-domain text-to-SQL datasets typically collect question-SQL pairs for a single database in some real-world tasks, including early ones such as Academic (Li and Jagadish, 2014), Advising (Finegan-Dollak et al., 2018), ATIS (Price, 1990;Dahl et al., 1994), GeoQuery (Zelle and Mooney, 1996), Yelp and IMDB (Yaghmazadeh et al., 2017), Scholar (Iyer et al., 2017) and Restaurants (Tang and Mooney, 2000;Popescu et al., 2003), as well as recent ones such as SEDE (Hazoom et al., 2021), ESQL (Chen et al., 2021a) and MIMICSQL (Wang et al., 2020d).
sent2: These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.
sent3: Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.domains (Finegan-Dollak et al., 2018;Yu et al., 2018c).
sent4: However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).
sent5: Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.
sent6: Appendix B gives a detailed discussion on domain knowledge and dataset convention, and concrete text-to-SQL examples.
sent7: Large Scale Cross-domain Datasets Large cross-domain datasets such as WikiSQL (Zhong et al., 2017) and Spider (Yu et al., 2018c) are proposed to better evaluate deep neural models.
sent8: Wik-iSQL uses tables extracted from Wikipedia and lets annotators paraphrase questions generated for the tables.
sent9: Compared to other datasets, WikiSQL is an order of magnitude larger, containing 80,654 natural utterances in total (Zhong et al., 2017).
sent10: However, WikiSQL contains only simple SQL queries, and only a single table is queried within each SQL query (Yu et al., 2018c).
sent11: Yu et al. (2018c) propose Spider, which contains 200 databases with an average of 5 tables for each database, to test models' performance on complicated unseen SQL queries and their ability to generalize to new domains.
sent12: Furthermore, researchers expand Spider to study various issues of their inter-est (Lei et al., 2020;Zeng et al., 2020;Gan et al., 2021b;Taniguchi et al., 2021;Gan et al., 2021a).
sent13: Besides, researchers build several large-scale text-to-SQL datasets in different languages such as CSpider (Min et al., 2019a), TableQA (Sun et al., 2020), DuSQL (Wang et al., 2020c) in Chinese, ViText2SQL (Tuan Nguyen et al., 2020) in Vietnamese, and PortugueseSpider (José and Cozman, 2021) in Portuguese.
sent14: Given that human translation has shown to be more accurate than machine translation (Min et al., 2019a), these datasets are annotated mainly by human experts based on the English Spider dataset.
sent15: These Spider-based datasets can serve as potential resources for multi-lingual text-to-SQL research.
sent16: Other Datasets Several context-dependent textto-SQL datasets have been proposed, which involve user interactions with the text-to-SQL system in English (Price, 1990;Dahl et al., 1994;Yu et al., 2019a,b) and Chinese (Guo et al., 2021).
sent17: In addition, researchers collect datasets to study questions in text-to-SQL being answerable or not (Zhang et al., 2020), lexicon-level mapping (Shi et al., 2020b) and cross-domain evaluation for real Web databases (Lee et al., 2021).
sent18: Appendix C.1 discusses more details about datasets mentioned in § 2.","Question: What are the limitations of single-domain text-to-SQL datasets, and how do they still provide value for model evaluation?

Supporting sentence: sent2, sent3, sent4, sent5","What are the limitations of single-domain text-to-SQL datasets, and how do they still provide value for model evaluation?","sent2, sent3, sent4, sent5",4,"These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.

Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.domains (Finegan-Dollak et al., 2018;Yu et al., 2018c).

However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.",implement,"Single-domain text-to-SQL datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.

Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other domains (Finegan-Dollak et al., 2018; Yu et al., 2018c).

However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

Thus, they are still valuable for evaluating models' ability to generalize to new domains and for exploring how to incorporate domain knowledge and dataset conventions into model predictions.","Question:

What are the limitations of single-domain text-to-SQL datasets, and how do they still provide value for model evaluation?

Answer:

Single-domain text-to-SQL datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.

Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other domains (Finegan-Dollak et al., 2018; Yu et al., 2018c).

However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

Thus, they are still valuable for evaluating models' ability to generalize to new domains and for exploring how to incorporate domain knowledge and dataset conventions into model predictions."
225062337,A Survey on Recent Approaches for Natural Language Processing in Low-Resource Scenarios,https://www.semanticscholar.org/paper/455cdafd55a5b5ddefa029bf97801327e142646d,Learning with Noisy Labels,12,"The above-presented methods allow obtaining labeled data quicker and cheaper than manual annotations. These labels tend, however, to contain more errors. Even though more training data is available, training directly on this noisily-labeled data can actually hurt the performance. Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision. We categorize these into two ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled. This often includes training a classifier to make the filtering decision. The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019). Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled. A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b). The classifier is no longer trained directly on the noisily-labeled data. Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution. This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels. In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing. In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances. Rehbein and Ruppenhofer (2017), Lison et al. (2020) and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.

In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method. Partial annotation learning Nooralahzadeh et al., 2019;Cao et al., 2019) takes this into account explicitly. Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019) or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).","sent1: The above-presented methods allow obtaining labeled data quicker and cheaper than manual annotations.
sent2: These labels tend, however, to contain more errors.
sent3: Even though more training data is available, training directly on this noisily-labeled data can actually hurt the performance.
sent4: Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision.
sent5: We categorize these into two ideas: noise filtering and noise modeling.
sent6: Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.
sent7: This often includes training a classifier to make the filtering decision.
sent8: The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019).
sent9: Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).
sent10: The noise in the labels can also be modeled.
sent11: A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b).
sent12: The classifier is no longer trained directly on the noisily-labeled data.
sent13: Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.
sent14: This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.
sent15: In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing.
sent16: In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances.
sent17: Rehbein and Ruppenhofer (2017), Lison et al. (2020) and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.
sent18: In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method.
sent19: Partial annotation learning Nooralahzadeh et al., 2019;Cao et al., 2019) takes this into account explicitly.
sent20: Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019) or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).","Question: What are the main strategies for handling noisy labels in distant supervision for NLP tasks?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",What are the main strategies for handling noisy labels in distant supervision for NLP tasks?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",2,"Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision.

We categorize these into two ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often includes training a classifier to make the filtering decision.

The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019).

Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b).

The classifier is no longer trained directly on the noisily-labeled data.

Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.

This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.

In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing.

In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances.

Rehbein and Ruppenhofer (2017), Lison et al. (2020) and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.

In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method.

Partial annotation learning Nooralahzadeh et al., 2019;Cao et al., 2019) takes this into account explicitly.

Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019) or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).",implement,"Many recent approaches for distant supervision use noise handling methods to diminish the negative effects of distant supervision.

These methods can be categorized into two main strategies: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often includes training a classifier to make the filtering decision.

The filtering can remove instances completely from the training data through methods such as a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent (Nooralahzadeh et al., 2019).

Alternatively, a soft filtering approach might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016; Luo et al., 2017; Hedderich and Klakow, 2018; Paul et al., 2019; Lange et al., 2019a,c; Chen et al., 2019; Wang et al., 2019; Hedderich et al., 2021b).

Instead, the classifier is no longer trained directly on the noisily-labeled data.

Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.

This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.

In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing.

In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances.

Rehbein and Ruppenhofer (2017), Lison et al. (2020), and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.

In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method.

Partial annotation learning (Nooralahzadeh et al., 2019; Cao et al., 2019) takes this into account explicitly.

Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019), or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).","Question:

What are the main strategies for handling noisy labels in distant supervision for NLP tasks?

Answer:

Many recent approaches for distant supervision use noise handling methods to diminish the negative effects of distant supervision.

These methods can be categorized into two main strategies: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often includes training a classifier to make the filtering decision.

The filtering can remove instances completely from the training data through methods such as a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent (Nooralahzadeh et al., 2019).

Alternatively, a soft filtering approach might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016; Luo et al., 2017; Hedderich and Klakow, 2018; Paul et al., 2019; Lange et al., 2019a,c; Chen et al., 2019; Wang et al., 2019; Hedderich et al., 2021b).

Instead, the classifier is no longer trained directly on the noisily-labeled data.

Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.

This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.

In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing.

In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances.

Rehbein and Ruppenhofer (2017), Lison et al. (2020), and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.

In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method.

Partial annotation learning (Nooralahzadeh et al., 2019; Cao et al., 2019) takes this into account explicitly.

Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019), or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019)."
236460206,Towards Argument Mining for Social Good: A Survey,https://www.semanticscholar.org/paper/dcb0b23685c9c116d8d53fe47e5157753659d3bd,Grounding AQ in deliberation: moderation as a real-world application,10,"Grounding AQ in a discourse perspective which quantifies ""team-playing"" and its impact on discourse dynamics is a clear challenge, both theoretically, in the Social Sciences and Argumentation Theory, and concretely, as the empirical quantification of discourse-grounded AQ will require large annotation efforts, real-time implementations, and thorough evaluation strategies. We propose to make a first step in tackling this challenge by mapping it into a concrete application: (semi-)automatic moderation implemented as a form of discourse optimization, or, as it is commonly referred to in the Social Sciences, facilitation (Kaner et al., 2007;Trénel, 2009). To illustrate the dynamics of moderation, let us start from concrete examples from a deliberation platform, RegulationRoom. This discussion forum has been employed by public institutions to gather citizens contributions on discussions targeting very heterogeneous issues (more details can be found in Appendix). Let us consider the following example from a discussion on the distracted driving by commercial vehicle operators (e.g., truckers and bus drivers). The posts we selected (arrows indicate comment nesting) are from the discussion sub-thread: Texting -what are the risks? 5 The example involves two users who clearly differ in their argumentation style and position. User 1 has a clear position on the topic (claim in bold: not just texting, but all cellphone interactions should be banned), which she/he supports with personal reports (underlined text) an emotional tone, and a style which is typical of social media text. User 2 replies, opening the post on a sarcastic note, which serves as the first premise to her/his (implicit) claim which is encoded in three rethorical questions (in bold): there should be no restrictions at all, because imposing them would be unfair. This is the case because (premises underlined): any distraction can cause an accident, some people are capable of using their phone while driving, people who spend lot of time in the car for professional reasons still need to communicate with loved ones. A moderator then joins the discussion to (a) provide a clarification as to why the focus is on texting and a link to further information on the matter, and (b) ask User 2 to elaborate on the personal communication issue, and to propose alternatives. In the Appendix we report another example from the same topic and thread, where the user acts as a problematizer, challenging the scope and definition of the rule under discussion and the moderator acts as a ""discourse traffic director"", pointing out that the user should read and contribute to different threads in the discussion.

The guidelines for human moderators in Reg-ulationRoom have been defined in advance in a 'moderator protocol' (eRulemaking Initiative et al., 2017) which reflect the moderator actions mentioned in the examples. In the protocol the moderator roles were divided into two main classes. Supervision functions include general moderator actions that do not necessarily target the specific content of the posts, e.g., greeting participants, monitoring compliance with netiquette (policing), or helping with technical difficulties. Substantive moderator functions aim to improve the quality of comments and promote fruitful discourse. As the examples above clearly show, this can both mean that the moderator encourages exchanges between discourse participants and participation in other posts (broadening the scope of the discussion), or helping users to improve the content of their posts (requests for clarification, focusing on one topic, substantive reasoning, sharing personal experiences).

RegulationRoom represents an excellent example of the beneficial role of the moderator in maintaining productive argumentation from participants. However, to the best of our knowledge, there is little to no NLP work targeting moderation modeling. Park et al. (2012) used data from Regula-tionRoom and conducted an annotation study to empirically categorize the types of moderator interventions specified in the moderator protocol. Classification experiments were conducted using SVM to predict the type of action a moderator would perform, given the previous comment. However this work is limited as it only focuses on two types of moderator interventions (broadening the scope of the discussion, improving argument quality) and as it does not predict whether the moderator should intervene, building on the assumption that a given comment has already been flagged as ""in need for moderation"".

Besides the concrete example of Regulation-Room, moderation and discourse facilitation have been, and still are, a crucial topic in digital democracy. 6 The know-how of digital democracy experts is an invaluable starting point for the application of AM to moderation, as current research targets both the integration of digital solutions to facilitate online campaigns, and a critical reflection of the effects of such innovations on the deliberation outcomes.

Digital innovation supporting deliberation Argument maps (Walton, 2005) are widely employed to support online discussions, as an emerging optimization of the deliberation. Given a specific topic, for example possible reactions to climate change, users who wish to contribute to the discussion are requested to structure their contribution by producing an item in a conceptual map and optionally writing an accompanying post. Their contribution to the argument maps is often reviewed by a moderator. So in a sense, the argument map for a given deliberation process is the outcome of a process that comes both from below (the user) and above (the moderator).

Thanks to argument maps, the overall discourse picture can be overviewed and it is easier for the group of contributors to express support for one (or many) of the available options, without having to read a large number of long posts. An example of this approach is represented in Deliberatorium 7 , an e-deliberation platform which has been extensively employed in many reference studies on the effect of digital innovation on deliberation (Klein, 2011). Another example of a digital deliberation platform which integrates argument maps and offers an option for moderation is COLAGREE (Yang et al., 2021;Ito, 2018). Among the studies testing the impact of such digital platforms on online deliberation, Spada et al. (2015) tests the effect of Deliberatorium's argument maps on an online discussion among the supporters of the Italian Democratic party concerning the desired features of electoral law to be proposed by the party to the Parliament. This study compared the discussion of users employing Deliberatorium and a control group using a traditional forum format which was then encoded into argument maps. The comparison showed that the argument map modality did not discourage participation, and while it appeared to make users less creative (fewer new ideas as compared to the traditional forum), it also reduced the rate of claims without further discussion.

Yet, the need for trained moderators tends to be a significant bottleneck (both in terms of time and of costs) in digital deliberation. Moreover, empirical research on the effect of moderation on deliberation has uncovered the risks of biased moderation. For example, the experiment in Spada and Vreeland (2013) tests the extent to which moderators can influence participants' behavior by expressing their views during the moderation process.","sent1: Grounding AQ in a discourse perspective which quantifies ""team-playing"" and its impact on discourse dynamics is a clear challenge, both theoretically, in the Social Sciences and Argumentation Theory, and concretely, as the empirical quantification of discourse-grounded AQ will require large annotation efforts, real-time implementations, and thorough evaluation strategies.
sent2: We propose to make a first step in tackling this challenge by mapping it into a concrete application: (semi-)automatic moderation implemented as a form of discourse optimization, or, as it is commonly referred to in the Social Sciences, facilitation (Kaner et al., 2007;Trénel, 2009).
sent3: To illustrate the dynamics of moderation, let us start from concrete examples from a deliberation platform, RegulationRoom.
sent4: This discussion forum has been employed by public institutions to gather citizens contributions on discussions targeting very heterogeneous issues (more details can be found in Appendix).
sent5: Let us consider the following example from a discussion on the distracted driving by commercial vehicle operators (e.g., truckers and bus drivers).
sent6: The posts we selected (arrows indicate comment nesting) are from the discussion sub-thread: Texting -what are the risks?
sent7: 5 The example involves two users who clearly differ in their argumentation style and position.
sent8: User 1 has a clear position on the topic (claim in bold: not just texting, but all cellphone interactions should be banned), which she/he supports with personal reports (underlined text) an emotional tone, and a style which is typical of social media text.
sent9: User 2 replies, opening the post on a sarcastic note, which serves as the first premise to her/his (implicit) claim which is encoded in three rethorical questions (in bold): there should be no restrictions at all, because imposing them would be unfair.
sent10: This is the case because (premises underlined): any distraction can cause an accident, some people are capable of using their phone while driving, people who spend lot of time in the car for professional reasons still need to communicate with loved ones.
sent11: A moderator then joins the discussion to (a) provide a clarification as to why the focus is on texting and a link to further information on the matter, and (b) ask User 2 to elaborate on the personal communication issue, and to propose alternatives.
sent12: In the Appendix we report another example from the same topic and thread, where the user acts as a problematizer, challenging the scope and definition of the rule under discussion and the moderator acts as a ""discourse traffic director"", pointing out that the user should read and contribute to different threads in the discussion.
sent13: The guidelines for human moderators in Reg-ulationRoom have been defined in advance in a 'moderator protocol' (eRulemaking Initiative et al., 2017) which reflect the moderator actions mentioned in the examples.
sent14: In the protocol the moderator roles were divided into two main classes.
sent15: Supervision functions include general moderator actions that do not necessarily target the specific content of the posts, e.g., greeting participants, monitoring compliance with netiquette (policing), or helping with technical difficulties.
sent16: Substantive moderator functions aim to improve the quality of comments and promote fruitful discourse.
sent17: As the examples above clearly show, this can both mean that the moderator encourages exchanges between discourse participants and participation in other posts (broadening the scope of the discussion), or helping users to improve the content of their posts (requests for clarification, focusing on one topic, substantive reasoning, sharing personal experiences).RegulationRoom represents an excellent example of the beneficial role of the moderator in maintaining productive argumentation from participants.
sent18: However, to the best of our knowledge, there is little to no NLP work targeting moderation modeling.
sent19: Park et al. (2012) used data from Regula-tionRoom and conducted an annotation study to empirically categorize the types of moderator interventions specified in the moderator protocol.
sent20: Classification experiments were conducted using SVM to predict the type of action a moderator would perform, given the previous comment.
sent21: However this work is limited as it only focuses on two types of moderator interventions (broadening the scope of the discussion, improving argument quality) and as it does not predict whether the moderator should intervene, building on the assumption that a given comment has already been flagged as ""in need for moderation"".
sent22: Besides the concrete example of Regulation-Room, moderation and discourse facilitation have been, and still are, a crucial topic in digital democracy.
sent23: 6 The know-how of digital democracy experts is an invaluable starting point for the application of AM to moderation, as current research targets both the integration of digital solutions to facilitate online campaigns, and a critical reflection of the effects of such innovations on the deliberation outcomes.
sent24: Digital innovation supporting deliberation Argument maps (Walton, 2005) are widely employed to support online discussions, as an emerging optimization of the deliberation.
sent25: Given a specific topic, for example possible reactions to climate change, users who wish to contribute to the discussion are requested to structure their contribution by producing an item in a conceptual map and optionally writing an accompanying post.
sent26: Their contribution to the argument maps is often reviewed by a moderator.
sent27: So in a sense, the argument map for a given deliberation process is the outcome of a process that comes both from below (the user) and above (the moderator).
sent28: Thanks to argument maps, the overall discourse picture can be overviewed and it is easier for the group of contributors to express support for one (or many) of the available options, without having to read a large number of long posts.
sent29: An example of this approach is represented in Deliberatorium 7 , an e-deliberation platform which has been extensively employed in many reference studies on the effect of digital innovation on deliberation (Klein, 2011).
sent30: Another example of a digital deliberation platform which integrates argument maps and offers an option for moderation is COLAGREE (Yang et al., 2021;Ito, 2018).
sent31: Among the studies testing the impact of such digital platforms on online deliberation, Spada et al. (2015) tests the effect of Deliberatorium's argument maps on an online discussion among the supporters of the Italian Democratic party concerning the desired features of electoral law to be proposed by the party to the Parliament.
sent32: This study compared the discussion of users employing Deliberatorium and a control group using a traditional forum format which was then encoded into argument maps.
sent33: The comparison showed that the argument map modality did not discourage participation, and while it appeared to make users less creative (fewer new ideas as compared to the traditional forum), it also reduced the rate of claims without further discussion.
sent34: Yet, the need for trained moderators tends to be a significant bottleneck (both in terms of time and of costs) in digital deliberation.
sent35: Moreover, empirical research on the effect of moderation on deliberation has uncovered the risks of biased moderation.
sent36: For example, the experiment in Spada and Vreeland (2013) tests the extent to which moderators can influence participants' behavior by expressing their views during the moderation process.","Question: How does the role of moderators in RegulationRoom contribute to maintaining productive argumentation?

Supporting sentence: sent11, sent12, sent13, sent14, sent15, sent16, sent17",How does the role of moderators in RegulationRoom contribute to maintaining productive argumentation?,"sent11, sent12, sent13, sent14, sent15, sent16, sent17",3,"A moderator then joins the discussion to (a) provide a clarification as to why the focus is on texting and a link to further information on the matter, and (b) ask User 2 to elaborate on the personal communication issue, and to propose alternatives.

In the Appendix we report another example from the same topic and thread, where the user acts as a problematizer, challenging the scope and definition of the rule under discussion and the moderator acts as a ""discourse traffic director"", pointing out that the user should read and contribute to different threads in the discussion.

The guidelines for human moderators in Reg-ulationRoom have been defined in advance in a 'moderator protocol' (eRulemaking Initiative et al., 2017) which reflect the moderator actions mentioned in the examples.

In the protocol the moderator roles were divided into two main classes.

Supervision functions include general moderator actions that do not necessarily target the specific content of the posts, e.g., greeting participants, monitoring compliance with netiquette (policing), or helping with technical difficulties.

Substantive moderator functions aim to improve the quality of comments and promote fruitful discourse.

As the examples above clearly show, this can both mean that the moderator encourages exchanges between discourse participants and participation in other posts (broadening the scope of the discussion), or helping users to improve the content of their posts (requests for clarification, focusing on one topic, substantive reasoning, sharing personal experiences).RegulationRoom represents an excellent example of the beneficial role of the moderator in maintaining productive argumentation from participants.",implement,"Moderators in RegulationRoom contribute to maintaining productive argumentation by providing clarifications and asking users to elaborate on issues and propose alternatives.

Moderators also act as ""discourse traffic directors,"" guiding users to read and contribute to different threads in the discussion.

The guidelines for human moderators in RegulationRoom have been defined in advance in a 'moderator protocol' (eRulemaking Initiative et al., 2017), which reflect the moderator actions mentioned in the examples.

The protocol divides moderator roles into two main classes.

Supervision functions include general moderator actions that do not necessarily target the specific content of the posts, such as greeting participants, monitoring compliance with netiquette, or helping with technical difficulties.

Substantive moderator functions aim to improve the quality of comments and promote fruitful discourse.

This can involve encouraging exchanges between discourse participants and participation in other posts to broaden the scope of the discussion, or helping users improve the content of their posts by requesting clarification, focusing on one topic, providing substantive reasoning, and sharing personal experiences. RegulationRoom represents an excellent example of the beneficial role of the moderator in maintaining productive argumentation from participants.","Question:

How does the role of moderators in RegulationRoom contribute to maintaining productive argumentation?

Answer:

Moderators in RegulationRoom contribute to maintaining productive argumentation by providing clarifications and asking users to elaborate on issues and propose alternatives.

Moderators also act as ""discourse traffic directors,"" guiding users to read and contribute to different threads in the discussion.

The guidelines for human moderators in RegulationRoom have been defined in advance in a 'moderator protocol' (eRulemaking Initiative et al., 2017), which reflect the moderator actions mentioned in the examples.

The protocol divides moderator roles into two main classes.

Supervision functions include general moderator actions that do not necessarily target the specific content of the posts, such as greeting participants, monitoring compliance with netiquette, or helping with technical difficulties.

Substantive moderator functions aim to improve the quality of comments and promote fruitful discourse.

This can involve encouraging exchanges between discourse participants and participation in other posts to broaden the scope of the discussion, or helping users improve the content of their posts by requesting clarification, focusing on one topic, providing substantive reasoning, and sharing personal experiences.

RegulationRoom represents an excellent example of the beneficial role of the moderator in maintaining productive argumentation from participants."
225062337,A Survey on Recent Approaches for Natural Language Processing in Low-Resource Scenarios,https://www.semanticscholar.org/paper/455cdafd55a5b5ddefa029bf97801327e142646d,Pre-Trained Language Representations,4,"Feature vectors are the core input component of many neural network-based models for NLP tasks. They are numerical representations of words or sentences, as neural architectures do not allow the processing of strings and characters as such. Collobert et al. (2011) showed that training these models for the task of language-modeling on a large-scale corpus results in high-quality word representations, which can be reused for other downstream tasks as well. Subword-based embeddings such as fastText n-gram embeddings (Bojanowski et al., 2017) and byte-pair-encoding embeddings (Heinzerling and Strube, 2018) addressed out-of-vocabulary issues by splitting words into multiple subwords, which in combination represent the original word.  showed that these embeddings leveraging subword information are beneficial for lowresource sequence labeling tasks, such as named entity recognition and typing, and outperform wordlevel embeddings. Jungmaier et al. (2020) added smoothing to word2vec models to correct its bias towards rare words and achieved improvements in particular for low-resource settings. In addition, pre-trained embeddings were published for more than 270 languages for both embedding methods. This enabled the processing of texts in many languages, including multiple low-resource languages found in Wikipedia. More recently, a trend emerged of pre-training large embedding models using a language model objective to create contextaware word representations by predicting the next word or sentence. This includes pre-trained transformer models (Vaswani et al., 2017), such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019b). These methods are particularly helpful for low-resource languages for which large amounts of unlabeled data are available, but task-specific labeled data is scarce (Cruz and Cheng, 2019).

Open Issues: While pre-trained language models achieve significant performance increases compared to standard word embeddings, it is still questionable if these methods are suited for real-world low-resource scenarios. For example, all of these models require large hardware requirements, in particular, considering that the transformer model size keeps increasing to boost performance (Raffel et al., 2020). Therefore, these large-scale methods might not be suited for low-resource scenarios where hardware is also low-resource. Biljon et al. (2020) showed that low-to mediumdepth transformer sizes perform better than larger models for low-resource languages and Schick and Schütze (2020) managed to train models with three orders of magnitude fewer parameters that perform on-par with large-scale models like GPT-3 on few-shot task by reformulating the training task and using ensembling. Melamud et al. (2019) showed that simple bag-of-words approaches are better when there are only a few dozen training instances or less for text classification, while more complex transformer models require more training data. Bhattacharjee et al. (2020) found that crossview training (Clark et al., 2018) leverages large amounts of unlabeled data better for task-specific applications in contrast to the general representations learned by BERT. Moreover, data quality for low-resource, even for unlabeled data, might not be comparable to data from high-resource languages. Alabi et al. (2020) found that word embeddings trained on larger amounts of unlabeled data from low-resource languages are not competitive to embeddings trained on smaller, but curated data sources.","sent1: Feature vectors are the core input component of many neural network-based models for NLP tasks.
sent2: They are numerical representations of words or sentences, as neural architectures do not allow the processing of strings and characters as such.
sent3: Collobert et al. (2011) showed that training these models for the task of language-modeling on a large-scale corpus results in high-quality word representations, which can be reused for other downstream tasks as well.
sent4: Subword-based embeddings such as fastText n-gram embeddings (Bojanowski et al., 2017) and byte-pair-encoding embeddings (Heinzerling and Strube, 2018) addressed out-of-vocabulary issues by splitting words into multiple subwords, which in combination represent the original word.
sent5: showed that these embeddings leveraging subword information are beneficial for lowresource sequence labeling tasks, such as named entity recognition and typing, and outperform wordlevel embeddings.
sent6: Jungmaier et al. (2020) added smoothing to word2vec models to correct its bias towards rare words and achieved improvements in particular for low-resource settings.
sent7: In addition, pre-trained embeddings were published for more than 270 languages for both embedding methods.
sent8: This enabled the processing of texts in many languages, including multiple low-resource languages found in Wikipedia.
sent9: More recently, a trend emerged of pre-training large embedding models using a language model objective to create contextaware word representations by predicting the next word or sentence.
sent10: This includes pre-trained transformer models (Vaswani et al., 2017), such as BERT (Devlin et al., 2019) or RoBERTa (Liu et al., 2019b).
sent11: These methods are particularly helpful for low-resource languages for which large amounts of unlabeled data are available, but task-specific labeled data is scarce (Cruz and Cheng, 2019).
sent12: Open Issues: While pre-trained language models achieve significant performance increases compared to standard word embeddings, it is still questionable if these methods are suited for real-world low-resource scenarios.
sent13: For example, all of these models require large hardware requirements, in particular, considering that the transformer model size keeps increasing to boost performance (Raffel et al., 2020).
sent14: Therefore, these large-scale methods might not be suited for low-resource scenarios where hardware is also low-resource.
sent15: Biljon et al. (2020) showed that low-to mediumdepth transformer sizes perform better than larger models for low-resource languages and Schick and Schütze (2020) managed to train models with three orders of magnitude fewer parameters that perform on-par with large-scale models like GPT-3 on few-shot task by reformulating the training task and using ensembling.
sent16: Melamud et al. (2019) showed that simple bag-of-words approaches are better when there are only a few dozen training instances or less for text classification, while more complex transformer models require more training data.
sent17: Bhattacharjee et al. (2020) found that crossview training (Clark et al., 2018) leverages large amounts of unlabeled data better for task-specific applications in contrast to the general representations learned by BERT.
sent18: Moreover, data quality for low-resource, even for unlabeled data, might not be comparable to data from high-resource languages.
sent19: Alabi et al. (2020) found that word embeddings trained on larger amounts of unlabeled data from low-resource languages are not competitive to embeddings trained on smaller, but curated data sources.","Question: What are the challenges and solutions associated with using pre-trained language models for low-resource NLP scenarios?

Supporting sentence: sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19",What are the challenges and solutions associated with using pre-trained language models for low-resource NLP scenarios?,"sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19",7,"Open Issues: While pre-trained language models achieve significant performance increases compared to standard word embeddings, it is still questionable if these methods are suited for real-world low-resource scenarios.

For example, all of these models require large hardware requirements, in particular, considering that the transformer model size keeps increasing to boost performance (Raffel et al., 2020).

Therefore, these large-scale methods might not be suited for low-resource scenarios where hardware is also low-resource.

Biljon et al. (2020) showed that low-to mediumdepth transformer sizes perform better than larger models for low-resource languages and Schick and Schütze (2020) managed to train models with three orders of magnitude fewer parameters that perform on-par with large-scale models like GPT-3 on few-shot task by reformulating the training task and using ensembling.

Melamud et al. (2019) showed that simple bag-of-words approaches are better when there are only a few dozen training instances or less for text classification, while more complex transformer models require more training data.

Bhattacharjee et al. (2020) found that crossview training (Clark et al., 2018) leverages large amounts of unlabeled data better for task-specific applications in contrast to the general representations learned by BERT.

Moreover, data quality for low-resource, even for unlabeled data, might not be comparable to data from high-resource languages.

Alabi et al. (2020) found that word embeddings trained on larger amounts of unlabeled data from low-resource languages are not competitive to embeddings trained on smaller, but curated data sources.",invalid,,"Question:

What are the challenges and solutions associated with using pre-trained language models for low-resource NLP scenarios?

Answer:

nan"
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Model and Training-based Approaches,6,"Pre-training Recent work has demonstrated pretraining as an effective way to improve NLP models' out-of-distribution robustness (Hendrycks et al., 2020a;Tu et al., 2020), potentially due to its self-supervised objective and the use of large amounts of diverse pre-training data that encourages generalization from a small number of examples that counter the spurious correlations. Tu et al. (2020) showed a few other factors can also contribute to robust accuracy, including larger model size, more fine-tuning data, and longer fine-tuning. A similar observation is made by Taori et al. (2020) in the vision domain, where the authors found training with larger and more diverse datasets offer better robustness consistently in multiple cases, compared to various robustness interventions proposed in the existing literature. In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021). Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.

When to Use Data-driven or Model-based Approaches? In many cases both the data and the model can contribute to a model's lack of robustness, hence data-driven and model-based approaches could be combined to further improve a model's robustness. One interesting phenomenon observed by (Liu et al., 2019) is to attribute models' robustness failures to blind spots in the training data, or the intrinsic learning ability of the model. The authors found that both patterns are possible: in some cases models can be inoculated via being exposed to a small amount of challenging data, similar to the data augmentation approaches mentioned in Section 5.1; on the other hand, some challenging patterns remain difficult which connects to the larger question around generalizability to unseen adversarial and counterfactual patterns (Huang et al., 2020;Jha et al., 2020;Joshi and He, 2021), which is relatively under-explored but deserves much attention.","sent1: Pre-training Recent work has demonstrated pretraining as an effective way to improve NLP models' out-of-distribution robustness (Hendrycks et al., 2020a;Tu et al., 2020), potentially due to its self-supervised objective and the use of large amounts of diverse pre-training data that encourages generalization from a small number of examples that counter the spurious correlations.
sent2: Tu et al. (2020) showed a few other factors can also contribute to robust accuracy, including larger model size, more fine-tuning data, and longer fine-tuning.
sent3: A similar observation is made by Taori et al. (2020) in the vision domain, where the authors found training with larger and more diverse datasets offer better robustness consistently in multiple cases, compared to various robustness interventions proposed in the existing literature.
sent4: In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021).
sent5: Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.
sent6: When to Use Data-driven or Model-based Approaches?
sent7: In many cases both the data and the model can contribute to a model's lack of robustness, hence data-driven and model-based approaches could be combined to further improve a model's robustness.
sent8: One interesting phenomenon observed by (Liu et al., 2019) is to attribute models' robustness failures to blind spots in the training data, or the intrinsic learning ability of the model.
sent9: The authors found that both patterns are possible: in some cases models can be inoculated via being exposed to a small amount of challenging data, similar to the data augmentation approaches mentioned in Section 5.1; on the other hand, some challenging patterns remain difficult which connects to the larger question around generalizability to unseen adversarial and counterfactual patterns (Huang et al., 2020;Jha et al., 2020;Joshi and He, 2021), which is relatively under-explored but deserves much attention.","Question: What are the key factors and strategies that contribute to improving the out-of-distribution robustness of NLP models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent7, sent8, sent9",What are the key factors and strategies that contribute to improving the out-of-distribution robustness of NLP models?,"sent1, sent2, sent3, sent4, sent5, sent7, sent8, sent9",7,"Pre-training Recent work has demonstrated pretraining as an effective way to improve NLP models' out-of-distribution robustness (Hendrycks et al., 2020a;Tu et al., 2020), potentially due to its self-supervised objective and the use of large amounts of diverse pre-training data that encourages generalization from a small number of examples that counter the spurious correlations.

Tu et al. (2020) showed a few other factors can also contribute to robust accuracy, including larger model size, more fine-tuning data, and longer fine-tuning.

A similar observation is made by Taori et al. (2020) in the vision domain, where the authors found training with larger and more diverse datasets offer better robustness consistently in multiple cases, compared to various robustness interventions proposed in the existing literature.

In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021).

Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.

In many cases both the data and the model can contribute to a model's lack of robustness, hence data-driven and model-based approaches could be combined to further improve a model's robustness.

One interesting phenomenon observed by (Liu et al., 2019) is to attribute models' robustness failures to blind spots in the training data, or the intrinsic learning ability of the model.

The authors found that both patterns are possible: in some cases models can be inoculated via being exposed to a small amount of challenging data, similar to the data augmentation approaches mentioned in Section 5.1; on the other hand, some challenging patterns remain difficult which connects to the larger question around generalizability to unseen adversarial and counterfactual patterns (Huang et al., 2020;Jha et al., 2020;Joshi and He, 2021), which is relatively under-explored but deserves much attention.",invalid,,"Question:

What are the key factors and strategies that contribute to improving the out-of-distribution robustness of NLP models?

Answer:

nan"
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Evaluation methods,8,"As noted in Section 2, the subjectivity of meeting summaries, stemming in part from the preference for abstractive summarization, complicates the evaluation task. Evaluation requires both verifying that the content in a system-based summary follows from the original transcript and measuring the overlap with a gold-standard summary. However, given the expressive freedom encouraged by abstractive approaches, checking for semantic entailment and overlap of summary-worthy content requires deep semantic understanding, not just recognition that the same words are used.

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries. If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap. Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text. Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results. Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate. Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.

Clearly, evaluation is itself a very challenging task. And we note that none of these metrics even touches on another central challenge for summary evaluation, namely that of factual consistency. When we summarize a meeting or detail decisions and actions items in our own words, it is important to get the facts straight. Otherwise, the resulting summaries are not reliable for an end user. While we do not know of current work that focuses on evaluation of factuality explicitly for the meeting domain, the study of factual consistency in summarization more generally is a budding research area that we discuss in Section 6.

In the absence of a clear winner for summary evaluation metrics, none of the alternatives has yet to be widely adopted. In our comparison of different summarization systems in Section 5, we therefore stick with ROUGE, which offers the additional advantage of conceptual simplicity and lower computational cost compared to metrics based on contextual embeddings and pretrained language models.","sent1: As noted in Section 2, the subjectivity of meeting summaries, stemming in part from the preference for abstractive summarization, complicates the evaluation task.
sent2: Evaluation requires both verifying that the content in a system-based summary follows from the original transcript and measuring the overlap with a gold-standard summary.
sent3: However, given the expressive freedom encouraged by abstractive approaches, checking for semantic entailment and overlap of summary-worthy content requires deep semantic understanding, not just recognition that the same words are used.
sent4: Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.
sent5: If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).
sent6: A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.
sent7: Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.
sent8: Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.
sent9: Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.
sent10: Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.
sent11: Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.
sent12: Clearly, evaluation is itself a very challenging task.
sent13: And we note that none of these metrics even touches on another central challenge for summary evaluation, namely that of factual consistency.
sent14: When we summarize a meeting or detail decisions and actions items in our own words, it is important to get the facts straight.
sent15: Otherwise, the resulting summaries are not reliable for an end user.
sent16: While we do not know of current work that focuses on evaluation of factuality explicitly for the meeting domain, the study of factual consistency in summarization more generally is a budding research area that we discuss in Section 6.
sent17: In the absence of a clear winner for summary evaluation metrics, none of the alternatives has yet to be widely adopted.
sent18: In our comparison of different summarization systems in Section 5, we therefore stick with ROUGE, which offers the additional advantage of conceptual simplicity and lower computational cost compared to metrics based on contextual embeddings and pretrained language models.","Question: What are the limitations of using the ROUGE metric for evaluating abstractive meeting summaries, and what alternative methods have been proposed?

Supporting sentence: sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11","What are the limitations of using the ROUGE metric for evaluating abstractive meeting summaries, and what alternative methods have been proposed?","sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11",4,"However, given the expressive freedom encouraged by abstractive approaches, checking for semantic entailment and overlap of summary-worthy content requires deep semantic understanding, not just recognition that the same words are used.

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.

Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.",implement,"Given the expressive freedom encouraged by abstractive approaches, evaluating abstractive meeting summaries requires deep semantic understanding, not just recognition that the same words are used.

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores system-produced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

For instance, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that outputs ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022; Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, indicating a lack of consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.

Bhandari et al. (2020b) argue that there is no one-size-fits-all metric that correlates better with human judgment than the others, and that can outperform others on all datasets.","Question:

What are the limitations of using the ROUGE metric for evaluating abstractive meeting summaries, and what alternative methods have been proposed?

Answer:

Given the expressive freedom encouraged by abstractive approaches, evaluating abstractive meeting summaries requires deep semantic understanding, not just recognition that the same words are used.

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores system-produced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

For instance, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that outputs ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022; Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, indicating a lack of consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.

Bhandari et al. (2020b) argue that there is no one-size-fits-all metric that correlates better with human judgment than the others, and that can outperform others on all datasets."
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,BERT embeddings,4,"Unlike the conventional static embeddings (Mikolov et al., 2013a;Pennington et al., 2014), BERT's representations are contextualized, i.e., every input token is represented by a vector dependent on the particular context of occurrence.

In the current studies of BERT's representation space, the term 'embedding' refers to the output vector of a given (typically final) Transformer layer. Wiedemann et al. (2019) find that BERT's contextualized embeddings form distinct and clear clusters corresponding to word senses, which confirms that the basic distributional hypothesis holds for these representations. However, Mickus et al. (2019) note that representations of the same word varies depending on position of the sentence in which it occurs, likely due to NSP objective. Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations. They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers. That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","sent1: Unlike the conventional static embeddings (Mikolov et al., 2013a;Pennington et al., 2014), BERT's representations are contextualized, i.e., every input token is represented by a vector dependent on the particular context of occurrence.
sent2: In the current studies of BERT's representation space, the term 'embedding' refers to the output vector of a given (typically final) Transformer layer.
sent3: Wiedemann et al. (2019) find that BERT's contextualized embeddings form distinct and clear clusters corresponding to word senses, which confirms that the basic distributional hypothesis holds for these representations.
sent4: However, Mickus et al. (2019) note that representations of the same word varies depending on position of the sentence in which it occurs, likely due to NSP objective.
sent5: Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations.
sent6: They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.
sent7: That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","Question: What are the key characteristics and findings related to BERT's contextualized embeddings?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",What are the key characteristics and findings related to BERT's contextualized embeddings?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",8,"Unlike the conventional static embeddings (Mikolov et al., 2013a;Pennington et al., 2014), BERT's representations are contextualized, i.e., every input token is represented by a vector dependent on the particular context of occurrence.

In the current studies of BERT's representation space, the term 'embedding' refers to the output vector of a given (typically final) Transformer layer.

Wiedemann et al. (2019) find that BERT's contextualized embeddings form distinct and clear clusters corresponding to word senses, which confirms that the basic distributional hypothesis holds for these representations.

However, Mickus et al. (2019) note that representations of the same word varies depending on position of the sentence in which it occurs, likely due to NSP objective.

Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations.

They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.

That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).",invalid,,"Question:

What are the key characteristics and findings related to BERT's contextualized embeddings?

Answer:

nan"
256231532,Social Influence Dialogue Systems: A Survey of Datasets and Models For Social Influence Tasks,https://www.semanticscholar.org/paper/a1275e92f4830e5bbd53bc1b1fa44a9a2f024f88,Methodological Progress,10,"Having summarized the datasets that capture social influence, we now discuss the modeling approaches developed for social influence dialogue systems. Most domains have seen efforts in analyzing human dialogue behaviors and their impact on task outcomes. Examples include analyzing deception in games (Peskov et al., 2020), the impact of persuasive strategies and dialogue acts on charity donations ( In addition, researchers have targeted various domain-specific subtasks that can be crucial for the eventual development of dialogue systems in this space. This involves research in lie detection methods (Yeh and Ku, 2021;Yu et al., 2015), discourse parsing (Shi and Huang, 2019;Ouyang et al., 2021), strategy prediction (Chawla et al., 2021b;, breakdown detection (Yamaguchi et al., 2021), outcome prediction (Sinha and Dasgupta, 2021;Chawla et al., 2020;Dutt et al., 2020), and argument mining (Dutta et al., 2022).

Research that directly targets the development of dialogue systems in this space is still nascent. Among other challenges like limited cross-cultural diversity and relatively smaller dataset size, social influence dialogue settings pose a unique challenge: an average human often exhibits sub-optimal strategic behaviors in social influence tasks (Wunderle, 2007;Babcock and Laschever, 2009). This means that standard seq2seq approaches trained on these collected datasets using supervised learning are fundamentally insufficient for developing effective dialogue systems with influence capabilities. Hence, prior work has put a special attention to the system strategy, employing different ways to model the strategy and language together.

We design a taxonomy of methods developed for social influence tasks, assisting readers to comprehend the progress and reflect on future directions. We organize them based on the system strategy, language generation, partner model, architecture, learning process, and the use of pretrained language models. We present annotations for all the surveyed methods in Table 2 and discuss the common categories in brief below.","sent1: Having summarized the datasets that capture social influence, we now discuss the modeling approaches developed for social influence dialogue systems.
sent2: Most domains have seen efforts in analyzing human dialogue behaviors and their impact on task outcomes.
sent3: Examples include analyzing deception in games (Peskov et al., 2020), the impact of persuasive strategies and dialogue acts on charity donations ( In addition, researchers have targeted various domain-specific subtasks that can be crucial for the eventual development of dialogue systems in this space. This involves research in lie detection methods (Yeh and Ku, 2021;Yu et al., 2015), discourse parsing (Shi and Huang, 2019;Ouyang et al., 2021), strategy prediction (Chawla et al., 2021b;, breakdown detection (Yamaguchi et al., 2021), outcome prediction (Sinha and Dasgupta, 2021;Chawla et al., 2020;Dutt et al., 2020), and argument mining (Dutta et al., 2022).
sent4: Research that directly targets the development of dialogue systems in this space is still nascent.
sent5: Among other challenges like limited cross-cultural diversity and relatively smaller dataset size, social influence dialogue settings pose a unique challenge: an average human often exhibits sub-optimal strategic behaviors in social influence tasks (Wunderle, 2007;Babcock and Laschever, 2009).
sent6: This means that standard seq2seq approaches trained on these collected datasets using supervised learning are fundamentally insufficient for developing effective dialogue systems with influence capabilities.
sent7: Hence, prior work has put a special attention to the system strategy, employing different ways to model the strategy and language together.
sent8: We design a taxonomy of methods developed for social influence tasks, assisting readers to comprehend the progress and reflect on future directions.
sent9: We organize them based on the system strategy, language generation, partner model, architecture, learning process, and the use of pretrained language models.
sent10: We present annotations for all the surveyed methods in Table 2 and discuss the common categories in brief below.","Question: What are the main challenges and strategies in developing dialogue systems for social influence tasks?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9",What are the main challenges and strategies in developing dialogue systems for social influence tasks?,"sent4, sent5, sent6, sent7, sent8, sent9",7,"Research that directly targets the development of dialogue systems in this space is still nascent.

Among other challenges like limited cross-cultural diversity and relatively smaller dataset size, social influence dialogue settings pose a unique challenge: an average human often exhibits sub-optimal strategic behaviors in social influence tasks (Wunderle, 2007;Babcock and Laschever, 2009).

This means that standard seq2seq approaches trained on these collected datasets using supervised learning are fundamentally insufficient for developing effective dialogue systems with influence capabilities.

Hence, prior work has put a special attention to the system strategy, employing different ways to model the strategy and language together.

We design a taxonomy of methods developed for social influence tasks, assisting readers to comprehend the progress and reflect on future directions.

We organize them based on the system strategy, language generation, partner model, architecture, learning process, and the use of pretrained language models.",invalid,,"Question:

What are the main challenges and strategies in developing dialogue systems for social influence tasks?

Answer:

nan"
219177284,Conversational Machine Comprehension: a Literature Review,https://www.semanticscholar.org/paper/daadce35dc3694ae02dae07da7a3285daf3eab32,Generic Framework of a CMC Model,4,"(2) reasoning in the neural space to identify the answer vector and (3) decoding the answer vector into a natural language output. Huang et al. (2018a) adapted these steps in CMC by adding conversational history modeling. Qu et al. (2019c) proposed a ConvQA model with separate modules for history selection and modeling. Based on these prior works, we synthesize a generic framework for a CMC model. A typical CMC model is provided with context C, current question Q i and the conversation history

, and needs to generate an output set O i . The CMC framework is provided in Fig. 1. There are four major components of the framework, based on their contribution to the overall CMC flow.

1. History Selection module: With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well. A history selection module, therefore, chooses a subset H i of the history turns H i based on a policy (dynamic or static) that is expected to be more helpful than the others. If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.","sent1: (2) reasoning in the neural space to identify the answer vector and (3) decoding the answer vector into a natural language output.
sent2: Huang et al. (2018a) adapted these steps in CMC by adding conversational history modeling.
sent3: Qu et al. (2019c) proposed a ConvQA model with separate modules for history selection and modeling.
sent4: Based on these prior works, we synthesize a generic framework for a CMC model.
sent5: A typical CMC model is provided with context C, current question Q i and the conversation history, and needs to generate an output set
sent6: O i . The CMC framework is provided in Fig. 1.
sent7: There are four major components of the framework, based on their contribution to the overall CMC flow.
sent8: 1. History Selection module: With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well.
sent9: A history selection module, therefore, chooses a subset H i of the history turns H
sent10: i based on a policy (dynamic or static)
sent11: that is expected to be more helpful than the others.
sent12: If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.","Question: What are the key components of a generic Conversational Machine Comprehension (CMC) model framework?

Supporting sentence: sent4, sent5, sent7, sent8, sent9, sent10, sent11, sent12",What are the key components of a generic Conversational Machine Comprehension (CMC) model framework?,"sent4, sent5, sent7, sent8, sent9, sent10, sent11, sent12",4,"Based on these prior works, we synthesize a generic framework for a CMC model.

A typical CMC model is provided with context C, current question Q i and the conversation history, and needs to generate an output set

There are four major components of the framework, based on their contribution to the overall CMC flow.

1. History Selection module: With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well.

A history selection module, therefore, chooses a subset H i of the history turns H

i based on a policy (dynamic or static)

that is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.",implement,"Based on prior works, a generic framework for a Conversational Machine Comprehension (CMC) model can be synthesized.

A typical CMC model is provided with context C, the current question Qi, and the conversation history, and needs to generate an output set.

There are four major components of the framework, based on their contribution to the overall CMC flow.

One key component is the History Selection module. With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well.

A history selection module, therefore, chooses a subset Hi of the history turns H.

based on a policy, which can be either dynamic or static.

that is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy (e.g., Qu et al., 2019b), then feedback from the other modules can guide its update.","Question:

What are the key components of a generic Conversational Machine Comprehension (CMC) model framework?

Answer:

Based on prior works, a generic framework for a Conversational Machine Comprehension (CMC) model can be synthesized.

A typical CMC model is provided with context C, the current question Qi, and the conversation history, and needs to generate an output set.

There are four major components of the framework, based on their contribution to the overall CMC flow.

One key component is the History Selection module.

With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well.

A history selection module, therefore, chooses a subset Hi of the history turns H.based on a policy, which can be either dynamic or static.

that is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy (e.g., Qu et al., 2019b), then feedback from the other modules can guide its update."
219177284,Conversational Machine Comprehension: a Literature Review,https://www.semanticscholar.org/paper/daadce35dc3694ae02dae07da7a3285daf3eab32,Encoder:,5,"The lexical tokens of the context passage C, selected conversational turns H i , and the current question Q i need to be transformed into input embeddings for the reasoning module. Encoder facilitates this transition. The encoder steps may vary with every approach and reasoning inputs, at a high level, encoding involves transformation and combination of context-independent word embeddings called lexical embeddings such as GloVE (Pennington et al., 2014), intra-sequence contextual  Figure 1: Generic framework of a CMC model. A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history H i relevant to the current question Q i ;

(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings. embeddings e.g. ELMo (Peters et al., 2018), BERT (Devlin et al., 2019) or RNN, question-aware embeddings, and additional feature embeddings like POS tags , history embedding (Qu et al., 2019c) or conversation count. Conversational history H i is generally integrated with this module into any or all of the contextual input embeddings. This process is called History modeling and is the most significant aspect of a CMC encoder.

3. Contextual Integration layer: Contextual information accumulated in the passage, query, and/or history embeddings individually must be fused to generate query-aware and/or history-aware contextualized output embeddings. This process may involve a single layer (single-step reasoning) or repetition across multiple layers (multi-step reasoning). Input for this module generally consists of two (or more) sequence sets for every history turn, or aggregated across all turns, which are then fused in each layer and often inter-weaved (Huang et al., 2018b) with attention.","sent1: The lexical tokens of the context passage C, selected conversational turns H i , and the current question Q i need to be transformed into input embeddings for the reasoning module.
sent2: Encoder facilitates this transition.
sent3: The encoder steps may vary with every approach and reasoning inputs, at a high level, encoding involves transformation and combination of context-independent word embeddings called lexical embeddings such as GloVE (Pennington et al., 2014), intra-sequence contextual  Figure 1: Generic framework of a CMC model.
sent4: A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history
sent5: H i relevant to the current question Q i ;(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings.
sent6: embeddings e.g. ELMo (Peters et al., 2018), BERT (Devlin et al., 2019) or RNN, question-aware embeddings, and additional feature embeddings like POS tags , history embedding (Qu et al., 2019c) or conversation count.
sent7: Conversational history H i is generally integrated with this module into any or all of the contextual input embeddings.
sent8: This process is called History modeling and is the most significant aspect of a CMC encoder.
sent9: 3. Contextual Integration layer: Contextual information accumulated in the passage, query, and/or history embeddings individually must be fused to generate query-aware and/or history-aware contextualized output embeddings.
sent10: This process may involve a single layer (single-step reasoning) or repetition across multiple layers (multi-step reasoning).
sent11: Input for this module generally consists of two (or more) sequence sets for every history turn, or aggregated across all turns, which are then fused in each layer and often inter-weaved (Huang et al., 2018b) with attention.","Question: What are the key steps involved in the encoding process for conversational machine comprehension models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",What are the key steps involved in the encoding process for conversational machine comprehension models?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",2,"The lexical tokens of the context passage C, selected conversational turns H i , and the current question Q i need to be transformed into input embeddings for the reasoning module.

Encoder facilitates this transition.

The encoder steps may vary with every approach and reasoning inputs, at a high level, encoding involves transformation and combination of context-independent word embeddings called lexical embeddings such as GloVE (Pennington et al., 2014), intra-sequence contextual  Figure 1: Generic framework of a CMC model.

A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history

H i relevant to the current question Q i ;(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings.

embeddings e.g. ELMo (Peters et al., 2018), BERT (Devlin et al., 2019) or RNN, question-aware embeddings, and additional feature embeddings like POS tags , history embedding (Qu et al., 2019c) or conversation count.

Conversational history H i is generally integrated with this module into any or all of the contextual input embeddings.

This process is called History modeling and is the most significant aspect of a CMC encoder.",implement,"The lexical tokens of the context passage C, selected conversational turns H_i, and the current question Q_i need to be transformed into input embeddings for the reasoning module.

The encoder facilitates this transition.

The encoder steps may vary with each approach and reasoning inputs, but at a high level, encoding involves the transformation and combination of context-independent word embeddings, such as GloVE (Pennington et al., 2014).

A typical CMC model would consist of a history selection module that selects a subset H_i of the conversational history.

The encoder then encodes the lexical tokens of context C, Q_i, and H_i into input embeddings for the contextual integration layer.

The encoder utilizes embeddings such as ELMo (Peters et al., 2018), BERT (Devlin et al., 2019), or RNN, along with question-aware embeddings and additional feature embeddings like POS tags, history embedding (Qu et al., 2019c), or conversation count.

Conversational history H_i is generally integrated with this module into any or all of the contextual input embeddings.

This process is called history modeling and is the most significant aspect of a CMC encoder.","Question:

What are the key steps involved in the encoding process for conversational machine comprehension models?

Answer:

The lexical tokens of the context passage C, selected conversational turns H_i, and the current question Q_i need to be transformed into input embeddings for the reasoning module.

The encoder facilitates this transition.

The encoder steps may vary with each approach and reasoning inputs, but at a high level, encoding involves the transformation and combination of context-independent word embeddings, such as GloVE (Pennington et al., 2014).

A typical CMC model would consist of a history selection module that selects a subset H_i of the conversational history.

The encoder then encodes the lexical tokens of context C, Q_i, and H_i into input embeddings for the contextual integration layer.

The encoder utilizes embeddings such as ELMo (Peters et al., 2018), BERT (Devlin et al., 2019), or RNN, along with question-aware embeddings and additional feature embeddings like POS tags, history embedding (Qu et al., 2019c), or conversation count.

Conversational history H_i is generally integrated with this module into any or all of the contextual input embeddings.

This process is called history modeling and is the most significant aspect of a CMC encoder."
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Standalone GNNs,8,"We will start our discussion of standalone GNN models with HeterSumGraph (HSG), a model proposed by . We will do so due to the fact that this model illustrates concepts and ideas seen throughout GNNs models used for ATS. An illustration of the general concepts presented here can be seen in Figure 3.

The HSG model encodes each text into a graph with three node types, sentence nodes, word nodes and document nodes. The connection between these nodes is decided by inclusion i.e. if the word represented by a word node occurs in a sentence then their respective nodes are connected by an edge. The same principle applies to document nodes which are connected depending on whether a word, represented by a word node, occurs within the document. This is a flexible structure, as it can be used in a single-document but also multidocument setting.  Figure 3: General architecture of standalone GNNs with word nodes and sentence nodes, encoders for both node types and a sentence selection mechanism. Inspired by HSG.

The feature vectors for all nodes are obtained by encoders and the edge weights are obtained by computing the TF-IDF score for each word. The neural network consists of a modified GAT layer. The GAT is modified to consider the TF-IDF value of the connecting edge. Additionally a positionwise feed-forward (FFN) layer consisting of two linear transformations is applied to the hidden state after the convolution. In total three convolution layers are used, word-sentence, sentence-word and word-document. The model is then trained on a node-based binary classification task that is predicting whether a sentence node is to be included for the summary or not.

The classification itself is done by a single linear layer. The model then does not directly use the predicted nodes to produce the summary. Instead trigram blocking (Paulus et al., 2018) is used during sentence selection in order to ensure sparsity of the generated summary.

The results for this model are quite impressive as it outperforms non-BERT based models on both single-document and multi-document summarization for the CNN/DailyMail dataset. One should especially note the flexibility and ability to use this model for two tasks.

An older model by Muratore et al. (2010) can be considered a precursor to this architecture. A simple extension to the HSG model is proposed by Ya et al. (2021). In their extension they modify the model for query constraints for the summary. This is achieved by adding a query node to the graph structure. Additionally, they introduce a mu-tual information maximization mechanism during training.

A model which further follows this structure is the one by Linmei et al. (2019). The authors there extend the attention mechanism by adding another layer of attention, allowing it to include information about the type of the node during convolution. The GNN model by Jing et al. (2021) encodes even more information into the graph by considering the relation between sentences on a number of different levels. In particular, they encode the semantic and syntactical relationship between sentences within the graph.

This idea of encoding additional information into the graph is also followed by Antognini and Faltings (2019). They introduce an additional universal feature vector which is added to each sentence node embedding. This universal feature vector is learned from a large unrelated and general corpus. This model is also unique in that it focuses on the summarization of very small texts, on average less than 100 words.

Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a). The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities. The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens. The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence. Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram. Additionally, sequentially occurring words and entities are connected with a directed edge. This setup shows how one can encode a substantial amount of implicit information in an explicit manner.

HAHSum uses a GAT for each of the five node type combinations found within the graph. Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum show that GNNs can perform very well. The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset. The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS . The results of an Amazon Mechanical Turk experiment corroborate these results and show that for human readers HAHSum produce summaries with superior fluency and conciseness. Another recent GNN model which has achieved great performance in the task of multi-document summarization is the SgSum model by . Different to the approaches outlined above, the SgSum model uses graph pooling to extract sub-graphs from encoded documents. That is, it first transforms the documents into a large graph, then generates a number of sub-graphs via pooling and convolution. These sub-graphs are then ranked and thereby selected for a summary. This is quite an innovative approach as it casts the problem of multi-document summarization as a simple subgraph selection problem. Additionally, it outputs an integral summary, that is the entire summary is output by the model in the form of the sub-graph of sentences.","sent1: We will start our discussion of standalone GNN models with HeterSumGraph (HSG), a model proposed by .
sent2: We will do so due to the fact that this model illustrates concepts and ideas seen throughout GNNs models used for ATS.
sent3: An illustration of the general concepts presented here can be seen in Figure 3.
sent4: The HSG model encodes each text into a graph with three node types, sentence nodes, word nodes and document nodes.
sent5: The connection between these nodes is decided by inclusion i.e. if the word represented by a word node occurs in a sentence then their respective nodes are connected by an edge.
sent6: The same principle applies to document nodes which are connected depending on whether a word, represented by a word node, occurs within the document.
sent7: This is a flexible structure, as it can be used in a single-document but also multidocument setting.
sent8: Figure 3: General architecture of standalone GNNs with word nodes and sentence nodes, encoders for both node types and a sentence selection mechanism.
sent9: Inspired by HSG. The feature vectors for all nodes are obtained by encoders and the edge weights are obtained by computing the TF-IDF score for each word.
sent10: The neural network consists of a modified GAT layer.
sent11: The GAT is modified to consider the TF-IDF value of the connecting edge.
sent12: Additionally a positionwise feed-forward (FFN) layer consisting of two linear transformations is applied to the hidden state after the convolution.
sent13: In total three convolution layers are used, word-sentence, sentence-word and word-document.
sent14: The model is then trained on a node-based binary classification task that is predicting whether a sentence node is to be included for the summary or not.
sent15: The classification itself is done by a single linear layer.
sent16: The model then does not directly use the predicted nodes to produce the summary.
sent17: Instead trigram blocking (Paulus et al., 2018) is used during sentence selection in order to ensure sparsity of the generated summary.
sent18: The results for this model are quite impressive as it outperforms non-BERT based models on both single-document and multi-document summarization for the CNN/DailyMail dataset.
sent19: One should especially note the flexibility and ability to use this model for two tasks.
sent20: An older model by Muratore et al. (2010) can be considered a precursor to this architecture.
sent21: A simple extension to the HSG model is proposed by Ya et al. (2021).
sent22: In their extension they modify the model for query constraints for the summary.
sent23: This is achieved by adding a query node to the graph structure.
sent24: Additionally, they introduce a mu-tual information maximization mechanism during training.
sent25: A model which further follows this structure is the one by Linmei et al. (2019).
sent26: The authors there extend the attention mechanism by adding another layer of attention, allowing it to include information about the type of the node during convolution.
sent27: The GNN model by Jing et al. (2021) encodes even more information into the graph by considering the relation between sentences on a number of different levels.
sent28: In particular, they encode the semantic and syntactical relationship between sentences within the graph.
sent29: This idea of encoding additional information into the graph is also followed by Antognini and Faltings (2019).
sent30: They introduce an additional universal feature vector which is added to each sentence node embedding.
sent31: This universal feature vector is learned from a large unrelated and general corpus.
sent32: This model is also unique in that it focuses on the summarization of very small texts, on average less than 100 words.
sent33: Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a).
sent34: The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities.
sent35: The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens.
sent36: The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence.
sent37: Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram.
sent38: Additionally, sequentially occurring words and entities are connected with a directed edge.
sent39: This setup shows how one can encode a substantial amount of implicit information in an explicit manner.
sent40: HAHSum uses a GAT for each of the five node type combinations found within the graph.
sent41: Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.
sent42: The results for HAHSum show that GNNs can perform very well.
sent43: The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset.
sent44: The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS .
sent45: The results of an Amazon Mechanical Turk experiment corroborate these results and show that for human readers HAHSum produce summaries with superior fluency and conciseness.
sent46: Another recent GNN model which has achieved great performance in the task of multi-document summarization is the SgSum model by .
sent47: Different to the approaches outlined above, the SgSum model uses graph pooling to extract sub-graphs from encoded documents.
sent48: That is, it first transforms the documents into a large graph, then generates a number of sub-graphs via pooling and convolution.
sent49: These sub-graphs are then ranked and thereby selected for a summary.
sent50: This is quite an innovative approach as it casts the problem of multi-document summarization as a simple subgraph selection problem.
sent51: Additionally, it outputs an integral summary, that is the entire summary is output by the model in the form of the sub-graph of sentences.","Question: How do different standalone GNN models approach the task of automatic text summarization?

Supporting sentence: sent1, sent4, sent5, sent6, sent7, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44, sent45, sent46, sent47, sent48, sent49, sent50",How do different standalone GNN models approach the task of automatic text summarization?,"sent1, sent4, sent5, sent6, sent7, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44, sent45, sent46, sent47, sent48, sent49, sent50",6,"We will start our discussion of standalone GNN models with HeterSumGraph (HSG), a model proposed by .

The HSG model encodes each text into a graph with three node types, sentence nodes, word nodes and document nodes.

The connection between these nodes is decided by inclusion i.e. if the word represented by a word node occurs in a sentence then their respective nodes are connected by an edge.

The same principle applies to document nodes which are connected depending on whether a word, represented by a word node, occurs within the document.

This is a flexible structure, as it can be used in a single-document but also multidocument setting.

Inspired by HSG. The feature vectors for all nodes are obtained by encoders and the edge weights are obtained by computing the TF-IDF score for each word.

The neural network consists of a modified GAT layer.

The GAT is modified to consider the TF-IDF value of the connecting edge.

Additionally a positionwise feed-forward (FFN) layer consisting of two linear transformations is applied to the hidden state after the convolution.

In total three convolution layers are used, word-sentence, sentence-word and word-document.

The model is then trained on a node-based binary classification task that is predicting whether a sentence node is to be included for the summary or not.

The classification itself is done by a single linear layer.

The model then does not directly use the predicted nodes to produce the summary.

Instead trigram blocking (Paulus et al., 2018) is used during sentence selection in order to ensure sparsity of the generated summary.

The results for this model are quite impressive as it outperforms non-BERT based models on both single-document and multi-document summarization for the CNN/DailyMail dataset.

One should especially note the flexibility and ability to use this model for two tasks.

A simple extension to the HSG model is proposed by Ya et al. (2021).

In their extension they modify the model for query constraints for the summary.

This is achieved by adding a query node to the graph structure.

Additionally, they introduce a mu-tual information maximization mechanism during training.

A model which further follows this structure is the one by Linmei et al. (2019).

The authors there extend the attention mechanism by adding another layer of attention, allowing it to include information about the type of the node during convolution.

The GNN model by Jing et al. (2021) encodes even more information into the graph by considering the relation between sentences on a number of different levels.

In particular, they encode the semantic and syntactical relationship between sentences within the graph.

This idea of encoding additional information into the graph is also followed by Antognini and Faltings (2019).

They introduce an additional universal feature vector which is added to each sentence node embedding.

This universal feature vector is learned from a large unrelated and general corpus.

This model is also unique in that it focuses on the summarization of very small texts, on average less than 100 words.

Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a).

The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities.

The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens.

The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence.

Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram.

Additionally, sequentially occurring words and entities are connected with a directed edge.

This setup shows how one can encode a substantial amount of implicit information in an explicit manner.

HAHSum uses a GAT for each of the five node type combinations found within the graph.

Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum show that GNNs can perform very well.

The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset.

The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS .

The results of an Amazon Mechanical Turk experiment corroborate these results and show that for human readers HAHSum produce summaries with superior fluency and conciseness.

Another recent GNN model which has achieved great performance in the task of multi-document summarization is the SgSum model by .

Different to the approaches outlined above, the SgSum model uses graph pooling to extract sub-graphs from encoded documents.

That is, it first transforms the documents into a large graph, then generates a number of sub-graphs via pooling and convolution.

These sub-graphs are then ranked and thereby selected for a summary.

This is quite an innovative approach as it casts the problem of multi-document summarization as a simple subgraph selection problem.",invalid,,"Question:

How do different standalone GNN models approach the task of automatic text summarization?

Answer:

nan"
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Data-driven Approaches,12,"Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021). Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models. Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.

Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns. To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns. Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks. This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.","sent1: Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021).
sent2: Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models.
sent3: Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.
sent4: Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns.
sent5: To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns.
sent6: Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks.
sent7: This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.","Question: What are the various data-driven approaches to improve robustness in NLP models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",What are the various data-driven approaches to improve robustness in NLP models?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",7,"Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021).

Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models.

Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.

Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns.

To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns.

Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks.

This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.",invalid,,"Question:

What are the various data-driven approaches to improve robustness in NLP models?

Answer:

nan"
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Long input processing,9,"A straightforward solution to the length problem is to segment a long document into smaller segments to be processed. Koay et al. (2021) separate ICSI meetings with a sliding window, and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary. Zhang et al. (2022) propose SUMM N , a multi-stage split-thensummarize framework. Within each stage, it first splits the source input into sufficiently short segments. Coarse summaries are then generated for each segment and then concatenated as the input to the next stage. This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.

While such segmenting approaches address the length problem, they can lose important crosspartition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem. Long-sequence transformers. Multiple variants of adapting transformer-based approaches to address the lengthy input problem exist in the literature (Dai et al., 2019;Beltagy et al., 2020;Martins et al., 2022). Longformer (Beltagy et al., 2020), for example, introduces a multi-layer selfattention operation that scales linearly with sequence length, enabling it to process long meet-ing transcriptions. Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems. Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription. The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure. First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors. That sequence is then processed by the turn-level encoder. The transformer decoder makes use of both levels of representation via cross-attention layers. Rohde et al. (2021) propose Hierachical Attention Transformer (HAT). Utterances are first prepended with a special BOS token. Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations. Finally, the decoder leverages the outputs at both levels to produce a final summary. Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.","sent1: A straightforward solution to the length problem is to segment a long document into smaller segments to be processed.
sent2: Koay et al. (2021) separate ICSI meetings with a sliding window, and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary.
sent3: Zhang et al. (2022) propose SUMM N , a multi-stage split-thensummarize framework.
sent4: Within each stage, it first splits the source input into sufficiently short segments.
sent5: Coarse summaries are then generated for each segment and then concatenated as the input to the next stage.
sent6: This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.
sent7: While such segmenting approaches address the length problem, they can lose important crosspartition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem.
sent8: Long-sequence transformers. Multiple variants of adapting transformer-based approaches to address the lengthy input problem exist in the literature (Dai et al., 2019;Beltagy et al., 2020;Martins et al., 2022).
sent9: Longformer (Beltagy et al., 2020), for example, introduces a multi-layer selfattention operation that scales linearly with sequence length, enabling it to process long meet-ing transcriptions.
sent10: Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems.
sent11: Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription.
sent12: The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.
sent13: First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.
sent14: That sequence is then processed by the turn-level encoder.
sent15: The transformer decoder makes use of both levels of representation via cross-attention layers.
sent16: Rohde et al. (2021) propose Hierachical Attention Transformer (HAT).
sent17: Utterances are first prepended with a special BOS token.
sent18: Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.
sent19: Finally, the decoder leverages the outputs at both levels to produce a final summary.
sent20: Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.","Question: What are the different approaches to handling long input sequences in abstractive meeting summarization?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",What are the different approaches to handling long input sequences in abstractive meeting summarization?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",4,"A straightforward solution to the length problem is to segment a long document into smaller segments to be processed.

Koay et al. (2021) separate ICSI meetings with a sliding window, and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary.

Zhang et al. (2022) propose SUMM N , a multi-stage split-thensummarize framework.

Within each stage, it first splits the source input into sufficiently short segments.

Coarse summaries are then generated for each segment and then concatenated as the input to the next stage.

This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.

While such segmenting approaches address the length problem, they can lose important crosspartition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem.

Long-sequence transformers. Multiple variants of adapting transformer-based approaches to address the lengthy input problem exist in the literature (Dai et al., 2019;Beltagy et al., 2020;Martins et al., 2022).

Longformer (Beltagy et al., 2020), for example, introduces a multi-layer selfattention operation that scales linearly with sequence length, enabling it to process long meet-ing transcriptions.

Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems.

Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription.

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.

That sequence is then processed by the turn-level encoder.

The transformer decoder makes use of both levels of representation via cross-attention layers.

Rohde et al. (2021) propose Hierachical Attention Transformer (HAT).

Utterances are first prepended with a special BOS token.

Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder leverages the outputs at both levels to produce a final summary.

Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.",implement,"A straightforward solution to the length problem in abstractive meeting summarization is to segment a long document into smaller segments to be processed.

Koay et al. (2021) separate ICSI meetings with a sliding window and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary.

Zhang et al. (2022) propose SUMM N, a multi-stage split-then-summarize framework.

Within each stage, SUMM N first splits the source input into sufficiently short segments.

Coarse summaries are then generated for each segment and concatenated as the input to the next stage.

This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.

While such segmenting approaches address the length problem, they can lose important cross-partition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem.

Long-sequence transformers have been proposed as another approach, with multiple variants adapting transformer-based methods to address the lengthy input problem (Dai et al., 2019; Beltagy et al., 2020; Martins et al., 2022).

Longformer (Beltagy et al., 2020), for example, introduces a multi-layer self-attention operation that scales linearly with sequence length, enabling it to process long meeting transcriptions.

Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems.

Hierarchical transformers are another approach, where systems leverage transformers in a hierarchical manner by breaking down a long meeting transcript into multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016).

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.

That sequence is then processed by the turn-level encoder.

The transformer decoder makes use of both levels of representation via cross-attention layers.

Rohde et al. (2021) propose the Hierarchical Attention Transformer (HAT).

Utterances are first prepended with a special BOS token.

Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder leverages the outputs at both levels to produce a final summary.

Similarly, the hierarchical encoder proposed by Zhao et al. (2019b) consists of three levels, sequentially encoding word, utterance, and topic segment embeddings.","Question:

What are the different approaches to handling long input sequences in abstractive meeting summarization?

Answer:

A straightforward solution to the length problem in abstractive meeting summarization is to segment a long document into smaller segments to be processed.

Koay et al. (2021) separate ICSI meetings with a sliding window and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary.

Zhang et al. (2022) propose SUMM N, a multi-stage split-then-summarize framework.

Within each stage, SUMM N first splits the source input into sufficiently short segments.

Coarse summaries are then generated for each segment and concatenated as the input to the next stage.

This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.

While such segmenting approaches address the length problem, they can lose important cross-partition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem.

Long-sequence transformers have been proposed as another approach, with multiple variants adapting transformer-based methods to address the lengthy input problem (Dai et al., 2019; Beltagy et al., 2020; Martins et al., 2022).Longformer (Beltagy et al., 2020), for example, introduces a multi-layer self-attention operation that scales linearly with sequence length, enabling it to process long meeting transcriptions.

Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems.

Hierarchical transformers are another approach, where systems leverage transformers in a hierarchical manner by breaking down a long meeting transcript into multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016).

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.

That sequence is then processed by the turn-level encoder.

The transformer decoder makes use of both levels of representation via cross-attention layers.

Rohde et al. (2021) propose the Hierarchical Attention Transformer (HAT).

Utterances are first prepended with a special BOS token.

Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder leverages the outputs at both levels to produce a final summary.

Similarly, the hierarchical encoder proposed by Zhao et al. (2019b) consists of three levels, sequentially encoding word, utterance, and topic segment embeddings."
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Self Contrastive Learning,10,"Self contrastive learning relies on heuristics to construct pseudo question-document pairs (q ′ , d ′+/− ) from D, then uses them to supervise training of a NR model. The objective is:

where L is the ranking loss as in Eq 1. Since negative pairs can be easily constructed by random sampling, the main difficulty is to design good heuristics for constructing positive pseudo pairs (q ′ , d ′+ ). There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based. An overview is in Table 2.

Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair. The intuition is that perturbed text should still be relevant to the original text. Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other. The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document. They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness. Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.

Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021). For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus. A term from it is treated as the answer and replaced with a special token. Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents. Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant . For example, Chang et al.

(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic. A passage from another page containing hyperlinks to p is treated as a positive document. Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question. A passage from its hyperlinked document that contains the same entity word is treated as a positive sample. Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.  ","sent1: Self contrastive learning relies on heuristics to construct pseudo question-document pairs (q ′ , d ′+/− ) from D, then uses them to supervise training of a NR model.
sent2: The objective is:where L is the ranking loss as in Eq 1.
sent3: Since negative pairs can be easily constructed by random sampling, the main difficulty is to design good heuristics for constructing positive pseudo pairs (q ′ , d ′+ ).
sent4: There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based.
sent5: An overview is in Table 2.Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.
sent6: The intuition is that perturbed text should still be relevant to the original text.
sent7: Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).
sent8: Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.
sent9: The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.
sent10: They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness.
sent11: Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).
sent12: For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.
sent13: A term from it is treated as the answer and replaced with a special token.
sent14: Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents.
sent15: Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.
sent16: Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant .
sent17: For example, Chang et al.(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic.
sent18: A passage from another page containing hyperlinks to p is treated as a positive document.
sent19: Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.
sent20: A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.
sent21: Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.","Question: What are the main heuristics used in self contrastive learning to construct positive pseudo question-document pairs?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21",What are the main heuristics used in self contrastive learning to construct positive pseudo question-document pairs?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21",2,"There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based.

An overview is in Table 2.Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.

The intuition is that perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.

The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness.

Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.

A term from it is treated as the answer and replaced with a special token.

Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant .

For example, Chang et al.(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic.

A passage from another page containing hyperlinks to p is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.",implement,"There are five popular heuristics to construct positive pseudo question-document pairs: perturbation-based, summary-based, proximity-based, cooccurrence-based, and hyperlink-based.

Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.

The intuition is that perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution, and permutation (Zhu et al., 2021b; Meng et al., 2021; Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.

The most famous example of this is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping, or deletion (Izacard et al., 2021) to further improve the model robustness.

Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, and paragraphs from the same document as positive samples (Di Liello et al., 2022). Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.

A term from the sentence is treated as the answer and replaced with a special token.

Passages retrieved with BM25 that also contain the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text is more likely to be relevant.

For example, Chang et al. (2020) take a sentence from the first section of a page as a pseudo question because it is often the description or summary of the topic.

A passage from another page containing hyperlinks to the pseudo question is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) build positive samples with two typologies: ""dual-link,"" where two passages have hyperlinks pointing to each other, and ""co-mention,"" where two passages both have a hyperlink to the same third-party document.","Question:

What are the main heuristics used in self contrastive learning to construct positive pseudo question-document pairs?

Answer:

There are five popular heuristics to construct positive pseudo question-document pairs: perturbation-based, summary-based, proximity-based, cooccurrence-based, and hyperlink-based.

Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.

The intuition is that perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution, and permutation (Zhu et al., 2021b; Meng et al., 2021; Ma et al., 2021a).Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.

The most famous example of this is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping, or deletion (Izacard et al., 2021) to further improve the model robustness.

Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, and paragraphs from the same document as positive samples (Di Liello et al., 2022).

Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.

A term from the sentence is treated as the answer and replaced with a special token.

Passages retrieved with BM25 that also contain the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text is more likely to be relevant.

For example, Chang et al. (2020) take a sentence from the first section of a page as a pseudo question because it is often the description or summary of the topic.

A passage from another page containing hyperlinks to the pseudo question is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) build positive samples with two typologies: ""dual-link,"" where two passages have hyperlinks pointing to each other, and ""co-mention,"" where two passages both have a hyperlink to the same third-party document."
233476148,Explanation-Based Human Debugging of NLP Models: A Survey,https://www.semanticscholar.org/paper/d84ed05ab860b75f9e6b28e717abf4bc12da03d7,Bug Sources,11,"Most of the papers in Table 1 experimented on training datasets with natural artifacts (AR), which cause spurious correlation bugs (i.e., the input texts having signals which are correlated to but not the reasons for specific outputs) and undermine models' generalizability. Out of the 15 papers we surveyed, 5 used the 20Newsgroups dataset (Lang, 1995) as a case study, since it has lots of natural artifacts. For example, some punctuation marks appear more often in one class due to the writing styles of the authors contributing to the class, so the model uses these punctuation marks as clues to make predictions. However, because 20Newsgroups is a topic classification dataset, a better model should focus more on the topic of the content since the punctuation marks can also appear in other classes, especially when we apply the model to texts in the wild. Apart from classification performance drops, natural artifacts can also cause model biases, as shown in (De-Arteaga et al., 2019;Park et al., 2018) and debugged in (Lertvittayakumjorn et al., 2020;Yao et al., 2021).

In the absence of strong natural artifacts, bugs can still be simulated using several techniques. First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010). Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017). Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021). All of these techniques give rise to undesirable model behaviors, requiring debugging. Another technique, not found in Table 1 but suggested in related work (Idahl et al., 2021), is contaminating input texts in the training data with decoys (i.e., injected artifacts) which could deceive the model into predicting for the wrong reasons. This has been experimented with in the computer vision domain (Rieger et al., 2020), and its use in the EBHD setting in NLP could be an interesting direction to explore.","sent1: Most of the papers in Table 1 experimented on training datasets with natural artifacts (AR), which cause spurious correlation bugs (i.e., the input texts having signals which are correlated to but not the reasons for specific outputs) and undermine models' generalizability.
sent2: Out of the 15 papers we surveyed, 5 used the 20Newsgroups dataset (Lang, 1995) as a case study, since it has lots of natural artifacts.
sent3: For example, some punctuation marks appear more often in one class due to the writing styles of the authors contributing to the class, so the model uses these punctuation marks as clues to make predictions.
sent4: However, because 20Newsgroups is a topic classification dataset, a better model should focus more on the topic of the content since the punctuation marks can also appear in other classes, especially when we apply the model to texts in the wild.
sent5: Apart from classification performance drops, natural artifacts can also cause model biases, as shown in (De-Arteaga et al., 2019;Park et al., 2018) and debugged in (Lertvittayakumjorn et al., 2020;Yao et al., 2021).
sent6: In the absence of strong natural artifacts, bugs can still be simulated using several techniques.
sent7: First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010).
sent8: Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017).
sent9: Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021).
sent10: All of these techniques give rise to undesirable model behaviors, requiring debugging.
sent11: Another technique, not found in Table 1 but suggested in related work (Idahl et al., 2021), is contaminating input texts in the training data with decoys (i.e., injected artifacts) which could deceive the model into predicting for the wrong reasons.
sent12: This has been experimented with in the computer vision domain (Rieger et al., 2020), and its use in the EBHD setting in NLP could be an interesting direction to explore.","Question: What are the various techniques used to simulate bugs in NLP models in the absence of strong natural artifacts?

Supporting sentence: sent6, sent7, sent8, sent9, sent10, sent11",What are the various techniques used to simulate bugs in NLP models in the absence of strong natural artifacts?,"sent6, sent7, sent8, sent9, sent10, sent11",7,"In the absence of strong natural artifacts, bugs can still be simulated using several techniques.

First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010).

Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017).

Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021).

All of these techniques give rise to undesirable model behaviors, requiring debugging.

Another technique, not found in Table 1 but suggested in related work (Idahl et al., 2021), is contaminating input texts in the training data with decoys (i.e., injected artifacts) which could deceive the model into predicting for the wrong reasons.",invalid,,"Question:

What are the various techniques used to simulate bugs in NLP models in the absence of strong natural artifacts?

Answer:

nan"
259108815,Mapping Brains with Language Models: A Survey,https://www.semanticscholar.org/paper/a92c82231c0ea7027ab20b25fe5f82565047aad7,How to predict linguistic stimuli?,10,"Decoding models work in the other direction and aim to predict linguistic features of the stimuli from recordings of brain response. Pereira et al. (2018) introduce a decoder that predicts stimuli representation of semantic features given fMRI data.They introduce a novel dataset of neural responses aligned with annotation of concrete and abstract semantic categories (such as pleasure, ignorance, cooking etc.). They evaluate static word embeddings by applying ridge regression to predict per-word fMRI vectors. A separate regression model is trained per dimension, allowing for dimension-wise regularization. The model is evaluated in terms of pairwise matching accuracy, but also in terms of percentile rank, adapted to the decoding scenario.

Gauthier and Levy (2019) also train linear regression models which map from the response measurements in Pereira et al. (2018), but to representations of the same sentences produced by the BERT language model finetuned on different natural language understanding tasks. The regression models are evaluated using two metrics: mean squared error and average percentile rank. Their results show that fine-tuning with different NLU objectives leads to worse alignment and that, somewhat surprisingly, the only objective which does lead to better alignment is a scrambled language modeling task where the model is trained to predict scrambled sentences.

Minnema and Herbelot (2019) re-examine the work of Pereira et al. (2018) using various metrics (pairwise matching accuracy, percentile rank, cosine distance, R 2 , RSA), comparing decoder models (ridge regression, perceptron, and convolutional neural networks). 3 They show that positive results are only obtained using pairwise matching accuracy. Abdou et al. (2021) investigate whether aligning language models with brain recordings can be improved by biasing their attention with annotations from syntactic or semantic formalisms. They fine-tune the BERT models using several syntactosemantic formalisms and evaluate their alignment with brain activity measurements from the Wehbe et al. (2014a) and Pereira et al. (2018) datasets. Their results -obtained using Pearson correlation as performance metric -are positive for two in three formalisms. Zou et al. (2022) propose a new evaluation method for decoding, a so-called cross-modal cloze task. They generate the data for the task from the neural response measures in Mitchell et al. (2008) and Wehbe et al. (2014a). The task itself amounts to a cloze task in which the context is prefixed by the fMRI image of the masked word. They evaluate models using precision@k. Note how this task is considerably easier than linearly mapping from language model representations into fMRI images, and precision@k results therefore cannot be compared to those obtained in other settings. Their best precision@1 scores are around 0.3, but only marginally (0.03) better than a unimodal LM.

Finally, Pascual et al. (2022) try a more realistic setup by predicting language from fMRI scans of subjects not included in the training. They use the (Pereira et al., 2018) dataset and evaluate the regression models based on pairwise accuracy and precision@k (or top-k accuracy). They propose evaluating with direct classification as a more demanding setup to evaluate and understand current brain decoding models.

Intermediate summary Decoding studies also differ in many respects. Several metrics are used: pairwise-matching accuracy, Pearson correlation, percentile rank, cosine distance, precision@k, and representational similarity analysis; and several datasets are used. Gauthier and Ivanova (2018) criticize the evaluation techniques of decoding studies and suggest adopting task and mechanism explicit models. It is of particular interest to our study that both Minnema and Herbelot (2019) only report positive results for pairwise matching accuracy compared to other metrics. This suggests pairwise matching accuracy is a less conservative metric (and maybe less reliable).","sent1: Decoding models work in the other direction and aim to predict linguistic features of the stimuli from recordings of brain response.
sent2: Pereira et al. (2018) introduce a decoder that predicts stimuli representation of semantic features given fMRI data.
sent3: They introduce a novel dataset of neural responses aligned with annotation of concrete and abstract semantic categories (such as pleasure, ignorance, cooking etc.).
sent4: They evaluate static word embeddings by applying ridge regression to predict per-word fMRI vectors.
sent5: A separate regression model is trained per dimension, allowing for dimension-wise regularization.
sent6: The model is evaluated in terms of pairwise matching accuracy, but also in terms of percentile rank, adapted to the decoding scenario.
sent7: Gauthier and Levy (2019) also train linear regression models which map from the response measurements in Pereira et al. (2018), but to representations of the same sentences produced by the BERT language model finetuned on different natural language understanding tasks.
sent8: The regression models are evaluated using two metrics: mean squared error and average percentile rank.
sent9: Their results show that fine-tuning with different NLU objectives leads to worse alignment and that, somewhat surprisingly, the only objective which does lead to better alignment is a scrambled language modeling task where the model is trained to predict scrambled sentences.
sent10: Minnema and Herbelot (2019) re-examine the work of Pereira et al. (2018) using various metrics (pairwise matching accuracy, percentile rank, cosine distance, R 2 , RSA), comparing decoder models (ridge regression, perceptron, and convolutional neural networks). 3
sent11: They show that positive results are only obtained using pairwise matching accuracy.
sent12: Abdou et al. (2021) investigate whether aligning language models with brain recordings can be improved by biasing their attention with annotations from syntactic or semantic formalisms.
sent13: They fine-tune the BERT models using several syntactosemantic formalisms and evaluate their alignment with brain activity measurements from the Wehbe et al. (2014a) and Pereira et al. (2018) datasets.
sent14: Their results -obtained using Pearson correlation as performance metric -are positive for two in three formalisms.
sent15: Zou et al. (2022) propose a new evaluation method for decoding, a so-called cross-modal cloze task.
sent16: They generate the data for the task from the neural response measures in Mitchell et al. (2008) and Wehbe et al. (2014a).
sent17: The task itself amounts to a cloze task in which the context is prefixed by the fMRI image of the masked word.
sent18: They evaluate models using precision@k.
sent19: Note how this task is considerably easier than linearly mapping from language model representations into fMRI images, and precision@k results therefore cannot be compared to those obtained in other settings.
sent20: Their best precision@1 scores are around 0.3, but only marginally (0.03) better than a unimodal LM.
sent21: Finally, Pascual et al. (2022) try a more realistic setup by predicting language from fMRI scans of subjects not included in the training.
sent22: They use the (Pereira et al., 2018) dataset and evaluate the regression models based on pairwise accuracy and precision@k (or top-k accuracy).
sent23: They propose evaluating with direct classification as a more demanding setup to evaluate and understand current brain decoding models.
sent24: Intermediate summary Decoding studies also differ in many respects.
sent25: Several metrics are used: pairwise-matching accuracy, Pearson correlation, percentile rank, cosine distance, precision@k, and representational similarity analysis; and several datasets are used.
sent26: Gauthier and Ivanova (2018) criticize the evaluation techniques of decoding studies and suggest adopting task and mechanism explicit models.
sent27: It is of particular interest to our study that both Minnema and Herbelot (2019) only report positive results for pairwise matching accuracy compared to other metrics.
sent28: This suggests pairwise matching accuracy is a less conservative metric (and maybe less reliable).","Question: What are the different methods and metrics used to evaluate decoding models that predict linguistic features from brain recordings?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28",What are the different methods and metrics used to evaluate decoding models that predict linguistic features from brain recordings?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28",7,"Decoding models work in the other direction and aim to predict linguistic features of the stimuli from recordings of brain response.

Pereira et al. (2018) introduce a decoder that predicts stimuli representation of semantic features given fMRI data.

They introduce a novel dataset of neural responses aligned with annotation of concrete and abstract semantic categories (such as pleasure, ignorance, cooking etc.).

They evaluate static word embeddings by applying ridge regression to predict per-word fMRI vectors.

A separate regression model is trained per dimension, allowing for dimension-wise regularization.

The model is evaluated in terms of pairwise matching accuracy, but also in terms of percentile rank, adapted to the decoding scenario.

Gauthier and Levy (2019) also train linear regression models which map from the response measurements in Pereira et al. (2018), but to representations of the same sentences produced by the BERT language model finetuned on different natural language understanding tasks.

The regression models are evaluated using two metrics: mean squared error and average percentile rank.

Their results show that fine-tuning with different NLU objectives leads to worse alignment and that, somewhat surprisingly, the only objective which does lead to better alignment is a scrambled language modeling task where the model is trained to predict scrambled sentences.

Minnema and Herbelot (2019) re-examine the work of Pereira et al. (2018) using various metrics (pairwise matching accuracy, percentile rank, cosine distance, R 2 , RSA), comparing decoder models (ridge regression, perceptron, and convolutional neural networks). 3

They show that positive results are only obtained using pairwise matching accuracy.

Abdou et al. (2021) investigate whether aligning language models with brain recordings can be improved by biasing their attention with annotations from syntactic or semantic formalisms.

They fine-tune the BERT models using several syntactosemantic formalisms and evaluate their alignment with brain activity measurements from the Wehbe et al. (2014a) and Pereira et al. (2018) datasets.

Their results -obtained using Pearson correlation as performance metric -are positive for two in three formalisms.

Zou et al. (2022) propose a new evaluation method for decoding, a so-called cross-modal cloze task.

They generate the data for the task from the neural response measures in Mitchell et al. (2008) and Wehbe et al. (2014a).

The task itself amounts to a cloze task in which the context is prefixed by the fMRI image of the masked word.

They evaluate models using precision@k.

Note how this task is considerably easier than linearly mapping from language model representations into fMRI images, and precision@k results therefore cannot be compared to those obtained in other settings.

Their best precision@1 scores are around 0.3, but only marginally (0.03) better than a unimodal LM.

Finally, Pascual et al. (2022) try a more realistic setup by predicting language from fMRI scans of subjects not included in the training.

They use the (Pereira et al., 2018) dataset and evaluate the regression models based on pairwise accuracy and precision@k (or top-k accuracy).

They propose evaluating with direct classification as a more demanding setup to evaluate and understand current brain decoding models.

Intermediate summary Decoding studies also differ in many respects.

Several metrics are used: pairwise-matching accuracy, Pearson correlation, percentile rank, cosine distance, precision@k, and representational similarity analysis; and several datasets are used.

Gauthier and Ivanova (2018) criticize the evaluation techniques of decoding studies and suggest adopting task and mechanism explicit models.

It is of particular interest to our study that both Minnema and Herbelot (2019) only report positive results for pairwise matching accuracy compared to other metrics.

This suggests pairwise matching accuracy is a less conservative metric (and maybe less reliable).",invalid,,"Question:

What are the different methods and metrics used to evaluate decoding models that predict linguistic features from brain recordings?

Answer:

nan"
258426970,Bridging the Gap: A Survey on Integrating (Human) Feedback for Natural Language Generation,https://www.semanticscholar.org/paper/74b05bba46db21e589a2cc0f916f81069b0368ef,Decoding with Feedback Models,5,"As mentioned, feedback models have the advantage that they can be queried cheaply for feedback once trained. Perhaps for this reason, most approaches that leverage feedback models by sampling a large number of candidate generations, and reranking them according to the feedback model:

whereĥ ϕ is a trained (numerical) feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017). by the model (for example, by sampling from its distribution multiple times).

In machine translation, Fernandes et al. (2022) andFreitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation. Their framework comprises a candidate generation stage followed by a ranking stage, in which the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N -best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002). The highest-scoring candidate is then chosen as the final translation. Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system, and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model. Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization"" (see below).

Additionally, there are several works combining MT and APE systems at decoding time, in which the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).

Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans. This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding). They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","sent1: As mentioned, feedback models have the advantage that they can be queried cheaply for feedback once trained.
sent2: Perhaps for this reason, most approaches that leverage feedback models by sampling a large number of candidate generations, and reranking them according to the feedback model:whereĥ ϕ is a trained (numerical) feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017).
sent3: by the model (for example, by sampling from its distribution multiple times).
sent4: In machine translation, Fernandes et al. (2022) andFreitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation.
sent5: Their framework comprises a candidate generation stage followed by a ranking stage, in which the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N -best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002).
sent6: The highest-scoring candidate is then chosen as the final translation.
sent7: Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system, and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model.
sent8: Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization"" (see below).
sent9: Additionally, there are several works combining MT and APE systems at decoding time, in which the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).
sent10: Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.
sent11: This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding).
sent12: They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","Question: How are feedback models utilized to improve machine translation and address the overoptimization problem?

Supporting sentence: sent1, sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",How are feedback models utilized to improve machine translation and address the overoptimization problem?,"sent1, sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",3,"As mentioned, feedback models have the advantage that they can be queried cheaply for feedback once trained.

Perhaps for this reason, most approaches that leverage feedback models by sampling a large number of candidate generations, and reranking them according to the feedback model:whereĥ ϕ is a trained (numerical) feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017).

In machine translation, Fernandes et al. (2022) andFreitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation.

Their framework comprises a candidate generation stage followed by a ranking stage, in which the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N -best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002).

The highest-scoring candidate is then chosen as the final translation.

Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system, and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model.

Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization"" (see below).

Additionally, there are several works combining MT and APE systems at decoding time, in which the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).

Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.

This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding).

They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.",implement,"Feedback models have the advantage that they can be queried cheaply for feedback once trained.

Most approaches leverage feedback models by sampling a large number of candidate generations and reranking them according to the feedback model, where ĥ ϕ is a trained numerical feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017).

In machine translation, Fernandes et al. (2022) and Freitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation.

Their framework comprises a candidate generation stage followed by a ranking stage, where the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N-best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002).

The highest-scoring candidate is then chosen as the final translation.

Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model.

Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization.""

Additionally, several works combine machine translation (MT) and automatic post-editing (APE) systems at decoding time, where the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).

One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.

This issue, known as the overoptimization problem, is the main reason for the regularization term. Gao et al. (2022) study the overoptimization problem in preference models by both optimizing against it with reinforcement learning during training and reranking outputs during decoding.

They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","Question:

How are feedback models utilized to improve machine translation and address the overoptimization problem?

Answer:

Feedback models have the advantage that they can be queried cheaply for feedback once trained.

Most approaches leverage feedback models by sampling a large number of candidate generations and reranking them according to the feedback model, where ĥ ϕ is a trained numerical feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017).

In machine translation, Fernandes et al. (2022) and Freitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation.

Their framework comprises a candidate generation stage followed by a ranking stage, where the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N-best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002).

The highest-scoring candidate is then chosen as the final translation.

Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model.

Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization.

""Additionally, several works combine machine translation (MT) and automatic post-editing (APE) systems at decoding time, where the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).

One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.

This issue, known as the overoptimization problem, is the main reason for the regularization term.

Gao et al. (2022) study the overoptimization problem in preference models by both optimizing against it with reinforcement learning during training and reranking outputs during decoding.

They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem."
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Discussion,6,"If the heuristics or QG are properly designed, NR models trained from their supervision can even match the fully-supervised performance Ren et al., 2022). The biggest challenge is the difficulty to pick the most suitable heuristics or QG when we face a new domain. A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available , so as avoiding the need to manually fixing the WS signals, but this would bring significant computational overhead. In practice hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, which makes them most similar to the actual relevance annotations. However, hyperlink information is not available in most domains and thereby limits its use cases . QG-based WS signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents. Nonetheless, obtaining a high-performing QG can also be non-trivial. One big challenge comes from the one-to-many mapping relations between questions and documents. Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document. For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap. We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.","sent1: If the heuristics or QG are properly designed, NR models trained from their supervision can even match the fully-supervised performance Ren et al., 2022).
sent2: The biggest challenge is the difficulty to pick the most suitable heuristics or QG when we face a new domain.
sent3: A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available , so as avoiding the need to manually fixing the WS signals, but this would bring significant computational overhead.
sent4: In practice hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, which makes them most similar to the actual relevance annotations.
sent5: However, hyperlink information is not available in most domains and thereby limits its use cases .
sent6: QG-based WS signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents.
sent7: Nonetheless, obtaining a high-performing QG can also be non-trivial.
sent8: One big challenge comes from the one-to-many mapping relations between questions and documents.
sent9: Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.
sent10: For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.
sent11: We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.","Question: What are the main challenges and solutions in using weak supervision for neural ranking models in new domains?

Supporting sentence: sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11",What are the main challenges and solutions in using weak supervision for neural ranking models in new domains?,"sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11",3,"The biggest challenge is the difficulty to pick the most suitable heuristics or QG when we face a new domain.

A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available , so as avoiding the need to manually fixing the WS signals, but this would bring significant computational overhead.

In practice hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, which makes them most similar to the actual relevance annotations.

However, hyperlink information is not available in most domains and thereby limits its use cases .

QG-based WS signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents.

Nonetheless, obtaining a high-performing QG can also be non-trivial.

One big challenge comes from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.",implement,"The biggest challenge in using weak supervision for neural ranking models in new domains is the difficulty in selecting the most suitable heuristics or question generation (QG) methods.

A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available, avoiding the need to manually fix the weak supervision signals, though this approach introduces significant computational overhead.

In practice, hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, making them most similar to the actual relevance annotations.

However, hyperlink information is not available in most domains, thereby limiting its use cases.

QG-based weak supervision signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents.

Nonetheless, obtaining a high-performing QG can also be non-trivial.

One significant challenge arises from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

To alleviate the model bias towards safe questions, more sophisticated training techniques such as latent-variable models (Shen and Su, 2018) and reinforcement learning (Yuan et al., 2017; Zhang and Bansal, 2019; Shen et al., 2019a) are needed.","Question:

What are the main challenges and solutions in using weak supervision for neural ranking models in new domains?

Answer:

The biggest challenge in using weak supervision for neural ranking models in new domains is the difficulty in selecting the most suitable heuristics or question generation (QG) methods.

A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available, avoiding the need to manually fix the weak supervision signals, though this approach introduces significant computational overhead.

In practice, hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, making them most similar to the actual relevance annotations.

However, hyperlink information is not available in most domains, thereby limiting its use cases.

QG-based weak supervision signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents.

Nonetheless, obtaining a high-performing QG can also be non-trivial.

One significant challenge arises from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

To alleviate the model bias towards safe questions, more sophisticated training techniques such as latent-variable models (Shen and Su, 2018) and reinforcement learning (Yuan et al., 2017; Zhang and Bansal, 2019; Shen et al., 2019a) are needed."
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,Counter machines,6,"Counter machines are automata with integer-valued registers, which have been studied extensively in connection with LSTM RNNs (Weiss et al., 2018;Suzgun et al., 2019;Merrill, 2019Merrill, , 2020)).Bhattamishra et al. (2020a), following Merrill et al. (2020), define a subclass of counter machines called simplified and stateless -counter machines (SSCMs).These machines use a counter update function  : Σ → Z  to increment and decrement each counter based on the current input symbol, but they have no state and cannot look at the counter values until the end of the string.They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.","sent1: Counter machines are automata with integer-valued registers, which have been studied extensively in connection with LSTM RNNs (Weiss et al., 2018;Suzgun et al., 2019;Merrill, 2019Merrill, , 2020)).Bhattamishra et al. (2020a), following Merrill et al. (2020), define a subclass of counter machines called simplified and stateless -counter machines (SSCMs).These machines use a counter update function  : Σ → Z  to increment and decrement each counter based on the current input symbol, but they have no state and cannot look at the counter values until the end of the string.
sent2: They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.","Question: What are simplified and stateless counter machines (SSCMs) and how are they related to transformer encoders?

Supporting sentence: sent1, sent2",What are simplified and stateless counter machines (SSCMs) and how are they related to transformer encoders?,"sent1, sent2",-1,"Counter machines are automata with integer-valued registers, which have been studied extensively in connection with LSTM RNNs (Weiss et al., 2018;Suzgun et al., 2019;Merrill, 2019Merrill, , 2020)).Bhattamishra et al. (2020a), following Merrill et al. (2020), define a subclass of counter machines called simplified and stateless -counter machines (SSCMs).These machines use a counter update function  : Σ → Z  to increment and decrement each counter based on the current input symbol, but they have no state and cannot look at the counter values until the end of the string.

They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.",invalid,,"Question:

What are simplified and stateless counter machines (SSCMs) and how are they related to transformer encoders?

Answer:

nan"
258426970,Bridging the Gap: A Survey on Integrating (Human) Feedback for Natural Language Generation,https://www.semanticscholar.org/paper/74b05bba46db21e589a2cc0f916f81069b0368ef,Collecting and Using Human Feedback,4,"Collecting human feedback can be rather expensive and may present i ssues for the inexperienced, making it important to leverage existing resources and consider additional data collection carefully. We present an introduction to existing datasets and their collection methods, along with considerations for experimenters creating preference datasets for their own use cases. Additionally, we discuss ethical considerations in the use and collection of human feedback.

In future, richer types of feedback may be collected and we may find ways to make use of this signal. For instance, most existing datasets consist of ranking or numerical scores, but humans prefer to provide richer feedback than labelling (Stumpf et al., 2007;Amershi et al., 2014a;Ghai et al., 2021). Furthermore, variability between human annotators has also not been fully explored (Plank, 2022;Gehrmann et al., 2022b).","sent1: Collecting human feedback can be rather expensive and may present i ssues for the inexperienced, making it important to leverage existing resources and consider additional data collection carefully.
sent2: We present an introduction to existing datasets and their collection methods, along with considerations for experimenters creating preference datasets for their own use cases.
sent3: Additionally, we discuss ethical considerations in the use and collection of human feedback.
sent4: In future, richer types of feedback may be collected and we may find ways to make use of this signal.
sent5: For instance, most existing datasets consist of ranking or numerical scores, but humans prefer to provide richer feedback than labelling (Stumpf et al., 2007;Amershi et al., 2014a;Ghai et al., 2021).
sent6: Furthermore, variability between human annotators has also not been fully explored (Plank, 2022;Gehrmann et al., 2022b).","Question: What are the challenges and future directions in collecting and utilizing human feedback for natural language generation?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6",What are the challenges and future directions in collecting and utilizing human feedback for natural language generation?,"sent1, sent2, sent3, sent4, sent5, sent6",7,"Collecting human feedback can be rather expensive and may present i ssues for the inexperienced, making it important to leverage existing resources and consider additional data collection carefully.

We present an introduction to existing datasets and their collection methods, along with considerations for experimenters creating preference datasets for their own use cases.

Additionally, we discuss ethical considerations in the use and collection of human feedback.

In future, richer types of feedback may be collected and we may find ways to make use of this signal.

For instance, most existing datasets consist of ranking or numerical scores, but humans prefer to provide richer feedback than labelling (Stumpf et al., 2007;Amershi et al., 2014a;Ghai et al., 2021).

Furthermore, variability between human annotators has also not been fully explored (Plank, 2022;Gehrmann et al., 2022b).",invalid,,"Question:

What are the challenges and future directions in collecting and utilizing human feedback for natural language generation?

Answer:

nan"
252683270,A Decade of Knowledge Graphs in Natural Language Processing: A Survey,https://www.semanticscholar.org/paper/2341353cae858ce06225e46356c472b71dc63372,Knowledge Graph Reasoning,5,"Once constructed, KGs contain structured world knowledge and can be used to infer new knowledge by reasoning over them. Thereby, the task of classifying entities is called entity classification, while link prediction is the task of inferring missing links between entities in existing KGs often performed via ranking entities as possible answers to queries (Shi and Weninger, 2018;Bosselut et al., 2019;Ali et al., 2021).

Knowledge graph embedding techniques are used to create dense vector representations of a graph so that they can then be used for downstream machine learning tasks. While this problem can be related solely to KGs, in our survey this label refers to approaches that jointly learn text and graph embeddings (Chen et al., 2018;Wang et al., 2021b).","sent1: Once constructed, KGs contain structured world knowledge and can be used to infer new knowledge by reasoning over them.
sent2: Thereby, the task of classifying entities is called entity classification, while link prediction is the task of inferring missing links between entities in existing KGs often performed via ranking entities as possible answers to queries (Shi and Weninger, 2018;Bosselut et al., 2019;Ali et al., 2021).
sent3: Knowledge graph embedding techniques are used to create dense vector representations of a graph so that they can then be used for downstream machine learning tasks.
sent4: While this problem can be related solely to KGs, in our survey this label refers to approaches that jointly learn text and graph embeddings (Chen et al., 2018;Wang et al., 2021b).","Question: What are the primary tasks and techniques involved in reasoning over knowledge graphs?

Supporting sentence: sent1, sent2, sent3, sent4",What are the primary tasks and techniques involved in reasoning over knowledge graphs?,"sent1, sent2, sent3, sent4",7,"Once constructed, KGs contain structured world knowledge and can be used to infer new knowledge by reasoning over them.

Thereby, the task of classifying entities is called entity classification, while link prediction is the task of inferring missing links between entities in existing KGs often performed via ranking entities as possible answers to queries (Shi and Weninger, 2018;Bosselut et al., 2019;Ali et al., 2021).

Knowledge graph embedding techniques are used to create dense vector representations of a graph so that they can then be used for downstream machine learning tasks.

While this problem can be related solely to KGs, in our survey this label refers to approaches that jointly learn text and graph embeddings (Chen et al., 2018;Wang et al., 2021b).",invalid,,"Question:

What are the primary tasks and techniques involved in reasoning over knowledge graphs?

Answer:

nan"
248426721,What Do You Mean by Relation Extraction? A Survey on Datasets and Study on Scientific Relation Classification,https://www.semanticscholar.org/paper/29a369d83a7d6a49f6a3259bee23bd4d95db0b16,Relation Extraction Datasets Survey,22,"RE has been broadly studied in the last decades and many datasets were published. We survey widely used RE datasets in chronological order, and broadly classify them into three domains based on the data source: (1) news and web, (2) scientific publications and (3) Wikipedia. An overview of the datasets is given in Table 1. Our empirical target here focuses on the scientific domain as so far it has received no attention in the cross-domain direction; a similar investigation on overlaps in data, annotation, and model transferability between datasets in other domains is interesting future work. The CoNLL 2004 dataset (Roth and Yih, 2004) is one of the first works. It contains annotations for named entities and relations in news articles. In the same year, the widely studied ACE dataset was published by Doddington et al. (2004). It contains annotated entities, relations and events in broadcast transcripts, newswire and newspaper data in English, Chinese and Arabic. The corpus is divided into six domains.

Another widely used dataset is The New York Times (NYT) Annotated Corpus, 3 first presented by Riedel et al. (2010). It contains over 1.8 million articles by the NYT between 1987 and 2007. NYT has been created with a distant supervision approach (Mintz et al., 2009), using Freebase (Bollacker et al., 2008 as knowledge base. Two further versions of it followed recently: Zhu et al. (2020b) (NYT-H) and Jia et al. (2019) published manually annotated versions of the test set in order to perform a more accurate evaluation.

3 http://iesl.cs.umass.edu/riedel/ecml/ RE has also been part of the SemEval shared tasks for four times so far. The two early Se-mEval shared tasks focused on the identification of semantic relations between nominals (Nastase et al., 2021). For SemEval-2007Task 4, Girju et al. (2007 released a dataset for RC into seven generic semantic relations between nominals. Three years later, for SemEval-2010 Task 8, Hendrickx et al. (2010) revised the annotation guidelines and published a corpus for RC, by providing a much larger dataset (10k instances, in comparison to 1.5k of the 2007 shared task).

Since 2017, three RE datasets in the scientific domain emerged, two of the three as SemEval shared tasks. In SemEval-2017 Task 10 Augenstein et al. (2017) proposed a dataset for the identification of keyphrases and considered two generic relations (HYPONYM-OF and SYNONYM-OF). The dataset is called ScienceIE and consists of 500 journal articles from the Computer Science, Material Sciences and Physics fields. The year after, Gábor et al. (2018) proposed a corpus for RC and RE made of abstracts of scientific papers from the ACL Anthology for SemEval-2018 Task 7. The data will be described in further detail in Section 4.1. Following the same line, Luan et al. (2018) published SCIERC, which is a scientific RE dataset further annotated for coreference resolution. It contains abstracts from scientific AI-related conferences. From the existing three scientific RE datasets summarized in Table 1, in our empirical investigation we focus on two (SemEval-2018 and SCIERC). We leave out ScienceIE as it focuses on keyphrase extraction and it contains two generic relations only.

The Wikipedia domain has been first introduced in 2013. Google released GoogleRE, 4 a RE corpus consisting of snippets from Wikipedia. More recently, Kassner et al. (2021) proposed mLAMA, a multilingual version (53 languages) of GoogleRE with the purpose of investigating knowledge in pretrained language models. The multi-lingual dimension is gaining more interest for RE. Following this trend, Seganti et al. (2021) presented SMiLER, a multilingual dataset (14 languages) from Wikipedia with relations belonging to nine domains.

Previous datasets were restricted to the same label collection in the training set and in the test set. To address this gap and make RE experimental scenarios more realistic, Han et al. (2018) -2007- Girju et al. (2007 Sentences from the web 7 SemEval-2010 Hendrickx et al. (2010) Sentences from the web 10 TACRED Zhang et al. (2017b) Newswire and web text 42 FSL TACRED Sabo et al. (2021) TACRED   Back to the news domain, Zhang et al. (2017b) published a large-scale RE dataset built over newswire and web text, by crowdsourcing relation annotations for sentences with named entity pairs. This resulted in the TACRED dataset with over 100k instances, which is particularly well-suited for neural models. Sabo et al. (2021) used TA-CRED to make a FSL RC dataset and compared it to FewRel 1.0 and FewRel 2.0, aiming at a more realistic scenario (i.e., non-uniform label distribution, inclusion of pronouns and common nouns).

All datasets so far present a sentence level annotation. To address this, Yao et al. (2019) published DocRED, a document-level RE dataset from Wikipedia and Wikidata. The difference with a traditional sentence-level corpus is that both the intraand inter-sentence relations are annotated, increasing the challenge level. In addition to RE, DocRED annotates coreference chains. DWIE by Zaporojets et al. (2021) is another document-level dataset, specifically designed for multi-task IE (Named Entity Recognition, Coreference Resolution, Relation Extraction, and Entity Linking).

Lastly, there are works focusing on creating datasets for specific RE aspects. Cheng et al. (2021), for example, proposed a Chinese documentlevel RE dataset for hard cases in order to move towards even more challenging evaluation setups.

Domains in RE Given our analysis, we observe a shift in target domains: from news text in seminal works, over web texts, to emerging corpora in the scientific domain and the most recent focus on Wikipedia. Similarly, we observe the emerging trend for FSL.

Different datasets lend themselves to study different aspects of the task. Concerning crossdomain RE, we propose to distinguish three setups:

1. Data from different domains, but same relation types, which are general enough to be present in each domain (limited and often confined to the ACE dataset) (e.g., Plank and Moschitti, 2013).

In the case study of this paper, given the scientific datasets available, we focus on the first setup.","sent1: RE has been broadly studied in the last decades and many datasets were published.
sent2: We survey widely used RE datasets in chronological order, and broadly classify them into three domains based on the data source: (1) news and web, (2) scientific publications and (3) Wikipedia.
sent3: An overview of the datasets is given in Table 1.
sent4: Our empirical target here focuses on the scientific domain as so far it has received no attention in the cross-domain direction; a similar investigation on overlaps in data, annotation, and model transferability between datasets in other domains is interesting future work.
sent5: The CoNLL 2004 dataset (Roth and Yih, 2004) is one of the first works.
sent6: It contains annotations for named entities and relations in news articles.
sent7: In the same year, the widely studied ACE dataset was published by Doddington et al. (2004).
sent8: It contains annotated entities, relations and events in broadcast transcripts, newswire and newspaper data in English, Chinese and Arabic.
sent9: The corpus is divided into six domains.
sent10: Another widely used dataset is The New York Times (NYT) Annotated Corpus, 3 first presented by Riedel et al. (2010).
sent11: It contains over 1.8 million articles by the NYT between 1987 and 2007.
sent12: NYT has been created with a distant supervision approach (Mintz et al., 2009), using Freebase (Bollacker et al., 2008 as knowledge base. Two further versions of it followed recently: Zhu et al. (2020b) (NYT-H) and Jia et al. (2019) published manually annotated versions of the test set in order to perform a more accurate evaluation.
sent13: 3 http://iesl.cs.umass.edu/riedel/ecml/ RE has also been part of the SemEval shared tasks for four times so far.
sent14: The two early Se-mEval shared tasks focused on the identification of semantic relations between nominals (Nastase et al., 2021).
sent15: For SemEval-2007Task 4, Girju et al. (2007 released a dataset for RC into seven generic semantic relations between nominals.
sent16: Three years later, for SemEval-2010 Task 8, Hendrickx et al. (2010) revised the annotation guidelines and published a corpus for RC, by providing a much larger dataset (10k instances, in comparison to 1.5k of the 2007 shared task).Since 2017, three RE datasets in the scientific domain emerged, two of the three as SemEval shared tasks.
sent17: In SemEval-2017 Task 10 Augenstein et al. (2017) proposed a dataset for the identification of keyphrases and considered two generic relations (HYPONYM-OF and SYNONYM-OF).
sent18: The dataset is called ScienceIE and consists of 500 journal articles from the Computer Science, Material Sciences and Physics fields.
sent19: The year after, Gábor et al. (2018) proposed a corpus for RC and RE made of abstracts of scientific papers from the ACL Anthology for SemEval-2018 Task 7.
sent20: The data will be described in further detail in Section 4.1.
sent21: Following the same line, Luan et al. (2018) published SCIERC, which is a scientific RE dataset further annotated for coreference resolution.
sent22: It contains abstracts from scientific AI-related conferences.
sent23: From the existing three scientific RE datasets summarized in Table 1, in our empirical investigation we focus on two (SemEval-2018 and SCIERC).
sent24: We leave out ScienceIE as it focuses on keyphrase extraction and it contains two generic relations only.
sent25: The Wikipedia domain has been first introduced in 2013.
sent26: Google released GoogleRE, 4 a RE corpus consisting of snippets from Wikipedia.
sent27: More recently, Kassner et al. (2021) proposed mLAMA, a multilingual version (53 languages) of GoogleRE with the purpose of investigating knowledge in pretrained language models.
sent28: The multi-lingual dimension is gaining more interest for RE.
sent29: Following this trend, Seganti et al. (2021) presented SMiLER, a multilingual dataset (14 languages) from Wikipedia with relations belonging to nine domains.
sent30: Previous datasets were restricted to the same label collection in the training set and in the test set.
sent31: To address this gap and make RE experimental scenarios more realistic,
sent32: Han et al. (2018) -2007- Girju et al. (2007 Sentences from the web 7 SemEval-2010 Hendrickx et al. (2010) Sentences from the web 10 TACRED Zhang et al. (2017b) Newswire and web text 42 FSL TACRED Sabo et al. (2021) TACRED   Back to the news domain, Zhang et al. (2017b) published a large-scale RE dataset built over newswire and web text, by crowdsourcing relation annotations for sentences with named entity pairs.
sent33: This resulted in the TACRED dataset with over 100k instances, which is particularly well-suited for neural models.
sent34: Sabo et al. (2021) used TA-CRED to make a FSL RC dataset and compared it to FewRel 1.0 and FewRel 2.0, aiming at a more realistic scenario (i.e., non-uniform label distribution, inclusion of pronouns and common nouns).
sent35: All datasets so far present a sentence level annotation.
sent36: To address this, Yao et al. (2019) published DocRED, a document-level RE dataset from Wikipedia and Wikidata.
sent37: The difference with a traditional sentence-level corpus is that both the intraand inter-sentence relations are annotated, increasing the challenge level.
sent38: In addition to RE, DocRED annotates coreference chains.
sent39: DWIE by Zaporojets et al. (2021) is another document-level dataset, specifically designed for multi-task IE (Named Entity Recognition, Coreference Resolution, Relation Extraction, and Entity Linking).
sent40: Lastly, there are works focusing on creating datasets for specific RE aspects.
sent41: Cheng et al. (2021), for example, proposed a Chinese documentlevel RE dataset for hard cases in order to move towards even more challenging evaluation setups.
sent42: Domains in RE Given our analysis, we observe a shift in target domains: from news text in seminal works, over web texts, to emerging corpora in the scientific domain and the most recent focus on Wikipedia.
sent43: Similarly, we observe the emerging trend for FSL.
sent44: Different datasets lend themselves to study different aspects of the task.
sent45: Concerning crossdomain RE, we propose to distinguish three setups:1.
sent46: Data from different domains, but same relation types, which are general enough to be present in each domain (limited and often confined to the ACE dataset) (e.g., Plank and Moschitti, 2013).
sent47: In the case study of this paper, given the scientific datasets available, we focus on the first setup.","Question: How has the focus of relation extraction (RE) datasets evolved over time across different domains?

Supporting sentence: sent1, sent2, sent4, sent16, sent17, sent18, sent19, sent21, sent23, sent25, sent26, sent27, sent28, sent29, sent32, sent33, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42",How has the focus of relation extraction (RE) datasets evolved over time across different domains?,"sent1, sent2, sent4, sent16, sent17, sent18, sent19, sent21, sent23, sent25, sent26, sent27, sent28, sent29, sent32, sent33, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42",6,"RE has been broadly studied in the last decades and many datasets were published.

We survey widely used RE datasets in chronological order, and broadly classify them into three domains based on the data source: (1) news and web, (2) scientific publications and (3) Wikipedia.

Our empirical target here focuses on the scientific domain as so far it has received no attention in the cross-domain direction; a similar investigation on overlaps in data, annotation, and model transferability between datasets in other domains is interesting future work.

Three years later, for SemEval-2010 Task 8, Hendrickx et al. (2010) revised the annotation guidelines and published a corpus for RC, by providing a much larger dataset (10k instances, in comparison to 1.5k of the 2007 shared task).Since 2017, three RE datasets in the scientific domain emerged, two of the three as SemEval shared tasks.

In SemEval-2017 Task 10 Augenstein et al. (2017) proposed a dataset for the identification of keyphrases and considered two generic relations (HYPONYM-OF and SYNONYM-OF).

The dataset is called ScienceIE and consists of 500 journal articles from the Computer Science, Material Sciences and Physics fields.

The year after, Gábor et al. (2018) proposed a corpus for RC and RE made of abstracts of scientific papers from the ACL Anthology for SemEval-2018 Task 7.

Following the same line, Luan et al. (2018) published SCIERC, which is a scientific RE dataset further annotated for coreference resolution.

From the existing three scientific RE datasets summarized in Table 1, in our empirical investigation we focus on two (SemEval-2018 and SCIERC).

The Wikipedia domain has been first introduced in 2013.

Google released GoogleRE, 4 a RE corpus consisting of snippets from Wikipedia.

More recently, Kassner et al. (2021) proposed mLAMA, a multilingual version (53 languages) of GoogleRE with the purpose of investigating knowledge in pretrained language models.

The multi-lingual dimension is gaining more interest for RE.

Following this trend, Seganti et al. (2021) presented SMiLER, a multilingual dataset (14 languages) from Wikipedia with relations belonging to nine domains.

Han et al. (2018) -2007- Girju et al. (2007 Sentences from the web 7 SemEval-2010 Hendrickx et al. (2010) Sentences from the web 10 TACRED Zhang et al. (2017b) Newswire and web text 42 FSL TACRED Sabo et al. (2021) TACRED   Back to the news domain, Zhang et al. (2017b) published a large-scale RE dataset built over newswire and web text, by crowdsourcing relation annotations for sentences with named entity pairs.

This resulted in the TACRED dataset with over 100k instances, which is particularly well-suited for neural models.

All datasets so far present a sentence level annotation.

To address this, Yao et al. (2019) published DocRED, a document-level RE dataset from Wikipedia and Wikidata.

The difference with a traditional sentence-level corpus is that both the intraand inter-sentence relations are annotated, increasing the challenge level.

In addition to RE, DocRED annotates coreference chains.

DWIE by Zaporojets et al. (2021) is another document-level dataset, specifically designed for multi-task IE (Named Entity Recognition, Coreference Resolution, Relation Extraction, and Entity Linking).

Lastly, there are works focusing on creating datasets for specific RE aspects.

Cheng et al. (2021), for example, proposed a Chinese documentlevel RE dataset for hard cases in order to move towards even more challenging evaluation setups.

Domains in RE Given our analysis, we observe a shift in target domains: from news text in seminal works, over web texts, to emerging corpora in the scientific domain and the most recent focus on Wikipedia.",invalid,,"Question:

How has the focus of relation extraction (RE) datasets evolved over time across different domains?

Answer:

nan"
254043519,Beyond Counting Datasets: A Survey of Multilingual Dataset Construction and Necessary Resources,https://www.semanticscholar.org/paper/32cdcf593fef78dcf9e1b6aba7f2345310d7cc60,Suggestions for the NLP Community,5,"To Foster Language-proficient Researchers and Community Efforts. Our analysis shows that the availability of NLP researchers who are fluent in languages highly correlates with the availability of datasets. Moreover, monolingual test suites cover only 16 languages, such as Chinese (Xu et al., 2020), Indic Languages (Kakwani et al., 2020), Polish (Rybak et al., 2020), Persian (Khashabi et al., 2021), Russian (Shavrina et al., 2020) or Arabic (Seelawi et al., 2021), where efforts are driven by language-proficient NLP researchers. Organizing these large-scale, inter-organization efforts can be challenging but have profound effects. Recent community efforts such as Masakhane * spur research for under-resourced languages, resulting in new valuable resources for underrepresented languages (e.g., MasakhaNER; Adelani et al. 2021). Developing a directory of language-proficient NLP researchers interested in global collaboration could foster more cooperation. In the long run, globalized NLP education like AFIRM * will be necessary. A directory of potential funding sources to support multlingual data collection can also be helpful.

On Inclusive Venues. The academic publication/conference reviewing system should also reward efforts to develop language-specific resources, without perceiving this as a niche, low-impact effort (Rogers et al., 2022). As a community, we should encourage efforts to create and provide region-specific (e.g., Nordic Conference on Computational Linguistics, Pacific Asia Conference on Language, Information and Computation), language-oriented (e.g., Deep Learning for Low-Resource NLP, AfricaNLP, Workshop on Indian Language Data: Resources and Evaluation), and data-oriented (e.g., NeurIPS dataset and benchmark track) venues for introducing multilingual datasets. Adapting existing systems to new and low-resource languages poses a challenging and intriguing task as well as substantial research inquiries. The community should continue supporting such efforts and expand evaluation data for diverse target languages.","sent1: To Foster Language-proficient Researchers and Community Efforts.
sent2: Our analysis shows that the availability of NLP researchers who are fluent in languages highly correlates with the availability of datasets.
sent3: Moreover, monolingual test suites cover only 16 languages, such as Chinese (Xu et al., 2020), Indic Languages (Kakwani et al., 2020), Polish (Rybak et al., 2020), Persian (Khashabi et al., 2021), Russian (Shavrina et al., 2020) or Arabic (Seelawi et al., 2021), where efforts are driven by language-proficient NLP researchers.
sent4: Organizing these large-scale, inter-organization efforts can be challenging but have profound effects.
sent5: Recent community efforts such as Masakhane * spur research for under-resourced languages, resulting in new valuable resources for underrepresented languages (e.g., MasakhaNER; Adelani et al. 2021).
sent6: Developing a directory of language-proficient NLP researchers interested in global collaboration could foster more cooperation.
sent7: In the long run, globalized NLP education like AFIRM * will be necessary.
sent8: A directory of potential funding sources to support multlingual data collection can also be helpful.
sent9: On Inclusive Venues. The academic publication/conference reviewing system should also reward efforts to develop language-specific resources, without perceiving this as a niche, low-impact effort (Rogers et al., 2022).
sent10: As a community, we should encourage efforts to create and provide region-specific (e.g., Nordic Conference on Computational Linguistics, Pacific Asia Conference on Language, Information and Computation), language-oriented (e.g., Deep Learning for Low-Resource NLP, AfricaNLP, Workshop on Indian Language Data: Resources and Evaluation), and data-oriented (e.g., NeurIPS dataset and benchmark track) venues for introducing multilingual datasets.
sent11: Adapting existing systems to new and low-resource languages poses a challenging and intriguing task as well as substantial research inquiries.
sent12: The community should continue supporting such efforts and expand evaluation data for diverse target languages.","Question: How can the NLP community foster the development of multilingual datasets and support under-resourced languages?

Supporting sentence: sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",How can the NLP community foster the development of multilingual datasets and support under-resourced languages?,"sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",9,"Our analysis shows that the availability of NLP researchers who are fluent in languages highly correlates with the availability of datasets.

Moreover, monolingual test suites cover only 16 languages, such as Chinese (Xu et al., 2020), Indic Languages (Kakwani et al., 2020), Polish (Rybak et al., 2020), Persian (Khashabi et al., 2021), Russian (Shavrina et al., 2020) or Arabic (Seelawi et al., 2021), where efforts are driven by language-proficient NLP researchers.

Organizing these large-scale, inter-organization efforts can be challenging but have profound effects.

Recent community efforts such as Masakhane * spur research for under-resourced languages, resulting in new valuable resources for underrepresented languages (e.g., MasakhaNER; Adelani et al. 2021).

Developing a directory of language-proficient NLP researchers interested in global collaboration could foster more cooperation.

In the long run, globalized NLP education like AFIRM * will be necessary.

A directory of potential funding sources to support multlingual data collection can also be helpful.

On Inclusive Venues. The academic publication/conference reviewing system should also reward efforts to develop language-specific resources, without perceiving this as a niche, low-impact effort (Rogers et al., 2022).

As a community, we should encourage efforts to create and provide region-specific (e.g., Nordic Conference on Computational Linguistics, Pacific Asia Conference on Language, Information and Computation), language-oriented (e.g., Deep Learning for Low-Resource NLP, AfricaNLP, Workshop on Indian Language Data: Resources and Evaluation), and data-oriented (e.g., NeurIPS dataset and benchmark track) venues for introducing multilingual datasets.

Adapting existing systems to new and low-resource languages poses a challenging and intriguing task as well as substantial research inquiries.

The community should continue supporting such efforts and expand evaluation data for diverse target languages.",invalid,,"Question:

How can the NLP community foster the development of multilingual datasets and support under-resourced languages?

Answer:

nan"
247627890,"Vision-and-Language Navigation: A Survey of Tasks, Methods, and Future Directions",https://www.semanticscholar.org/paper/4f1d598f919aae55c3cbbc425ef1514a54e2b8cd,Semantic Understanding,7,"Semantic understanding of VLN tasks incorporates knowledge about important features in VLN. In addition to the raw features, high-level semantic representations also improve performance in unseen environments.

Intra-Modality Visual or textual modalities can be decomposed into many features, which matter differently in VLN. The overall visual features extracted by a neural model may actually hurt the performance in some cases (Thomason et al., 2019a;Hu et al., 2019;Zhang et al., 2020b). Therefore, it is important to find the feature(s) that best improve performance. High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019). Different types of tokens within the instruction also function differently (Zhu et al., 2021b). Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).

Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021). The soft alignment also highlights relevant parts of the instruction with respect to the current step (Landi et al., 2019;Zhang et al., 2020a).","sent1: Semantic understanding of VLN tasks incorporates knowledge about important features in VLN.
sent2: In addition to the raw features, high-level semantic representations also improve performance in unseen environments.
sent3: Intra-Modality Visual or textual modalities can be decomposed into many features, which matter differently in VLN.
sent4: The overall visual features extracted by a neural model may actually hurt the performance in some cases (Thomason et al., 2019a;Hu et al., 2019;Zhang et al., 2020b).
sent5: Therefore, it is important to find the feature(s) that best improve performance.
sent6: High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019).
sent7: Different types of tokens within the instruction also function differently (Zhu et al., 2021b).
sent8: Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).
sent9: Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021).
sent10: The soft alignment also highlights relevant parts of the instruction with respect to the current step (Landi et al., 2019;Zhang et al., 2020a).","Question: How do high-level semantic representations and feature extraction impact performance in Vision-and-Language Navigation (VLN) tasks?

Supporting sentence: sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent10",How do high-level semantic representations and feature extraction impact performance in Vision-and-Language Navigation (VLN) tasks?,"sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent10",6,"In addition to the raw features, high-level semantic representations also improve performance in unseen environments.

The overall visual features extracted by a neural model may actually hurt the performance in some cases (Thomason et al., 2019a;Hu et al., 2019;Zhang et al., 2020b).

Therefore, it is important to find the feature(s) that best improve performance.

High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019).

Different types of tokens within the instruction also function differently (Zhu et al., 2021b).

Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).

Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021).

The soft alignment also highlights relevant parts of the instruction with respect to the current step (Landi et al., 2019;Zhang et al., 2020a).",invalid,,"Question:

How do high-level semantic representations and feature extraction impact performance in Vision-and-Language Navigation (VLN) tasks?

Answer:

nan"
258426970,Bridging the Gap: A Survey on Integrating (Human) Feedback for Natural Language Generation,https://www.semanticscholar.org/paper/74b05bba46db21e589a2cc0f916f81069b0368ef,Considerations in Data Collection,7,"There are multiple facets to consider when collecting human feedback data for a generation task; a non-exhaustive list of axes along which data collection can vary is presented below. 1. Annotator expertise: Depending on task and training (Snow et al., 2008;Sheng et al., 2008;Clark et al., 2021;Gillick and Liu, 2010;Freitag et al., 2021), annotators can be domain experts to crowdworkers or even models. 2. Length of engagement: Involves one-time or long-term collaborations with annotators, with preference datasets often involving extended partnerships (Stiennon et al., 2020;Bai et al., 2022a;Freitag et al., 2021). 3. Collection method: Data can be gathered explicitly through experiments or implicitly from online sources/user interactions, with varying noise (Kreutzer et al., 2018;Freitag et al., 2021). 4. Collection platform: Common platforms include Amazon Mechanical Turk, Upwork, and Scale AI. 5. Annotator demographics: Different groups may have varying opinions on quality generations; demographics may be collected during data collection. There is generally a trade-off between the effort needed to create the datasets and the reliability of judgments collected. For higher-stakes applications in specific domains, it may be worth the effort to consult expert annotators in an extended partnership. For general alignment with human preferences, it may instead be prudent to recruit a diverse group of annotators to avoid overfitting to the preferences of specific demographics that may be more accessible in recruitment.","sent1: There are multiple facets to consider when collecting human feedback data for a generation task; a non-exhaustive list of axes along which data collection can vary is presented below.
sent2: 1. Annotator expertise: Depending on task and training (Snow et al., 2008;Sheng et al., 2008;Clark et al., 2021;Gillick and Liu, 2010;Freitag et al., 2021), annotators can be domain experts to crowdworkers or even models.
sent3: 2. Length of engagement: Involves one-time or long-term collaborations with annotators, with preference datasets often involving extended partnerships (Stiennon et al., 2020;Bai et al., 2022a;Freitag et al., 2021).
sent4: 3. Collection method: Data can be gathered explicitly through experiments or implicitly from online sources/user interactions, with varying noise (Kreutzer et al., 2018;Freitag et al., 2021).
sent5: 4. Collection platform: Common platforms include Amazon Mechanical Turk, Upwork, and Scale AI.
sent6: 5. Annotator demographics: Different groups may have varying opinions on quality generations; demographics may be collected during data collection.
sent7: There is generally a trade-off between the effort needed to create the datasets and the reliability of judgments collected.
sent8: For higher-stakes applications in specific domains, it may be worth the effort to consult expert annotators in an extended partnership.
sent9: For general alignment with human preferences, it may instead be prudent to recruit a diverse group of annotators to avoid overfitting to the preferences of specific demographics that may be more accessible in recruitment.","Question: What are the key considerations when collecting human feedback data for natural language generation tasks?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the key considerations when collecting human feedback data for natural language generation tasks?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",4,"There are multiple facets to consider when collecting human feedback data for a generation task; a non-exhaustive list of axes along which data collection can vary is presented below.

1. Annotator expertise: Depending on task and training (Snow et al., 2008;Sheng et al., 2008;Clark et al., 2021;Gillick and Liu, 2010;Freitag et al., 2021), annotators can be domain experts to crowdworkers or even models.

2. Length of engagement: Involves one-time or long-term collaborations with annotators, with preference datasets often involving extended partnerships (Stiennon et al., 2020;Bai et al., 2022a;Freitag et al., 2021).

3. Collection method: Data can be gathered explicitly through experiments or implicitly from online sources/user interactions, with varying noise (Kreutzer et al., 2018;Freitag et al., 2021).

4. Collection platform: Common platforms include Amazon Mechanical Turk, Upwork, and Scale AI.

5. Annotator demographics: Different groups may have varying opinions on quality generations; demographics may be collected during data collection.

There is generally a trade-off between the effort needed to create the datasets and the reliability of judgments collected.

For higher-stakes applications in specific domains, it may be worth the effort to consult expert annotators in an extended partnership.

For general alignment with human preferences, it may instead be prudent to recruit a diverse group of annotators to avoid overfitting to the preferences of specific demographics that may be more accessible in recruitment.",implement,"When collecting human feedback data for a generation task, there are multiple facets to consider.

One important aspect is annotator expertise, which can range from domain experts to crowdworkers or even models, depending on the task and training (Snow et al., 2008; Sheng et al., 2008; Clark et al., 2021; Gillick and Liu, 2010; Freitag et al., 2021).

Another key consideration is the length of engagement, which can involve one-time or long-term collaborations with annotators, with preference datasets often involving extended partnerships (Stiennon et al., 2020; Bai et al., 2022a; Freitag et al., 2021).

Another consideration is the collection method, where data can be gathered explicitly through experiments or implicitly from online sources or user interactions, with varying levels of noise (Kreutzer et al., 2018; Freitag et al., 2021).

Another consideration is the collection platform, with common options including Amazon Mechanical Turk, Upwork, and Scale AI.

Another consideration is annotator demographics, as different groups may have varying opinions on quality generations; demographics may be collected during data collection.

There is generally a trade-off between the effort needed to create the datasets and the reliability of judgments collected.

For higher-stakes applications in specific domains, it may be worth the effort to consult expert annotators in an extended partnership.

For general alignment with human preferences, it may instead be prudent to recruit a diverse group of annotators to avoid overfitting to the preferences of specific demographics that may be more accessible in recruitment.","Question:

What are the key considerations when collecting human feedback data for natural language generation tasks?

Answer:

When collecting human feedback data for a generation task, there are multiple facets to consider.

One important aspect is annotator expertise, which can range from domain experts to crowdworkers or even models, depending on the task and training (Snow et al., 2008; Sheng et al., 2008; Clark et al., 2021; Gillick and Liu, 2010; Freitag et al., 2021).

Another key consideration is the length of engagement, which can involve one-time or long-term collaborations with annotators, with preference datasets often involving extended partnerships (Stiennon et al., 2020; Bai et al., 2022a; Freitag et al., 2021).

Another consideration is the collection method, where data can be gathered explicitly through experiments or implicitly from online sources or user interactions, with varying levels of noise (Kreutzer et al., 2018; Freitag et al., 2021).

Another consideration is the collection platform, with common options including Amazon Mechanical Turk, Upwork, and Scale AI.

Another consideration is annotator demographics, as different groups may have varying opinions on quality generations; demographics may be collected during data collection.

There is generally a trade-off between the effort needed to create the datasets and the reliability of judgments collected.

For higher-stakes applications in specific domains, it may be worth the effort to consult expert annotators in an extended partnership.

For general alignment with human preferences, it may instead be prudent to recruit a diverse group of annotators to avoid overfitting to the preferences of specific demographics that may be more accessible in recruitment."
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Overview,7,"There are three kinds of automatic metrics to evaluate performances of related models:

• Accuracy of ZP Recovery: this aims to measure model performance on detecting and predicting ZPs of sentences in one pro-drop language. For instance, the micro F1-score is used to evaluating Chinese ZPR systems Song et al. (2020). 11 • General Translation Quality: there are a number of automatic evaluation metrics for measuring general performance of MT systems (Snover  Table 4: Correlation between the manual evaluation and other automatic metrics, which are applied on different ZPT benchmarks, which are same as in Table 2. et al., 2006). BLEU (Papineni et al., 2002) is the most widely-used one, which measures the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations. ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match. Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models which obtains new SOTA levels of correlation with human judgements. • Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation. As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances. To fix this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).","sent1: There are three kinds of automatic metrics to evaluate performances of related models:• Accuracy of ZP Recovery: this aims to measure model performance on detecting and predicting ZPs of sentences in one pro-drop language.
sent2: For instance, the micro F1-score is used to evaluating Chinese ZPR systems Song et al. (2020).
sent3: 11 • General Translation Quality: there are a number of automatic evaluation metrics for measuring general performance of MT systems (Snover  Table 4: Correlation between the manual evaluation and other automatic metrics, which are applied on different ZPT benchmarks, which are same as in Table 2. et al., 2006).
sent4: BLEU (Papineni et al., 2002) is the most widely-used one, which measures the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations.
sent5: ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match.
sent6: Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models which obtains new SOTA levels of correlation with human judgements.
sent7: • Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation.
sent8: As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances.
sent9: To fix this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).","Question: What are the different automatic metrics used to evaluate Zero Pronoun Translation (ZPT) models, and how do they address the limitations of general-purpose metrics?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9","What are the different automatic metrics used to evaluate Zero Pronoun Translation (ZPT) models, and how do they address the limitations of general-purpose metrics?","sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",2,"There are three kinds of automatic metrics to evaluate performances of related models:• Accuracy of ZP Recovery: this aims to measure model performance on detecting and predicting ZPs of sentences in one pro-drop language.

For instance, the micro F1-score is used to evaluating Chinese ZPR systems Song et al. (2020).

11 • General Translation Quality: there are a number of automatic evaluation metrics for measuring general performance of MT systems (Snover  Table 4: Correlation between the manual evaluation and other automatic metrics, which are applied on different ZPT benchmarks, which are same as in Table 2. et al., 2006).

BLEU (Papineni et al., 2002) is the most widely-used one, which measures the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations.

ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match.

Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models which obtains new SOTA levels of correlation with human judgements.

• Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation.

As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances.

To fix this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).",implement,"There are three kinds of automatic metrics to evaluate the performance of Zero Pronoun Translation (ZPT) models: Accuracy of ZP Recovery, which aims to measure model performance on detecting and predicting ZPs in sentences of a pro-drop language.

For instance, the micro F1-score is used to evaluate Chinese ZPR systems (Song et al., 2020).

General Translation Quality metrics are also used to measure the overall performance of MT systems (Snover et al., 2006).

BLEU (Papineni et al., 2002) is the most widely-used metric, measuring the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations.

ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match.

Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models, achieving new state-of-the-art levels of correlation with human judgments.

Pronoun-Aware Translation Quality metrics are also employed, as general-purpose metrics like BLEU (Wang et al., 2016a; Wang et al., 2018a; Ri et al., 2021) cannot adequately characterize the performance of ZP translation.

Missed or incorrect pronouns may not affect BLEU scores but can severely harm true performance.

To address this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).","Question:

What are the different automatic metrics used to evaluate Zero Pronoun Translation (ZPT) models, and how do they address the limitations of general-purpose metrics?

Answer:

There are three kinds of automatic metrics to evaluate the performance of Zero Pronoun Translation (ZPT) models: Accuracy of ZP Recovery, which aims to measure model performance on detecting and predicting ZPs in sentences of a pro-drop language.

For instance, the micro F1-score is used to evaluate Chinese ZPR systems (Song et al., 2020).

General Translation Quality metrics are also used to measure the overall performance of MT systems (Snover et al., 2006).

BLEU (Papineni et al., 2002) is the most widely-used metric, measuring the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations.

ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match.

Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models, achieving new state-of-the-art levels of correlation with human judgments.

Pronoun-Aware Translation Quality metrics are also employed, as general-purpose metrics like BLEU (Wang et al., 2016a; Wang et al., 2018a; Ri et al., 2021) cannot adequately characterize the performance of ZP translation.

Missed or incorrect pronouns may not affect BLEU scores but can severely harm true performance.

To address this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018)."
225062337,A Survey on Recent Approaches for Natural Language Processing in Low-Resource Scenarios,https://www.semanticscholar.org/paper/455cdafd55a5b5ddefa029bf97801327e142646d,Multilingual Language Models,4,"Analogously to low-resource domains, lowresource languages can also benefit from labeled resources available in other high-resource languages. This usually requires the training of multilingual language representations by combining monolingual representations (Lange et al., 2020a) or training a single model for many languages, such as multilingual BERT (Devlin et al., 2019) or XLM-RoBERTa (Conneau et al., 2020) . These models are trained using unlabeled, monolingual corpora from different languages and can be used in crossand multilingual settings, due to many languages seen during pre-training.

In cross-lingual zero-shot learning, no taskspecific labeled data is available in the low-resource target language. Instead, labeled data from a high-resource language is leveraged. A multilingual model can be trained on the target task in a high-resource language and afterwards, applied to the unseen target languages, such as for named entity recognition ( 2020) proposed adding a minimal amount of target-task and -language data (in the range of 10 to 100 labeled sentences) which resulted in a significant boost in performance for classification in low-resource languages.

The transfer between two languages can be improved by creating a common multilingual embedding space of multiple languages. This is useful for standard word embeddings  as well as pre-trained language models. For example, by aligning the languages inside a single multilin- This alignment is typically done by computing a mapping between two different embedding spaces, such that the words in both embeddings share similar feature vectors after the mapping (Mikolov et al., 2013;Joulin et al., 2018). This allows to use different embeddings inside the same model and helps when two languages do not share the same space inside a single model (Cao et al., 2020). For example, Zhang et al. (2019b) used bilingual representations by creating cross-lingual word embeddings using a small set of parallel sentences between the highresource language English and three low-resource African languages, Swahili, Tagalog, and Somali, to improve document retrieval performance for the African languages.

Open Issues: While these multilingual models are a tremendous step towards enabling NLP in many languages, possible claims that these are universal language models do not hold. For example, mBERT covers 104 and XLM-R 100 languages, which is a third of all languages in Wikipedia as outlined earlier. Further, Wu and Dredze (2020) showed that, in particular, low-resource languages are not well-represented in mBERT. Figure 2 shows which language families with at least 1 million speakers are covered by mBERT and XLM-RoBERTa 2 . In particular, African and American languages are not well-represented within the transformer models, even though millions of people speak these languages. This can be problematic, as languages from more distant language families are less suited for transfer learning, as Lauscher et al.

(2020) showed.","sent1: Analogously to low-resource domains, lowresource languages can also benefit from labeled resources available in other high-resource languages.
sent2: This usually requires the training of multilingual language representations by combining monolingual representations (Lange et al., 2020a) or training a single model for many languages, such as multilingual BERT (Devlin et al., 2019) or XLM-RoBERTa (Conneau et al., 2020) .
sent3: These models are trained using unlabeled, monolingual corpora from different languages and can be used in crossand multilingual settings, due to many languages seen during pre-training.
sent4: In cross-lingual zero-shot learning, no taskspecific labeled data is available in the low-resource target language.
sent5: Instead, labeled data from a high-resource language is leveraged.
sent6: A multilingual model can be trained on the target task in a high-resource language and afterwards, applied to the unseen target languages, such as for named entity recognition ( 2020) proposed adding a minimal amount of target-task and -language data (in the range of 10 to 100 labeled sentences) which resulted in a significant boost in performance for classification in low-resource languages.
sent7: The transfer between two languages can be improved by creating a common multilingual embedding space of multiple languages.
sent8: This is useful for standard word embeddings  as well as pre-trained language models.
sent9: For example, by aligning the languages inside a single multilin-
sent10: This alignment is typically done by computing a mapping between two different embedding spaces, such that the words in both embeddings share similar feature vectors after the mapping (Mikolov et al., 2013;Joulin et al., 2018).
sent11: This allows to use different embeddings inside the same model and helps when two languages do not share the same space inside a single model (Cao et al., 2020).
sent12: For example, Zhang et al. (2019b) used bilingual representations by creating cross-lingual word embeddings using a small set of parallel sentences between the highresource language English and three low-resource African languages, Swahili, Tagalog, and Somali, to improve document retrieval performance for the African languages.
sent13: Open Issues: While these multilingual models are a tremendous step towards enabling NLP in many languages, possible claims that these are universal language models do not hold.
sent14: For example, mBERT covers 104 and XLM-R 100 languages, which is a third of all languages in Wikipedia as outlined earlier.
sent15: Further, Wu and Dredze (2020) showed that, in particular, low-resource languages are not well-represented in mBERT.
sent16: Figure 2 shows which language families with at least 1 million speakers are covered by mBERT and XLM-RoBERTa 2 .
sent17: In particular, African and American languages are not well-represented within the transformer models, even though millions of people speak these languages.
sent18: This can be problematic, as languages from more distant language families are less suited for transfer learning, as Lauscher et al.(2020) showed.","Question: How do multilingual language models facilitate cross-lingual transfer learning for low-resource languages?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",How do multilingual language models facilitate cross-lingual transfer learning for low-resource languages?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",3,"Analogously to low-resource domains, lowresource languages can also benefit from labeled resources available in other high-resource languages.

This usually requires the training of multilingual language representations by combining monolingual representations (Lange et al., 2020a) or training a single model for many languages, such as multilingual BERT (Devlin et al., 2019) or XLM-RoBERTa (Conneau et al., 2020) .

These models are trained using unlabeled, monolingual corpora from different languages and can be used in crossand multilingual settings, due to many languages seen during pre-training.

In cross-lingual zero-shot learning, no taskspecific labeled data is available in the low-resource target language.

Instead, labeled data from a high-resource language is leveraged.

A multilingual model can be trained on the target task in a high-resource language and afterwards, applied to the unseen target languages, such as for named entity recognition ( 2020) proposed adding a minimal amount of target-task and -language data (in the range of 10 to 100 labeled sentences) which resulted in a significant boost in performance for classification in low-resource languages.

The transfer between two languages can be improved by creating a common multilingual embedding space of multiple languages.

This is useful for standard word embeddings  as well as pre-trained language models.

For example, by aligning the languages inside a single multilin-

This alignment is typically done by computing a mapping between two different embedding spaces, such that the words in both embeddings share similar feature vectors after the mapping (Mikolov et al., 2013;Joulin et al., 2018).

This allows to use different embeddings inside the same model and helps when two languages do not share the same space inside a single model (Cao et al., 2020).

For example, Zhang et al. (2019b) used bilingual representations by creating cross-lingual word embeddings using a small set of parallel sentences between the highresource language English and three low-resource African languages, Swahili, Tagalog, and Somali, to improve document retrieval performance for the African languages.",implement,"Low-resource languages can benefit from labeled resources available in other high-resource languages.

This usually requires the training of multilingual language representations by combining monolingual representations (Lange et al., 2020a) or training a single model for many languages, such as multilingual BERT (Devlin et al., 2019) or XLM-RoBERTa (Conneau et al., 2020).

These models are trained using unlabeled, monolingual corpora from different languages and can be used in cross- and multilingual settings due to the variety of languages seen during pre-training.

In cross-lingual zero-shot learning, no task-specific labeled data is available in the low-resource target language.

Instead, labeled data from a high-resource language is leveraged.

A multilingual model can be trained on the target task in a high-resource language and afterwards applied to the unseen target languages. For instance, adding a minimal amount of target-task and target-language data (in the range of 10 to 100 labeled sentences) has been shown to significantly boost performance for classification in low-resource languages.

The transfer between two languages can be improved by creating a common multilingual embedding space of multiple languages.

This approach is useful for standard word embeddings as well as pre-trained language models.

For example, by aligning the languages inside a single multilingual embedding space, the transfer between languages can be enhanced.

This alignment is typically achieved by computing a mapping between two different embedding spaces, ensuring that words in both embeddings share similar feature vectors after the mapping (Mikolov et al., 2013; Joulin et al., 2018).

This allows the use of different embeddings within the same model and is beneficial when two languages do not share the same space inside a single model (Cao et al., 2020).

For example, Zhang et al. (2019b) used bilingual representations by creating cross-lingual word embeddings with a small set of parallel sentences between the high-resource language English and three low-resource African languages—Swahili, Tagalog, and Somali—to improve document retrieval performance for the African languages.","Question:

How do multilingual language models facilitate cross-lingual transfer learning for low-resource languages?

Answer:

Low-resource languages can benefit from labeled resources available in other high-resource languages.

This usually requires the training of multilingual language representations by combining monolingual representations (Lange et al., 2020a) or training a single model for many languages, such as multilingual BERT (Devlin et al., 2019) or XLM-RoBERTa (Conneau et al., 2020).

These models are trained using unlabeled, monolingual corpora from different languages and can be used in cross- and multilingual settings due to the variety of languages seen during pre-training.

In cross-lingual zero-shot learning, no task-specific labeled data is available in the low-resource target language.

Instead, labeled data from a high-resource language is leveraged.

A multilingual model can be trained on the target task in a high-resource language and afterwards applied to the unseen target languages.

For instance, adding a minimal amount of target-task and target-language data (in the range of 10 to 100 labeled sentences) has been shown to significantly boost performance for classification in low-resource languages.

The transfer between two languages can be improved by creating a common multilingual embedding space of multiple languages.

This approach is useful for standard word embeddings as well as pre-trained language models.

For example, by aligning the languages inside a single multilingual embedding space, the transfer between languages can be enhanced.

This alignment is typically achieved by computing a mapping between two different embedding spaces, ensuring that words in both embeddings share similar feature vectors after the mapping (Mikolov et al., 2013; Joulin et al., 2018).

This allows the use of different embeddings within the same model and is beneficial when two languages do not share the same space inside a single model (Cao et al., 2020).

For example, Zhang et al. (2019b) used bilingual representations by creating cross-lingual word embeddings with a small set of parallel sentences between the high-resource language English and three low-resource African languages—Swahili, Tagalog, and Somali—to improve document retrieval performance for the African languages."
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,First-order logic with majority,5,"Merrill and Sabharwal (2023a) further tighten the L-uniform TC 0 upper bound of Merrill and Sabharwal (2023b) to DLOGTIME-uniform TC 0 , and therefore FOM [BIT].The proof constructs subroutines to answer queries about the types of nodes and connectivity of pairs of nodes in the computation graph of a transformer, and shows that these queries can be translated to queries for a TC 0 circuit family with  (log ) time overhead.which is first-order logic with counting quantifiers, using two sorts for positions and counts (Immerman, 1999, p. 185-187), where positions have the MOD predicate (but not < or =), and counts have <, +, and =, capturing the fact that transformers can add and compare activations, but not positions.They show that this logic is intermediate in expressivity between  (1)-precision and infinite-precision transformers.The lower-bound proof makes use of a normal form that eliminates quantifiers over counts and makes quantifiers over positions have depth 1; a perhaps surprising consequence is that  (1)-precision transformers are no more powerful than 2-layer uniform-attention transformers.Weiss et al. (2021) define a programming language called RASP (Restricted Access Sequence Programming Language) and show that it can be compiled to transformers with average-hard attention and two extensions: • Attention weights are directly computed from the previous layer without being confined to dotproducts of query and key vectors.• Position-wise FFNs compute arbitrary computable functions.Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.Element-wise operations are approximately compiled to ReLU FFNs.Friedman et al. (2023) define Transformer Programs, a restricted class of transformers that can be translated into RASP programs.","sent1: Merrill and Sabharwal (2023a) further tighten the L-uniform TC 0 upper bound of Merrill and Sabharwal (2023b) to DLOGTIME-uniform TC 0 , and therefore FOM [BIT].The proof constructs subroutines to answer queries about the types of nodes and connectivity of pairs of nodes in the computation graph of a transformer, and shows that these queries can be translated to queries for a TC 0 circuit family with  (log ) time overhead.which is first-order logic with counting quantifiers, using two sorts for positions and counts (Immerman, 1999, p. 185-187), where positions have the MOD predicate (but not < or =), and counts have <, +, and =, capturing the fact that transformers can add and compare activations, but not positions.
sent2: They show that this logic is intermediate in expressivity between  (1)-precision and infinite-precision transformers.
sent3: The lower-bound proof makes use of a normal form that eliminates quantifiers over counts and makes quantifiers over positions have depth 1; a perhaps surprising consequence is that  (1)-precision transformers are no more powerful than 2-layer uniform-attention transformers.
sent4: Weiss et al. (2021) define a programming language called RASP (Restricted Access Sequence Programming Language) and show that it can be compiled to transformers with average-hard attention and two extensions: • Attention weights are directly computed from the previous layer without being confined to dotproducts of query and key vectors.• Position-wise FFNs compute arbitrary computable functions.
sent5: Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.
sent6: It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.
sent7: Element-wise operations are approximately compiled to ReLU FFNs.
sent8: Friedman et al. (2023) define Transformer Programs, a restricted class of transformers that can be translated into RASP programs.","Question: How do Merrill and Sabharwal (2023a) demonstrate the expressivity of first-order logic with majority in transformers?

Supporting sentence: sent1, sent2, sent3",How do Merrill and Sabharwal (2023a) demonstrate the expressivity of first-order logic with majority in transformers?,"sent1, sent2, sent3",1,"Merrill and Sabharwal (2023a) further tighten the L-uniform TC 0 upper bound of Merrill and Sabharwal (2023b) to DLOGTIME-uniform TC 0 , and therefore FOM [BIT].The proof constructs subroutines to answer queries about the types of nodes and connectivity of pairs of nodes in the computation graph of a transformer, and shows that these queries can be translated to queries for a TC 0 circuit family with  (log ) time overhead.which is first-order logic with counting quantifiers, using two sorts for positions and counts (Immerman, 1999, p. 185-187), where positions have the MOD predicate (but not < or =), and counts have <, +, and =, capturing the fact that transformers can add and compare activations, but not positions.

They show that this logic is intermediate in expressivity between  (1)-precision and infinite-precision transformers.

The lower-bound proof makes use of a normal form that eliminates quantifiers over counts and makes quantifiers over positions have depth 1; a perhaps surprising consequence is that  (1)-precision transformers are no more powerful than 2-layer uniform-attention transformers.",implement,"Merrill and Sabharwal (2023a) demonstrate the expressivity of first-order logic with majority in transformers by tightening the L-uniform TC^0 upper bound to DLOGTIME-uniform TC^0, and therefore FOM [BIT].

They show that this logic is intermediate in expressivity between 1-precision and infinite-precision transformers.

The lower-bound proof utilizes a normal form that eliminates quantifiers over counts and restricts quantifiers over positions to depth 1; a surprising consequence is that 1-precision transformers are no more powerful than 2-layer uniform-attention transformers.","Question:

How do Merrill and Sabharwal (2023a) demonstrate the expressivity of first-order logic with majority in transformers?

Answer:

Merrill and Sabharwal (2023a) demonstrate the expressivity of first-order logic with majority in transformers by tightening the L-uniform TC^0 upper bound to DLOGTIME-uniform TC^0, and therefore FOM [BIT].

They show that this logic is intermediate in expressivity between 1-precision and infinite-precision transformers.

The lower-bound proof utilizes a normal form that eliminates quantifiers over counts and restricts quantifiers over positions to depth 1; a surprising consequence is that 1-precision transformers are no more powerful than 2-layer uniform-attention transformers."
254877175,A Survey of Deep Learning for Mathematical Reasoning,https://www.semanticscholar.org/paper/2dbec38fe353ab0e495ad09263389dbc9260824d,In-context Example Selection,8,"Early chain-of-thought work randomly or heuristically selects in-context examples. However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a). Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature. To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023). For example, Rubin et al. 

Early chain-of-thought work randomly or heuristically selects in-context examples. However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a). Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature. To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023). For example, Rubin et al. ","sent1: Early chain-of-thought work randomly or heuristically selects in-context examples.
sent2: However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).
sent3: Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.
sent4: To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).
sent5: For example, Rubin et al. Early chain-of-thought work randomly or heuristically selects in-context examples.
sent6: However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).
sent7: Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.
sent8: To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).
sent9: For example, Rubin et al.","Question: What are the challenges and recent advancements in optimizing in-context example selection for few-shot learning in mathematical reasoning?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",What are the challenges and recent advancements in optimizing in-context example selection for few-shot learning in mathematical reasoning?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",6,"Early chain-of-thought work randomly or heuristically selects in-context examples.

However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).

Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.

To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).

For example, Rubin et al. Early chain-of-thought work randomly or heuristically selects in-context examples.

However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).

Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.

To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).",invalid,,"Question:

What are the challenges and recent advancements in optimizing in-context example selection for few-shot learning in mathematical reasoning?

Answer:

nan"
252200083,"A Survey in Automatic Irony Processing: Linguistic, Cognitive, and Multi-X Perspectives",https://www.semanticscholar.org/paper/77696f90afa79ac06ea58abcc91bf5e10f72b934,Theoretical Research in Irony 2.1 Irony Theories,5,"Various definitions have been given to irony. Early studies suggested that irony is the expression whose real meaning is contradictory to its literal meaning (Grice, 1975). The Merriam-Webster Dictionary, The Oxford English Dictionary, and The Collins English Dictionary all adopted this definition and used the words ""opposite"" or ""contrary"" to explain the relationship between the literal and contextual meanings of irony.

However, more research into various types of ironic examples revealed that the contextual meaning of irony does not have to be ""opposite"" or ""contrary"" to the literal one. According to Sperber and Wilson (1986); Wilson and Sperber (2012), some expressions have no ""literal meaning"" to be challenged because no ""literal meaning"" is mentioned in the context, based on which they raised relevance theory and the ""echoic"" concept. They considered irony as ""an echoic use of language in which the speaker tacitly dissociates herself from an attributed utterance or thought"" (Wilson, 2006). That is, if the ""echoic use"" is incongruous in some ways, the expression can be ironic. Based on this theory, Seto (1998) put forward that there are some ""echo-markers"" like definitely, really, and indeed.

Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances. They believed that irony's true nature is a psychological activity as much as a verbal representation. The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed. When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.","sent1: Various definitions have been given to irony.
sent2: Early studies suggested that irony is the expression whose real meaning is contradictory to its literal meaning (Grice, 1975).
sent3: The Merriam-Webster Dictionary, The Oxford English Dictionary, and The Collins English Dictionary all adopted this definition and used the words ""opposite"" or ""contrary"" to explain the relationship between the literal and contextual meanings of irony.
sent4: However, more research into various types of ironic examples revealed that the contextual meaning of irony does not have to be ""opposite"" or ""contrary"" to the literal one.
sent5: According to Sperber and Wilson (1986); Wilson and Sperber (2012), some expressions have no ""literal meaning"" to be challenged because no ""literal meaning"" is mentioned in the context, based on which they raised relevance theory and the ""echoic"" concept.
sent6: They considered irony as ""an echoic use of language in which the speaker tacitly dissociates herself from an attributed utterance or thought"" (Wilson, 2006).
sent7: That is, if the ""echoic use"" is incongruous in some ways, the expression can be ironic.
sent8: Based on this theory, Seto (1998) put forward that there are some ""echo-markers"" like definitely, really, and indeed.
sent9: Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances.
sent10: They believed that irony's true nature is a psychological activity as much as a verbal representation.
sent11: The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed.
sent12: When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.","Question: How have different theories and definitions evolved to explain the nature of irony?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",How have different theories and definitions evolved to explain the nature of irony?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",9,"Various definitions have been given to irony.

Early studies suggested that irony is the expression whose real meaning is contradictory to its literal meaning (Grice, 1975).

The Merriam-Webster Dictionary, The Oxford English Dictionary, and The Collins English Dictionary all adopted this definition and used the words ""opposite"" or ""contrary"" to explain the relationship between the literal and contextual meanings of irony.

However, more research into various types of ironic examples revealed that the contextual meaning of irony does not have to be ""opposite"" or ""contrary"" to the literal one.

According to Sperber and Wilson (1986); Wilson and Sperber (2012), some expressions have no ""literal meaning"" to be challenged because no ""literal meaning"" is mentioned in the context, based on which they raised relevance theory and the ""echoic"" concept.

They considered irony as ""an echoic use of language in which the speaker tacitly dissociates herself from an attributed utterance or thought"" (Wilson, 2006).

That is, if the ""echoic use"" is incongruous in some ways, the expression can be ironic.

Based on this theory, Seto (1998) put forward that there are some ""echo-markers"" like definitely, really, and indeed.

Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances.

They believed that irony's true nature is a psychological activity as much as a verbal representation.

The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed.

When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.",invalid,,"Question:

How have different theories and definitions evolved to explain the nature of irony?

Answer:

nan"
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Spatial Convolution and Message Passing,4,"One can view spatial convolution as used in GNNs as a generalization of the convolution used in neu-ral networks such as CNNs. As an example, in the case of images, one can imagine 2D convolution as being applied to a regular grid of nodes where each node represents a pixel in the image. The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbours of the target node. Generalizing this idea to a non-regular grids leads to spatial convolution. However, different to images and regular grids, in graphs, the neighbours of each target node are unordered and can vary in number and their feature vector representation. The major challenge with this extension consists therefore in dealing with the unordered and inconsistent neighbourhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.

Directly translating the above description of convolution into a mathematical formulation leads to a valid information propagation scheme. However, such a description suffers from scalability issues due to it directly operating over the entire graph. As such modern GNNs use, what is commonly referred to as, message passing. In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbours for a number of iterations. Thereby the network is able to diffuse information throughout the graph. Consequently, the more iterations, the further outwards information is propagated throughout the graph. In the terminology of CNNs one would say that the more message passing iterations, the larger the receptive field of the convolution. Formally, one can define message passing (Grattarola and Alippi, 2021) for each time step t as two equations:

This first equation describes how messages are generated. A differentiable function ϕ generates messages m for each edge which connects nodes using the node features and edge feature present.

The above equation is the core of the message passing framework and describes how each node feature is updated. The first part consists in the application of a permutation-invariant reduction function ρ. This function aggregates all incoming messages to a node. Then another differen-tiable function ψ combines the reduced messages received with the previous state. Using these two equations one can utilize message passing for learnable layers.

The convolution layer for a GNN is then defined with a learnable weight W such that the message per edge is m t+1 i,j = x t j and the aggregation is the normalized sum of messages, i.e.

where M (i) represents the set of messages received by node i, σ is the activation function, b is the bias, and c j,i is an appropriate scaling factor, e.g., the square root of the node degree. Note how it is important for the reduction function, in this case a sum function, to be permutation-invariant as otherwise GNNs could not handle the unordered nature of graphs.

The above presented convolution layer does not allow the model to filter unimportant neighbours. Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour. A schematic depiction of the two variants of spatial convolution can be seen in Figure 1 with GAT depicted on the lower part of the figure. The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages. Just as in transformers GAT is formulated with multi-head attention. The modification to the previously presented convolution layer follows closely the common attention formulation. Formally, x t+1

where α i,j is the attention score between node i and node j and K denotes the number of concatenated heads. The attention scores are computed with

. This score is then normalized to obtain the attention score per edge α i,j = sof tmax i (r i,j ). We want to highlight here a recent development which Brody et al. (2021) simply denote as GATv2. Their main improvement aims at the fact that in the above calculation both learnable parameters a and W effectively fold into a single linear layer, thus the expressive power of the layer is less than what it could be. The fix introduced by GATv2 pulls the two parameters apart, thus achieving more expressive power while not increasing computational complexity. Taking the above description the attention score for GATv2 is modified as follows

). In both synthetic and real datasets this modification shows superior performance, which is supported by a theoretical analysis of the authors.

There are numerous modifications and extensions to the basic convolution presented here. However, for ATS models, GAT layers are dominating as the workhorse for most models. The reasoning for their dominance can be explained by the similar success that attention transformers have had in conventional neural networks for AST. We expect that GATv2 will continue this trend as it is an attractive and simple improvement for the currently dominating GAT. Although the authors of GATv2 note that it is not yet entirely clear which tasks would benefit the most from the usage of GATv2 over GAT, which will require more research and models to use GATv2.

In ATS the graphs used are in nearly all cases not homogeneous. However, the equations presented here do not work for heterogeneous graphs. The solution for this problem involves defining one convolution layer for each node type combination occurring within the graph. In the case of the already discussed sentence and word node graph there would be four possible combinations of types, and four convolution layers which would have to be defined if the graph were fully connected.

Convolution is a central aspect of GNNs, but pooling also presents an important and common operation, especially whenever GNNs are used jointly with other models. Pooling in GNNs is achieved by generating a global representation of the graph, or a subset of the graph, by pooling together features of nodes. This is usually done with some function f where f is commonly the mean, max or sum.

We want to explicitly point out to the reader that the construction of GNNs does not require special datasets. All GNN models for ATS use the common benchmark single-document and multidocument summarization datasets such as DUC 2004 or CNN/Dailymail. The only requirement for any ATS, or textual dataset, is for the designer to find an appropriate way of encoding sentences, words, subwords etc. into feature vectors, and finding a sensible way of connecting them.","sent1: One can view spatial convolution as used in GNNs as a generalization of the convolution used in neu-ral networks such as CNNs.
sent2: As an example, in the case of images, one can imagine 2D convolution as being applied to a regular grid of nodes where each node represents a pixel in the image.
sent3: The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbours of the target node.
sent4: Generalizing this idea to a non-regular grids leads to spatial convolution.
sent5: However, different to images and regular grids, in graphs, the neighbours of each target node are unordered and can vary in number and their feature vector representation.
sent6: The major challenge with this extension consists therefore in dealing with the unordered and inconsistent neighbourhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.
sent7: Directly translating the above description of convolution into a mathematical formulation leads to a valid information propagation scheme.
sent8: However, such a description suffers from scalability issues due to it directly operating over the entire graph.
sent9: As such modern GNNs use, what is commonly referred to as, message passing.
sent10: In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbours for a number of iterations.
sent11: Thereby the network is able to diffuse information throughout the graph.
sent12: Consequently, the more iterations, the further outwards information is propagated throughout the graph.
sent13: In the terminology of CNNs one would say that the more message passing iterations, the larger the receptive field of the convolution.
sent14: Formally, one can define message passing (Grattarola and Alippi, 2021) for each time step t as two equations:This first equation describes how messages are generated.
sent15: A differentiable function ϕ generates messages m for each edge which connects nodes using the node features and edge feature present.
sent16: The above equation is the core of the message passing framework and describes how each node feature is updated.
sent17: The first part consists in the application of a permutation-invariant reduction function ρ.
sent18: This function aggregates all incoming messages to a node.
sent19: Then another differen-tiable function ψ combines the reduced messages received with the previous state.
sent20: Using these two equations one can utilize message passing for learnable layers.
sent21: The convolution layer for a GNN is then defined with a learnable weight W such that the message per edge is m t+1
sent22: i,j = x t j and the aggregation is the normalized sum of messages, i.e.where M (i) represents the set of messages received by node i, σ is the activation function, b is the bias, and c j,i is an appropriate scaling factor, e.g., the square root of the node degree.
sent23: Note how it is important for the reduction function, in this case a sum function, to be permutation-invariant as otherwise GNNs could not handle the unordered nature of graphs.
sent24: The above presented convolution layer does not allow the model to filter unimportant neighbours.
sent25: Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour.
sent26: A schematic depiction of the two variants of spatial convolution can be seen in Figure 1 with GAT depicted on the lower part of the figure.
sent27: The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.
sent28: Just as in transformers GAT is formulated with multi-head attention.
sent29: The modification to the previously presented convolution layer follows closely the common attention formulation.
sent30: Formally, x t+1where α i,j is the attention score between node i and node j and K denotes the number of concatenated heads.
sent31: The attention scores are computed with.
sent32: This score is then normalized to obtain the attention score per edge α i,j = sof tmax i (r i,j ).
sent33: We want to highlight here a recent development which Brody et al. (2021) simply denote as GATv2.
sent34: Their main improvement aims at the fact that in the above calculation both learnable parameters a and W effectively fold into a single linear layer, thus the expressive power of the layer is less than what it could be.
sent35: The fix introduced by GATv2 pulls the two parameters apart, thus achieving more expressive power while not increasing computational complexity.
sent36: Taking the above description the attention score for GATv2 is modified as follows).
sent37: In both synthetic and real datasets this modification shows superior performance, which is supported by a theoretical analysis of the authors.
sent38: There are numerous modifications and extensions to the basic convolution presented here.
sent39: However, for ATS models, GAT layers are dominating as the workhorse for most models.
sent40: The reasoning for their dominance can be explained by the similar success that attention transformers have had in conventional neural networks for AST.
sent41: We expect that GATv2 will continue this trend as it is an attractive and simple improvement for the currently dominating GAT.
sent42: Although the authors of GATv2 note that it is not yet entirely clear which tasks would benefit the most from the usage of GATv2 over GAT, which will require more research and models to use GATv2.
sent43: In ATS the graphs used are in nearly all cases not homogeneous.
sent44: However, the equations presented here do not work for heterogeneous graphs.
sent45: The solution for this problem involves defining one convolution layer for each node type combination occurring within the graph.
sent46: In the case of the already discussed sentence and word node graph there would be four possible combinations of types, and four convolution layers which would have to be defined if the graph were fully connected.
sent47: Convolution is a central aspect of GNNs, but pooling also presents an important and common operation, especially whenever GNNs are used jointly with other models.
sent48: Pooling in GNNs is achieved by generating a global representation of the graph, or a subset of the graph, by pooling together features of nodes.
sent49: This is usually done with some function f where f is commonly the mean, max or sum.
sent50: We want to explicitly point out to the reader that the construction of GNNs does not require special datasets.
sent51: All GNN models for ATS use the common benchmark single-document and multidocument summarization datasets such as DUC 2004 or CNN/Dailymail.
sent52: The only requirement for any ATS, or textual dataset, is for the designer to find an appropriate way of encoding sentences, words, subwords etc. into feature vectors, and finding a sensible way of connecting them.","Question: How does spatial convolution in Graph Neural Networks (GNNs) differ from traditional convolution in neural networks, and what challenges does it address?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13","How does spatial convolution in Graph Neural Networks (GNNs) differ from traditional convolution in neural networks, and what challenges does it address?","sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",2,"One can view spatial convolution as used in GNNs as a generalization of the convolution used in neu-ral networks such as CNNs.

As an example, in the case of images, one can imagine 2D convolution as being applied to a regular grid of nodes where each node represents a pixel in the image.

The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbours of the target node.

Generalizing this idea to a non-regular grids leads to spatial convolution.

However, different to images and regular grids, in graphs, the neighbours of each target node are unordered and can vary in number and their feature vector representation.

The major challenge with this extension consists therefore in dealing with the unordered and inconsistent neighbourhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.

Directly translating the above description of convolution into a mathematical formulation leads to a valid information propagation scheme.

However, such a description suffers from scalability issues due to it directly operating over the entire graph.

As such modern GNNs use, what is commonly referred to as, message passing.

In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbours for a number of iterations.

Thereby the network is able to diffuse information throughout the graph.

Consequently, the more iterations, the further outwards information is propagated throughout the graph.

In the terminology of CNNs one would say that the more message passing iterations, the larger the receptive field of the convolution.",implement,"Spatial convolution in GNNs can be viewed as a generalization of the convolution used in neural networks such as CNNs.

For example, in the case of images, 2D convolution can be imagined as being applied to a regular grid of nodes where each node represents a pixel in the image.

The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbors of the target node.

Generalizing this idea to non-regular grids leads to spatial convolution.

However, unlike images and regular grids, in graphs, the neighbors of each target node are unordered and can vary in number and their feature vector representation.

The major challenge with this extension consists in dealing with the unordered and inconsistent neighborhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.

Directly translating this description of convolution into a mathematical formulation leads to a valid information propagation scheme.

However, such a description suffers from scalability issues due to it directly operating over the entire graph.

As such, modern GNNs use what is commonly referred to as message passing.

In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbors for a number of iterations.

Thereby, the network is able to diffuse information throughout the graph.

Consequently, the more iterations, the further outwards information is propagated throughout the graph.

In the terminology of CNNs, this means that the more message passing iterations, the larger the receptive field of the convolution.","Question:

How does spatial convolution in Graph Neural Networks (GNNs) differ from traditional convolution in neural networks, and what challenges does it address?

Answer:

Spatial convolution in GNNs can be viewed as a generalization of the convolution used in neural networks such as CNNs.

For example, in the case of images, 2D convolution can be imagined as being applied to a regular grid of nodes where each node represents a pixel in the image.

The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbors of the target node.

Generalizing this idea to non-regular grids leads to spatial convolution.

However, unlike images and regular grids, in graphs, the neighbors of each target node are unordered and can vary in number and their feature vector representation.

The major challenge with this extension consists in dealing with the unordered and inconsistent neighborhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.

Directly translating this description of convolution into a mathematical formulation leads to a valid information propagation scheme.

However, such a description suffers from scalability issues due to it directly operating over the entire graph.

As such, modern GNNs use what is commonly referred to as message passing.

In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbors for a number of iterations.

Thereby, the network is able to diffuse information throughout the graph.

Consequently, the more iterations, the further outwards information is propagated throughout the graph.

In the terminology of CNNs, this means that the more message passing iterations, the larger the receptive field of the convolution."
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,PARITY,5,"As the classic example of a language in (uniform) TC 0 but not AC 0 (Ajtai, 1983;Furst et al., 1984), PARITY is a particularly interesting case-study.Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.He also showed that softmax attention transformers cannot generate PARITY under the following two conditions: • all position-wise functions are Lipschitzcontinuous, and

• generation is defined using the KL divergence criterion in Eq. ( 5).

On the other hand, Chiang and Cholak (2022) showed that transformer encoders whose PE includes / do recognize PARITY.They give two constructions, corresponding to Hahn's two assumptions.The first has Lipschitz-continuous position-wise functions, but has high cross-entropy ( §4.3.1); as a generator, it would not meet criterion (5).The second construction uses layernorm with  N = 0, which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.

The apparent contradiction is resolved by considering the different assumptions underlying each result.The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.Empirically, several authors (Bhattamishra et al., 2020a;Delétang et al., 2023) have found that transformer encoders do not learn PAR-ITY.","sent1: As the classic example of a language in (uniform)
sent2: TC 0 but not AC 0 (Ajtai, 1983;Furst et al., 1984), PARITY is a particularly interesting case-study.
sent3: Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.
sent4: He also showed that softmax attention transformers cannot generate PARITY under the following two conditions: • all position-wise functions are Lipschitzcontinuous, and• generation is defined using the KL divergence criterion in Eq. ( 5).
sent5: On the other hand, Chiang and Cholak (2022) showed that transformer encoders whose PE includes / do recognize PARITY.They give two constructions, corresponding to Hahn's two assumptions.
sent6: The first has Lipschitz-continuous position-wise functions, but has high cross-entropy ( §4.3.1); as a generator, it would not meet criterion
sent7: (5).The second construction uses layernorm with  N = 0, which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.
sent8: The apparent contradiction is resolved by considering the different assumptions underlying each result.
sent9: The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.
sent10: Empirically, several authors (Bhattamishra et al., 2020a;Delétang et al., 2023) have found that transformer encoders do not learn PAR-ITY.","Question: What are the key findings regarding the ability of transformers to recognize the PARITY language, and how do different assumptions affect these results?
Supporting sentence: sent3, sent4, sent5, sent6, sent7, sent8, sent9","What are the key findings regarding the ability of transformers to recognize the PARITY language, and how do different assumptions affect these results?","sent3, sent4, sent5, sent6, sent7, sent8, sent9",3,"Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.

He also showed that softmax attention transformers cannot generate PARITY under the following two conditions: • all position-wise functions are Lipschitzcontinuous, and• generation is defined using the KL divergence criterion in Eq. ( 5).

On the other hand, Chiang and Cholak (2022) showed that transformer encoders whose PE includes / do recognize PARITY.They give two constructions, corresponding to Hahn's two assumptions.

The first has Lipschitz-continuous position-wise functions, but has high cross-entropy ( §4.3.1); as a generator, it would not meet criterion

(5).The second construction uses layernorm with  N = 0, which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.

The apparent contradiction is resolved by considering the different assumptions underlying each result.

The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.",implement,"Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.

Hahn (2020) also demonstrated that softmax attention transformers cannot generate PARITY under the conditions that all position-wise functions are Lipschitz continuous and generation is defined using the KL divergence criterion.

On the other hand, Chiang and Cholak (2022) showed that transformer encoders with specific positional encodings do recognize PARITY. They provide two constructions that correspond to Hahn's two assumptions.

The first construction has Lipschitz-continuous position-wise functions but exhibits high cross-entropy, meaning it would not meet the criterion as a generator.

The second construction uses layer normalization with \( N = 0 \), which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.

The apparent contradiction is resolved by considering the different assumptions underlying each result.

The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.","Question:

What are the key findings regarding the ability of transformers to recognize the PARITY language, and how do different assumptions affect these results?

Answer:

Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.

Hahn (2020) also demonstrated that softmax attention transformers cannot generate PARITY under the conditions that all position-wise functions are Lipschitz continuous and generation is defined using the KL divergence criterion.

On the other hand, Chiang and Cholak (2022) showed that transformer encoders with specific positional encodings do recognize PARITY.

They provide two constructions that correspond to Hahn's two assumptions.

The first construction has Lipschitz-continuous position-wise functions but exhibits high cross-entropy, meaning it would not meet the criterion as a generator.

The second construction uses layer normalization with \( N = 0 \), which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.

The apparent contradiction is resolved by considering the different assumptions underlying each result.

The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize."
236460241,A Survey of Code-switching: Linguistic and Social Perspectives for Language Technologies,https://www.semanticscholar.org/paper/ee6d66efc86746d42ace14db30fcbaf9d3380e25,"Code-switching, Borrowing, Transfer, Loan Translation",5,"While C-S implies active alternation between grammatical systems, borrowing does not. It is difficult to know if a lone word insertion (e.g. example (2)) constitutes a borrowing or a C-S without considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988). When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990). Similarly, what looks like complex C-S may not be perceived as switching at all. Auer (1999) distinguishes a continuum of mixing types: prototypical C-S is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community. These can look structurally identical, but the latter can be modeled as a single language (e.g. languages like Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012)) rather than the intertwining of two. Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals (in Ukraine) as 'between C-S and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate. Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other. In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009). 4.İlkokul-uİstanbul-da yap-tı-m.

primary.school-ACCİstanbul-LOC do-past-1sg. 'I finished primary school in Istanbul.'

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed. Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French. In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'. In reference French (France), there is normally no particle following the verb. The degree to which linguistic features like loan translation and transfer can be found alongside C-S is unknown.","sent1: While C-S implies active alternation between grammatical systems, borrowing does not.
sent2: It is difficult to know if a lone word insertion (e.g. example (2)) constitutes a borrowing or a C-S without considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988).
sent3: When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990).
sent4: Similarly, what looks like complex C-S may not be perceived as switching at all.
sent5: Auer (1999) distinguishes a continuum of mixing types: prototypical C-S is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community.
sent6: These can look structurally identical, but the latter can be modeled as a single language (e.g. languages like Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012)) rather than the intertwining of two.
sent7: Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals (in Ukraine) as 'between C-S and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate.
sent8: Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.
sent9: In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).
sent10: 4.İlkokul-uİstanbul-da yap-tı-m.primary.school-ACCİstanbul-LOC do-past-1sg.
sent11: 'I finished primary school in Istanbul.'
sent12: In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.
sent13: Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.
sent14: In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.
sent15: In reference French (France), there is normally no particle following the verb.
sent16: The degree to which linguistic features like loan translation and transfer can be found alongside C-S is unknown.","Question: How do loan translation and transfer differ from code-switching and borrowing in bilingual language use?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent12, sent13, sent14, sent15",How do loan translation and transfer differ from code-switching and borrowing in bilingual language use?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent12, sent13, sent14, sent15",3,"While C-S implies active alternation between grammatical systems, borrowing does not.

It is difficult to know if a lone word insertion (e.g. example (2)) constitutes a borrowing or a C-S without considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988).

When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990).

Similarly, what looks like complex C-S may not be perceived as switching at all.

Auer (1999) distinguishes a continuum of mixing types: prototypical C-S is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community.

These can look structurally identical, but the latter can be modeled as a single language (e.g. languages like Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012)) rather than the intertwining of two.

Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals (in Ukraine) as 'between C-S and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate.

Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.

In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.

In reference French (France), there is normally no particle following the verb.",implement,"Code-switching implies active alternation between grammatical systems, whereas borrowing does not.

Determining whether a lone word insertion constitutes borrowing or code-switching requires considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988).

When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990).

Similarly, what appears to be complex code-switching may not be perceived as switching at all.

Auer (1999) distinguishes a continuum of mixing types: prototypical code-switching is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community.

These can look structurally identical, but the latter can be modeled as a single language, such as Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012), rather than the intertwining of two.

Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals in Ukraine as 'between code-switching and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate.

Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.

For instance, the Turkish verb ""yapmak,"" meaning ""to do,"" adopts the Dutch meaning of ""doen"" in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent, and in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.

In reference French (France), there is normally no particle following the verb.","Question:

How do loan translation and transfer differ from code-switching and borrowing in bilingual language use?

Answer:

Code-switching implies active alternation between grammatical systems, whereas borrowing does not.

Determining whether a lone word insertion constitutes borrowing or code-switching requires considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988).

When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990).

Similarly, what appears to be complex code-switching may not be perceived as switching at all.

Auer (1999) distinguishes a continuum of mixing types: prototypical code-switching is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community.

These can look structurally identical, but the latter can be modeled as a single language, such as Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012), rather than the intertwining of two.

Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals in Ukraine as 'between code-switching and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate.

Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.

For instance, the Turkish verb ""yapmak,"" meaning ""to do,"" adopts the Dutch meaning of ""doen"" in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent, and in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.

In reference French (France), there is normally no particle following the verb."
254877753,Towards Reasoning in Large Language Models: A Survey,https://www.semanticscholar.org/paper/db4ab91d5675c37795e719e997a2827d3d83cd45,What is Reasoning?,8,"Reasoning is the process of thinking about something in a logical and systematic way, using evidence and past experiences to reach a conclusion or make a decision (Wason and Johnson-Laird, 1972;Wason, 1968;Galotti, 1989;Fagin et al., 2004;McHugh and Way, 2018). Reasoning involves making inferences, evaluating arguments, and drawing logical conclusions based on available information. Although ""reasoning"" is a term that is commonly used in literature and daily life, it is also an abstract concept that can refer to many things. To help the reader better understand this concept, we summarize several main categories of reasoning that are commonly recognized:

Deductive reasoning. Deductive reasoning is a type of reasoning in which a conclusion is drawn based on the truth of the premises. In deductive reasoning, the conclusion must necessarily follow from the premises, meaning that if the premises are true, the conclusion must also be true. For example:

• Premise: All mammals have kidneys. • Premise: All whales are mammals. • Conclusion: All whales have kidneys.

Inductive reasoning. Inductive reasoning is a type of reasoning in which a conclusion is drawn based on observations or evidence. The conclusion is likely to be true based on the available evidence, but it is not necessarily certain. For example:

• Observation: Every time we see a creature with wings, it is a bird. • Observation: We see a creature with wings. • Conclusion: The creature is likely to be a bird.

Abductive reasoning. Abductive reasoning is a type of reasoning in which a conclusion is drawn based on the best explanation for a given set of observations. The conclusion is the most likely explanation based on the available evidence, but it is not necessarily certain. For example:

• Observation: The car cannot start and there is a puddle of liquid under the engine. • Conclusion: The most likely explanation is that the car has a leak in the radiator.

Other types of reasoning include analogical reasoning, which involves making comparisons between two or more things in order to make inferences or arrive at conclusions; causal reasoning, which involves identifying and understanding the causes and effects of events or phenomena; and probabilistic reasoning, which involves making decisions or arriving at conclusions based on the likelihood or probability of certain outcomes.

Formal Reasoning vs Informal Reasoning. Formal reasoning is a systematic and logical process that follows a set of rules and principles, often used in mathematics and logic. Informal reasoning is a less structured approach that relies on intuition, experience, and common sense to draw conclusions and solve problems, and is often used in everyday life. Formal reasoning is more structured and reliable, while informal reasoning is more adaptable and open-ended, but may also be less reliable. We refer the reader to Galotti (1989); Bronkhorst et al. (2020) for a detailed distinction between them.

Reasoning in Language Models. The concept of reasoning in language models has been around for some time, but there is not a clear definition of what it entails. In the literature, the term ""reasoning"" is often used to refer to informal reasoning, although it is not always explicitly stated that it is informal (Cobbe et al., 2021;Wei et al., 2022b, inter alia). Different forms of reasoning may be used depending on the task, benchmark, or method being used, e.g., deductive reasoning (Cobbe et al., 2021;Creswell et al., 2022;Han et al., 2022b, inter alia), inductive reasoning Misra et al., 2022, inter alia) or abductive reasoning (Wiegreffe et al., 2022;Lampinen et al., 2022;Jung et al., 2022, inter alia). In this paper, we encompass various forms of reasoning, with a particular focus on ""informal deductive reasoning"" in large language models since it is a widely used form in which the conclusion is guaranteed to be true as long as the premises are true.","sent1: Reasoning is the process of thinking about something in a logical and systematic way, using evidence and past experiences to reach a conclusion or make a decision (Wason and Johnson-Laird, 1972;Wason, 1968;Galotti, 1989;Fagin et al., 2004;McHugh and Way, 2018).
sent2: Reasoning involves making inferences, evaluating arguments, and drawing logical conclusions based on available information.
sent3: Although ""reasoning"" is a term that is commonly used in literature and daily life, it is also an abstract concept that can refer to many things.
sent4: To help the reader better understand this concept, we summarize several main categories of reasoning that are commonly recognized:Deductive reasoning.
sent5: Deductive reasoning is a type of reasoning in which a conclusion is drawn based on the truth of the premises.
sent6: In deductive reasoning, the conclusion must necessarily follow from the premises, meaning that if the premises are true, the conclusion must also be true.
sent7: For example:• Premise: All mammals have kidneys.
sent8: • Premise: All whales are mammals.
sent9: • Conclusion: All whales have kidneys.
sent10: Inductive reasoning. Inductive reasoning is a type of reasoning in which a conclusion is drawn based on observations or evidence.
sent11: The conclusion is likely to be true based on the available evidence, but it is not necessarily certain.
sent12: For example:• Observation: Every time we see a creature with wings, it is a bird.
sent13: • Observation: We see a creature with wings.
sent14: • Conclusion: The creature is likely to be a bird.
sent15: Abductive reasoning. Abductive reasoning is a type of reasoning in which a conclusion is drawn based on the best explanation for a given set of observations.
sent16: The conclusion is the most likely explanation based on the available evidence, but it is not necessarily certain.
sent17: For example:• Observation: The car cannot start and there is a puddle of liquid under the engine.
sent18: • Conclusion: The most likely explanation is that the car has a leak in the radiator.
sent19: Other types of reasoning include analogical reasoning, which involves making comparisons between two or more things in order to make inferences or arrive at conclusions; causal reasoning, which involves identifying and understanding the causes and effects of events or phenomena; and probabilistic reasoning, which involves making decisions or arriving at conclusions based on the likelihood or probability of certain outcomes.
sent20: Formal Reasoning vs Informal Reasoning.
sent21: Formal reasoning is a systematic and logical process that follows a set of rules and principles, often used in mathematics and logic.
sent22: Informal reasoning is a less structured approach that relies on intuition, experience, and common sense to draw conclusions and solve problems, and is often used in everyday life.
sent23: Formal reasoning is more structured and reliable, while informal reasoning is more adaptable and open-ended, but may also be less reliable.
sent24: We refer the reader to Galotti (1989); Bronkhorst et al. (2020) for a detailed distinction between them.
sent25: Reasoning in Language Models. The concept of reasoning in language models has been around for some time, but there is not a clear definition of what it entails.
sent26: In the literature, the term ""reasoning"" is often used to refer to informal reasoning, although it is not always explicitly stated that it is informal (Cobbe et al., 2021;Wei et al., 2022b, inter alia).
sent27: Different forms of reasoning may be used depending on the task, benchmark, or method being used, e.g., deductive reasoning (Cobbe et al., 2021;Creswell et al., 2022;Han et al., 2022b, inter alia), inductive reasoning Misra et al., 2022, inter alia) or abductive reasoning (Wiegreffe et al., 2022;Lampinen et al., 2022;Jung et al., 2022, inter alia).
sent28: In this paper, we encompass various forms of reasoning, with a particular focus on ""informal deductive reasoning"" in large language models since it is a widely used form in which the conclusion is guaranteed to be true as long as the premises are true.","Question: What are the main categories of reasoning, and how do they differ from each other?

Supporting sentence: sent4, sent5, sent6, sent10, sent11, sent15, sent16, sent19, sent20, sent21, sent22, sent23","What are the main categories of reasoning, and how do they differ from each other?","sent4, sent5, sent6, sent10, sent11, sent15, sent16, sent19, sent20, sent21, sent22, sent23",1,"To help the reader better understand this concept, we summarize several main categories of reasoning that are commonly recognized:Deductive reasoning.

Deductive reasoning is a type of reasoning in which a conclusion is drawn based on the truth of the premises.

In deductive reasoning, the conclusion must necessarily follow from the premises, meaning that if the premises are true, the conclusion must also be true.

Inductive reasoning. Inductive reasoning is a type of reasoning in which a conclusion is drawn based on observations or evidence.

The conclusion is likely to be true based on the available evidence, but it is not necessarily certain.

Abductive reasoning. Abductive reasoning is a type of reasoning in which a conclusion is drawn based on the best explanation for a given set of observations.

The conclusion is the most likely explanation based on the available evidence, but it is not necessarily certain.

Other types of reasoning include analogical reasoning, which involves making comparisons between two or more things in order to make inferences or arrive at conclusions; causal reasoning, which involves identifying and understanding the causes and effects of events or phenomena; and probabilistic reasoning, which involves making decisions or arriving at conclusions based on the likelihood or probability of certain outcomes.

Formal Reasoning vs Informal Reasoning.

Formal reasoning is a systematic and logical process that follows a set of rules and principles, often used in mathematics and logic.

Informal reasoning is a less structured approach that relies on intuition, experience, and common sense to draw conclusions and solve problems, and is often used in everyday life.

Formal reasoning is more structured and reliable, while informal reasoning is more adaptable and open-ended, but may also be less reliable.",implement,"Several main categories of reasoning that are commonly recognized include deductive reasoning.

Deductive reasoning is a type of reasoning in which a conclusion is drawn based on the truth of the premises.

In deductive reasoning, the conclusion must necessarily follow from the premises, meaning that if the premises are true, the conclusion must also be true.

Inductive reasoning, on the other hand, is a type of reasoning in which a conclusion is drawn based on observations or evidence.

The conclusion is likely to be true based on the available evidence, but it is not necessarily certain.

Abductive reasoning is a type of reasoning in which a conclusion is drawn based on the best explanation for a given set of observations.

The conclusion is the most likely explanation based on the available evidence, but it is not necessarily certain.

Other types of reasoning include analogical reasoning, which involves making comparisons between two or more things to make inferences or arrive at conclusions; causal reasoning, which involves identifying and understanding the causes and effects of events or phenomena; and probabilistic reasoning, which involves making decisions or arriving at conclusions based on the likelihood or probability of certain outcomes.

Formal reasoning involves the use of structured, logical processes to arrive at conclusions, often following strict rules and principles. In contrast, informal reasoning relies on more flexible, heuristic approaches that may not adhere to formal logical structures.

Formal reasoning is a systematic and logical process that follows a set of rules and principles, often used in mathematics and logic.

Informal reasoning, on the other hand, is a less structured approach that relies on intuition, experience, and common sense to draw conclusions and solve problems, and is often used in everyday life.

Formal reasoning is more structured and reliable, while informal reasoning is more adaptable and open-ended, but may also be less reliable.","Question:

What are the main categories of reasoning, and how do they differ from each other?

Answer:

Several main categories of reasoning that are commonly recognized include deductive reasoning.

Deductive reasoning is a type of reasoning in which a conclusion is drawn based on the truth of the premises.

In deductive reasoning, the conclusion must necessarily follow from the premises, meaning that if the premises are true, the conclusion must also be true.

Inductive reasoning, on the other hand, is a type of reasoning in which a conclusion is drawn based on observations or evidence.

The conclusion is likely to be true based on the available evidence, but it is not necessarily certain.

Abductive reasoning is a type of reasoning in which a conclusion is drawn based on the best explanation for a given set of observations.

The conclusion is the most likely explanation based on the available evidence, but it is not necessarily certain.

Other types of reasoning include analogical reasoning, which involves making comparisons between two or more things to make inferences or arrive at conclusions; causal reasoning, which involves identifying and understanding the causes and effects of events or phenomena; and probabilistic reasoning, which involves making decisions or arriving at conclusions based on the likelihood or probability of certain outcomes.

Formal reasoning involves the use of structured, logical processes to arrive at conclusions, often following strict rules and principles.

In contrast, informal reasoning relies on more flexible, heuristic approaches that may not adhere to formal logical structures.

Formal reasoning is a systematic and logical process that follows a set of rules and principles, often used in mathematics and logic.

Informal reasoning, on the other hand, is a less structured approach that relies on intuition, experience, and common sense to draw conclusions and solve problems, and is often used in everyday life.

Formal reasoning is more structured and reliable, while informal reasoning is more adaptable and open-ended, but may also be less reliable."
252992688,A Survey of Active Learning for Natural Language Processing,https://www.semanticscholar.org/paper/3cd98a010b36832fc2bd8368cd4f34c72cd0ac6f,Density,4,"With the motivation to avoid outliers, density-based strategies prefer instances that are more representative of the unlabeled set. Selecting by n-gram or word counts (Ambati et al., 2010a;Zhao et al., 2020b) can be regarded as a simple way of density measurement. Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).","sent1: With the motivation to avoid outliers, density-based strategies prefer instances that are more representative of the unlabeled set.
sent2: Selecting by n-gram or word counts (Ambati et al., 2010a;Zhao et al., 2020b) can be regarded as a simple way of density measurement.
sent3: Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).","Question: What are the common methods for measuring density in active learning for NLP, and what are their advantages and disadvantages?

Supporting sentence: sent1, sent2, sent3","What are the common methods for measuring density in active learning for NLP, and what are their advantages and disadvantages?","sent1, sent2, sent3",2,"With the motivation to avoid outliers, density-based strategies prefer instances that are more representative of the unlabeled set.

Selecting by n-gram or word counts (Ambati et al., 2010a;Zhao et al., 2020b) can be regarded as a simple way of density measurement.

Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).",implement,"Density-based strategies in active learning prefer instances that are more representative of the unlabeled set to avoid outliers.

Selecting by n-gram or word counts (Ambati et al., 2010a; Zhao et al., 2020b) can be regarded as a simple way of density measurement.

Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998). While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., 2009).","Question:

What are the common methods for measuring density in active learning for NLP, and what are their advantages and disadvantages?

Answer:

Density-based strategies in active learning prefer instances that are more representative of the unlabeled set to avoid outliers.

Selecting by n-gram or word counts (Ambati et al., 2010a; Zhao et al., 2020b) can be regarded as a simple way of density measurement.

Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998).

While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., 2009)."
253736389,Transformers for Tabular Data Representation: A Survey of Models and Applications,https://www.semanticscholar.org/paper/18ff1542d5a2a4490c7b3f21522bf1343889f700,Training Datasets,5,"We present both the datasets used for pre-training and for fine-tuning in the downstream tasks. Pre-training tables are not annotated, in some cases scraped from the web, while data used for fine-tuning have task-dependent annotation labels. The datasets consist of tables and their context, such as table metadata, surrounding texts, claims or questions. To construct large pre-training datasets and in an attempt to reduce bias, multiple sources can be used, independently of the target task at hand. For instance, unlike TAPAS (Herzig et al., 2020), which only uses Wikipedia Tables for QA, and TABULARNET , which only uses Spreadsheets for TMP, TABERT  uses Wikipedia Tables and WDC  for SP; GRAPPA uses Wikipedia Tables, Spider, and WikiSQL for SP; MMR (Kostić et al., 2021) uses NQ, OTT-QA, and WikiSQL for TR; MATE  uses Wikipedia Tables and HybridQA for QA; and TUTA  uses Wikipedia Tables, WDC, and spreadsheets for TMP. In general, it is recommended to utilize different data sources for pre-training to ensure covering different kinds and content, and thus, improve the scope of representations. For instance, Wikipedia tables has a large number of relational tables (Bhagavatula et al., 2015), while WDC and Spreadsheets include also entity tables and spreadsheets with complex structure. Table 2 summarizes the main characteristics for the most common datasets. We mark the tasks for which the dataset has been used by ✔ under the column ''Task''. We note that the top four datasets are mostly used for pre-training, while the others can be used for fine-tuning as well since they include annotations for the target task, for example, questions/answers for QA. The column ''Large Tables'' is a binary indicator, where ✔ and ✘ indicate whether or not the tabular corpus include large tables and hence whether or not some pre-processing is needed to reduce table content to meet the limits of the transformer architecture (512 input tokens in most cases). Some works, such as TABERT, TAPEX (Liu et al., 2021a), and CLTR (Pan et al., 2021), apply filtering in any case to reduce noisy input. Finally, the ''Context'' column describes additional text that come with the tables. This can be text describing the table, such as caption or title of the document containing the table; table metadata, such as table orientation, header row, and keys; or questions and claims that can be addressed with the table.","sent1: We present both the datasets used for pre-training and for fine-tuning in the downstream tasks.
sent2: Pre-training tables are not annotated, in some cases scraped from the web, while data used for fine-tuning have task-dependent annotation labels.
sent3: The datasets consist of tables and their context, such as table metadata, surrounding texts, claims or questions.
sent4: To construct large pre-training datasets and in an attempt to reduce bias, multiple sources can be used, independently of the target task at hand.
sent5: For instance, unlike TAPAS (Herzig et al., 2020), which only uses Wikipedia Tables for QA, and TABULARNET , which only uses Spreadsheets for TMP, TABERT  uses Wikipedia Tables and WDC  for SP; GRAPPA uses Wikipedia Tables, Spider, and WikiSQL for SP; MMR (Kostić et al., 2021) uses NQ, OTT-QA, and WikiSQL for TR; MATE  uses Wikipedia Tables and HybridQA for QA; and TUTA  uses Wikipedia Tables, WDC, and spreadsheets for TMP.
sent6: In general, it is recommended to utilize different data sources for pre-training to ensure covering different kinds and content, and thus, improve the scope of representations.
sent7: For instance, Wikipedia tables has a large number of relational tables (Bhagavatula et al., 2015), while WDC and Spreadsheets include also entity tables and spreadsheets with complex structure.
sent8: Table 2 summarizes the main characteristics for the most common datasets.
sent9: We mark the tasks for which the dataset has been used by ✔ under the column ''Task''.
sent10: We note that the top four datasets are mostly used for pre-training, while the others can be used for fine-tuning as well since they include annotations for the target task, for example, questions/answers for QA.
sent11: The column ''Large Tables'' is a binary indicator, where ✔ and ✘ indicate whether or not the tabular corpus include large tables and hence whether or not some pre-processing is needed to reduce table content to meet the limits of the transformer architecture (512 input tokens in most cases).
sent12: Some works, such as TABERT, TAPEX (Liu et al., 2021a), and CLTR (Pan et al., 2021), apply filtering in any case to reduce noisy input.
sent13: Finally, the ''Context'' column describes additional text that come with the tables.
sent14: This can be text describing the table, such as caption or title of the document containing the table; table metadata, such as table orientation, header row, and keys; or questions and claims that can be addressed with the table.","Question: What are the key differences in the datasets used for pre-training and fine-tuning in tabular data representation models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent10",What are the key differences in the datasets used for pre-training and fine-tuning in tabular data representation models?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent10",3,"We present both the datasets used for pre-training and for fine-tuning in the downstream tasks.

Pre-training tables are not annotated, in some cases scraped from the web, while data used for fine-tuning have task-dependent annotation labels.

The datasets consist of tables and their context, such as table metadata, surrounding texts, claims or questions.

To construct large pre-training datasets and in an attempt to reduce bias, multiple sources can be used, independently of the target task at hand.

For instance, unlike TAPAS (Herzig et al., 2020), which only uses Wikipedia Tables for QA, and TABULARNET , which only uses Spreadsheets for TMP, TABERT  uses Wikipedia Tables and WDC  for SP; GRAPPA uses Wikipedia Tables, Spider, and WikiSQL for SP; MMR (Kostić et al., 2021) uses NQ, OTT-QA, and WikiSQL for TR; MATE  uses Wikipedia Tables and HybridQA for QA; and TUTA  uses Wikipedia Tables, WDC, and spreadsheets for TMP.

In general, it is recommended to utilize different data sources for pre-training to ensure covering different kinds and content, and thus, improve the scope of representations.

For instance, Wikipedia tables has a large number of relational tables (Bhagavatula et al., 2015), while WDC and Spreadsheets include also entity tables and spreadsheets with complex structure.

We note that the top four datasets are mostly used for pre-training, while the others can be used for fine-tuning as well since they include annotations for the target task, for example, questions/answers for QA.",implement,"The datasets used for pre-training and for fine-tuning in downstream tasks are presented.

Pre-training tables are not annotated and are sometimes scraped from the web, while data used for fine-tuning have task-dependent annotation labels.

The datasets consist of tables and their context, such as table metadata, surrounding texts, claims, or questions.

To construct large pre-training datasets and reduce bias, multiple sources can be used independently of the target task at hand.

For instance, unlike TAPAS (Herzig et al., 2020), which only uses Wikipedia Tables for QA, and TABULARNET, which only uses Spreadsheets for TMP, TABERT uses Wikipedia Tables and WDC for SP; GRAPPA uses Wikipedia Tables, Spider, and WikiSQL for SP; MMR (Kostić et al., 2021) uses NQ, OTT-QA, and WikiSQL for TR; MATE uses Wikipedia Tables and HybridQA for QA; and TUTA uses Wikipedia Tables, WDC, and spreadsheets for TMP.

In general, it is recommended to utilize different data sources for pre-training to ensure covering different kinds and content, and thus, improve the scope of representations.

For instance, Wikipedia tables contain a large number of relational tables (Bhagavatula et al., 2015), while WDC and Spreadsheets also include entity tables and spreadsheets with complex structures.

The top four datasets are mostly used for pre-training, while the others can be used for fine-tuning as well since they include annotations for the target task, for example, questions/answers for QA.","Question:

What are the key differences in the datasets used for pre-training and fine-tuning in tabular data representation models?

Answer:

The datasets used for pre-training and for fine-tuning in downstream tasks are presented.

Pre-training tables are not annotated and are sometimes scraped from the web, while data used for fine-tuning have task-dependent annotation labels.

The datasets consist of tables and their context, such as table metadata, surrounding texts, claims, or questions.

To construct large pre-training datasets and reduce bias, multiple sources can be used independently of the target task at hand.

For instance, unlike TAPAS (Herzig et al., 2020), which only uses Wikipedia Tables for QA, and TABULARNET, which only uses Spreadsheets for TMP, TABERT uses Wikipedia Tables and WDC for SP; GRAPPA uses Wikipedia Tables, Spider, and WikiSQL for SP; MMR (Kostić et al., 2021) uses NQ, OTT-QA, and WikiSQL for TR; MATE uses Wikipedia Tables and HybridQA for QA; and TUTA uses Wikipedia Tables, WDC, and spreadsheets for TMP.

In general, it is recommended to utilize different data sources for pre-training to ensure covering different kinds and content, and thus, improve the scope of representations.

For instance, Wikipedia tables contain a large number of relational tables (Bhagavatula et al., 2015), while WDC and Spreadsheets also include entity tables and spreadsheets with complex structures.

The top four datasets are mostly used for pre-training, while the others can be used for fine-tuning as well since they include annotations for the target task, for example, questions/answers for QA."
252762171,"The Lifecycle of ""Facts"": A Survey of Social Bias in Knowledge Graphs",https://www.semanticscholar.org/paper/8d74c7cde3ec806546c09274a968b87620442396,Triples: Crowd-Sourcing of Facts,4,"Popular large-scale KGs, like Wikidata (Vrandecic and Krötzsch, 2014) and DBpedia (Auer et al., 2007) are the products of continuous crowdsourcing efforts. Both of these examples are closely related to Wikipedia, where the top five languages (English, Cebuano, German, Swedish, and French) constitute 35% of all articles on this platform. 3 It can be said that Wikipedia is Euro-centric in tendency. Moreover, the majority of authors are white males. 4 As a result, the data transport a particular homogeneous set of interests and knowledge (Beytía et al., 2022;Wagner et al., 2015). This sampling bias affects the geospatial coverage of information (Janowicz et al., 2018) and leads to higher barriers for female personalities to receive a biographic entry (Beytía et al., 2022). In an experiment, Demartini (2019) asked crowd contributors to provide a factual answer to the (politically charged) question of whether or not Catalonia is a part of Spain. The diverging responses indicated that participants' beliefs of what counts as true differed largely. This is an example of bias that is beyond a subliminal psychological level. In this case, structural aspects like consumed media and social discourse play an important role. To counter this problem, Demartini (2019) suggests actively asking contributors for evidence supporting their statements, as well as keeping track of their demographic backgrounds. This makes underlying motivations and possible sources for bias traceable.","sent1: Popular large-scale KGs, like Wikidata (Vrandecic and Krötzsch, 2014) and DBpedia (Auer et al., 2007) are the products of continuous crowdsourcing efforts.
sent2: Both of these examples are closely related to Wikipedia, where the top five languages (English, Cebuano, German, Swedish, and French) constitute 35% of all articles on this platform.
sent3: 3 It can be said that Wikipedia is Euro-centric in tendency.
sent4: Moreover, the majority of authors are white males.
sent5: 4 As a result, the data transport a particular homogeneous set of interests and knowledge (Beytía et al., 2022;Wagner et al., 2015).
sent6: This sampling bias affects the geospatial coverage of information (Janowicz et al., 2018) and leads to higher barriers for female personalities to receive a biographic entry (Beytía et al., 2022).
sent7: In an experiment, Demartini (2019) asked crowd contributors to provide a factual answer to the (politically charged) question of whether or not Catalonia is a part of Spain.
sent8: The diverging responses indicated that participants' beliefs of what counts as true differed largely.
sent9: This is an example of bias that is beyond a subliminal psychological level.
sent10: In this case, structural aspects like consumed media and social discourse play an important role.
sent11: To counter this problem, Demartini (2019) suggests actively asking contributors for evidence supporting their statements, as well as keeping track of their demographic backgrounds.
sent12: This makes underlying motivations and possible sources for bias traceable.","Question: How does the demographic composition of Wikipedia authors influence the biases in large-scale knowledge graphs like Wikidata and DBpedia?

Supporting sentence: sent4, sent5, sent6",How does the demographic composition of Wikipedia authors influence the biases in large-scale knowledge graphs like Wikidata and DBpedia?,"sent4, sent5, sent6",9,"Moreover, the majority of authors are white males.

4 As a result, the data transport a particular homogeneous set of interests and knowledge (Beytía et al., 2022;Wagner et al., 2015).

This sampling bias affects the geospatial coverage of information (Janowicz et al., 2018) and leads to higher barriers for female personalities to receive a biographic entry (Beytía et al., 2022).",invalid,,"Question:

How does the demographic composition of Wikipedia authors influence the biases in large-scale knowledge graphs like Wikidata and DBpedia?

Answer:

nan"
232320384,A Survey on Multimodal Disinformation Detection,https://www.semanticscholar.org/paper/71d2dc1fc38e0c48c865de5f5c023ccf7c5ad018,Network and Temporal Information,10,"The rationale for leveraging network information stems from early work (Shao et al., 2018;Vosoughi et al., 2018a) that showed that propagation and interaction networks of fake news are deeper and wider than those of real news. Vosoughi et al. (2018a) further found that fake information spreads faster than factual one, thus advocating for the use of temporal information.

Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts) and they can be analyzed at different scales (e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019). Shu et al. (2020) tackled the fake news classification task by proposing an approach based on hierarchical propagation networks. At both micro-and macro-scale, they extracted and jointly considered network features, temporal features, and linguistic features. Experiments on PolitiFact and GossipCop datasets revealed that temporal features have maximum contribution, followed by network and linguistic features. Shu et al. (2019) provided one of the most thorough multimodal frameworks for fake news classification. Their experimental results suggest that social context (i.e., network-derived) features are more informative than news content ones. Vosoughi et al. (2017) proposed Rumor Gauge, a system that jointly exploits temporal and propagation features, in conjunction with linguistic and user credibility features, for checking the veracity of rumors. In particular, Rumor Gauge leverages text, and network propagation. The temporal modality does not directly provide features, but is instead considered by recomputing all other features at regular time steps, thus yielding multiple time series. Results by Vosoughi et al. (2017) and Kwon et al. (2017) also demonstrated that the contribution of the different data modalities change over time.

To mitigate the ""cold start"" problem of propagation-based early detection of fake news, Liu and Wu (2018) proposed an approach that is primarily based on user and temporal information. First, they built a propagation path of each news as a time series of user representations. The time series for a given news only contains the ordered representations of those users that shared such news. Then, they learned two vector representations of each propagation path via GRUs and CNNs, respectively. Zannettou et al. (2018) analyzed different aspects of memes, such as how they evolve and propagate in different mainstream and fringe web communities, and variants of memes that propa-gate. Finally, Nguyen et al. (2020) proposed Factual News Graph (FANG) to exploit the social structure and the engagement patterns of users for fake news detection.","sent1: The rationale for leveraging network information stems from early work (Shao et al., 2018;Vosoughi et al., 2018a) that showed that propagation and interaction networks of fake news are deeper and wider than those of real news.
sent2: Vosoughi et al. (2018a) further found that fake information spreads faster than factual one, thus advocating for the use of temporal information.
sent3: Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts)
sent4: and they can be analyzed at different scales
sent5: (e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019).
sent6: Shu et al. (2020) tackled the fake news classification task by proposing an approach based on hierarchical propagation networks.
sent7: At both micro-and macro-scale, they extracted and jointly considered network features, temporal features, and linguistic features.
sent8: Experiments on PolitiFact and GossipCop datasets revealed that temporal features have maximum contribution, followed by network and linguistic features.
sent9: Shu et al. (2019) provided one of the most thorough multimodal frameworks for fake news classification.
sent10: Their experimental results suggest that social context (i.e., network-derived) features are more informative than news content ones.
sent11: Vosoughi et al. (2017) proposed Rumor Gauge, a system that jointly exploits temporal and propagation features, in conjunction with linguistic and user credibility features, for checking the veracity of rumors.
sent12: In particular, Rumor Gauge leverages text, and network propagation.
sent13: The temporal modality does not directly provide features, but is instead considered by recomputing all other features at regular time steps, thus yielding multiple time series.
sent14: Results by Vosoughi et al. (2017) and Kwon et al. (2017) also demonstrated that the contribution of the different data modalities change over time.
sent15: To mitigate the ""cold start"" problem of propagation-based early detection of fake news, Liu and Wu (2018) proposed an approach that is primarily based on user and temporal information.
sent16: First, they built a propagation path of each news as a time series of user representations.
sent17: The time series for a given news only contains the ordered representations of those users that shared such news.
sent18: Then, they learned two vector representations of each propagation path via GRUs and CNNs, respectively.
sent19: Zannettou et al. (2018) analyzed different aspects of memes, such as how they evolve and propagate in different mainstream and fringe web communities, and variants of memes that propa-gate.
sent20: Finally, Nguyen et al. (2020) proposed Factual News Graph (FANG) to exploit the social structure and the engagement patterns of users for fake news detection.","Question: How is temporal information utilized in the detection and classification of fake news?

Supporting sentence: sent2, sent7, sent8, sent11, sent13, sent14, sent15, sent16, sent17, sent18",How is temporal information utilized in the detection and classification of fake news?,"sent2, sent7, sent8, sent11, sent13, sent14, sent15, sent16, sent17, sent18",9,"Vosoughi et al. (2018a) further found that fake information spreads faster than factual one, thus advocating for the use of temporal information.

At both micro-and macro-scale, they extracted and jointly considered network features, temporal features, and linguistic features.

Experiments on PolitiFact and GossipCop datasets revealed that temporal features have maximum contribution, followed by network and linguistic features.

Vosoughi et al. (2017) proposed Rumor Gauge, a system that jointly exploits temporal and propagation features, in conjunction with linguistic and user credibility features, for checking the veracity of rumors.

The temporal modality does not directly provide features, but is instead considered by recomputing all other features at regular time steps, thus yielding multiple time series.

Results by Vosoughi et al. (2017) and Kwon et al. (2017) also demonstrated that the contribution of the different data modalities change over time.

To mitigate the ""cold start"" problem of propagation-based early detection of fake news, Liu and Wu (2018) proposed an approach that is primarily based on user and temporal information.

First, they built a propagation path of each news as a time series of user representations.

The time series for a given news only contains the ordered representations of those users that shared such news.

Then, they learned two vector representations of each propagation path via GRUs and CNNs, respectively.",invalid,,"Question:

How is temporal information utilized in the detection and classification of fake news?

Answer:

nan"
252200083,"A Survey in Automatic Irony Processing: Linguistic, Cognitive, and Multi-X Perspectives",https://www.semanticscholar.org/paper/77696f90afa79ac06ea58abcc91bf5e10f72b934,New Tasks: Inspiration from Sarcasm,6,"Compared to sarcasm, irony is rarely seen as a term in NLP conferences. Recently we have witnessed great improvements in sarcasm processing and in this part we will discuss how new tasks in sarcasm could motivate irony research.

Data Collection As discussed, datasets are highly dependent on hashtags as a signal to extract ironical expressions. Shmueli et al. (2020) proposed an algorithm to detect sarcastic tweets from a thread based on exterior cue tweets. A distant supervision based method for extracting ironies from platforms is crucial, given ironies in conversational contexts are central topic in the future.

Intended and Perceived Irony Oprea and Magdy (2019) explored how author profiling affected the perceived sarcasm (manual labelling) versus the intended sarcasm (hashtags), and verified the difference between both. Further, Oprea and Magdy (2020) introduced iSarcasm dataset which divided intended sarcasms and perceived sarcasms. The state-of-the-art sarcasm detection models performed obviously worse than human evaluation on this dataset. Future work could focus on multimodal perceived and intended irony, especially across various cultures.

Target Identification Sarcasm target identification was firstly proposed in Joshi et al. (2018), in which sarcasm targets were classified as one target, several targets and outside. Patro et al. (2019) introduced sociolinguistic features and a deep learning framework, and improved target identification by a lot. For irony processing, most ironical expressions do not equip a specific target in itself as previously discussed. However, its ironical effects are likely in dialogue or visually grounded environment, which encourages us to enhance irony datasets in aforementioned ways.

Irony Explanation Irony, according to the definition, have opposite real meanings to literal meanings. However, this does not mean adding a single negation could interpret ironies well. Kumar et al. (2022) proposed a new task, sarcasm explanation in dialogue. Irony explanation might encounter more complex problems due to relatively low proportion of targets. Still, we should include irony explanation as a branch of multimodal irony processing like Desai et al. (2021).","sent1: Compared to sarcasm, irony is rarely seen as a term in NLP conferences.
sent2: Recently we have witnessed great improvements in sarcasm processing and in this part we will discuss how new tasks in sarcasm could motivate irony research.
sent3: Data Collection As discussed, datasets are highly dependent on hashtags as a signal to extract ironical expressions.
sent4: Shmueli et al. (2020) proposed an algorithm to detect sarcastic tweets from a thread based on exterior cue tweets.
sent5: A distant supervision based method for extracting ironies from platforms is crucial, given ironies in conversational contexts are central topic in the future.
sent6: Intended and Perceived Irony Oprea and Magdy (2019) explored how author profiling affected the perceived sarcasm (manual labelling) versus the intended sarcasm (hashtags), and verified the difference between both.
sent7: Further, Oprea and Magdy (2020) introduced iSarcasm dataset which divided intended sarcasms and perceived sarcasms.
sent8: The state-of-the-art sarcasm detection models performed obviously worse than human evaluation on this dataset.
sent9: Future work could focus on multimodal perceived and intended irony, especially across various cultures.
sent10: Target Identification Sarcasm target identification was firstly proposed in Joshi et al. (2018), in which sarcasm targets were classified as one target, several targets and outside.
sent11: Patro et al. (2019) introduced sociolinguistic features and a deep learning framework, and improved target identification by a lot.
sent12: For irony processing, most ironical expressions do not equip a specific target in itself as previously discussed.
sent13: However, its ironical effects are likely in dialogue or visually grounded environment, which encourages us to enhance irony datasets in aforementioned ways.
sent14: Irony Explanation Irony, according to the definition, have opposite real meanings to literal meanings.
sent15: However, this does not mean adding a single negation could interpret ironies well.
sent16: Kumar et al. (2022) proposed a new task, sarcasm explanation in dialogue.
sent17: Irony explanation might encounter more complex problems due to relatively low proportion of targets.
sent18: Still, we should include irony explanation as a branch of multimodal irony processing like Desai et al. (2021).","Question: How can advancements in sarcasm processing inspire new tasks and methodologies for irony research in NLP?

Supporting sentence: sent2, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18",How can advancements in sarcasm processing inspire new tasks and methodologies for irony research in NLP?,"sent2, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18",6,"Recently we have witnessed great improvements in sarcasm processing and in this part we will discuss how new tasks in sarcasm could motivate irony research.

A distant supervision based method for extracting ironies from platforms is crucial, given ironies in conversational contexts are central topic in the future.

Intended and Perceived Irony Oprea and Magdy (2019) explored how author profiling affected the perceived sarcasm (manual labelling) versus the intended sarcasm (hashtags), and verified the difference between both.

Further, Oprea and Magdy (2020) introduced iSarcasm dataset which divided intended sarcasms and perceived sarcasms.

The state-of-the-art sarcasm detection models performed obviously worse than human evaluation on this dataset.

Future work could focus on multimodal perceived and intended irony, especially across various cultures.

Target Identification Sarcasm target identification was firstly proposed in Joshi et al. (2018), in which sarcasm targets were classified as one target, several targets and outside.

Patro et al. (2019) introduced sociolinguistic features and a deep learning framework, and improved target identification by a lot.

For irony processing, most ironical expressions do not equip a specific target in itself as previously discussed.

However, its ironical effects are likely in dialogue or visually grounded environment, which encourages us to enhance irony datasets in aforementioned ways.

Irony Explanation Irony, according to the definition, have opposite real meanings to literal meanings.

However, this does not mean adding a single negation could interpret ironies well.

Kumar et al. (2022) proposed a new task, sarcasm explanation in dialogue.

Irony explanation might encounter more complex problems due to relatively low proportion of targets.

Still, we should include irony explanation as a branch of multimodal irony processing like Desai et al. (2021).",invalid,,"Question:

How can advancements in sarcasm processing inspire new tasks and methodologies for irony research in NLP?

Answer:

nan"
247627890,"Vision-and-Language Navigation: A Survey of Tasks, Methods, and Future Directions",https://www.semanticscholar.org/paper/4f1d598f919aae55c3cbbc425ef1514a54e2b8cd,Coarse-grained Navigation,5,"In real life, detailed information about the route may not be available since it may be unknown to the human instructor (oracle). Usually, instructions are more concise and contain merely information of the target goal.

RoomNav (Wu et al., 2018) requires agent navigate according to instruction ""go to X"", where X is a predefined room or object.

In Embodied QA (Das et al., 2018), the agent navigates through the environment to find answer for a given question. The instructions in REVERIE (Qi et al., 2020b) are annotated by humans, and thus more complicated and diverse. The agent navigates through the rooms and differentiates the object against multiple competing candidates. In SOON (Zhu et al., 2021a), an agent receives a long, complex coarse-to-fine instruction which gradually narrows down the search scope.

Navigation+Object Interaction For some tasks, the target object might be hidden (e.g., the spoon in a drawer), or need to change status (e.g., a sliced apple is requested but only a whole apple is available). In these scenarios, it is necessary to interact with the objects to accomplish the task (e.g., opening the drawer or cutting the apple). Interactive Question Answering (IQA) requires the agent to navigate and sometimes to interact with objects to answer a given question. Based on indoor scenes in AI2-THOR (Kolve et al., 2017), Shridhar et al. (2020) propose the ALFRED dataset, where agents are provided with both coarse-grained and fine-grained instructions complete household tasks in an interactive visual environment. CHAI (Misra et al., 2018) requires the agent to navigate and simply interact with the environments.","sent1: In real life, detailed information about the route may not be available since it may be unknown to the human instructor (oracle).
sent2: Usually, instructions are more concise and contain merely information of the target goal.
sent3: RoomNav (Wu et al., 2018) requires agent navigate according to instruction ""go to X"", where X is a predefined room or object.
sent4: In Embodied QA (Das et al., 2018), the agent navigates through the environment to find answer for a given question.
sent5: The instructions in REVERIE (Qi et al., 2020b) are annotated by humans, and thus more complicated and diverse.
sent6: The agent navigates through the rooms and differentiates the object against multiple competing candidates.
sent7: In SOON (Zhu et al., 2021a), an agent receives a long, complex coarse-to-fine instruction which gradually narrows down the search scope.
sent8: Navigation+Object Interaction For some tasks, the target object might be hidden (e.g., the spoon in a drawer), or need to change status (e.g., a sliced apple is requested but only a whole apple is available).
sent9: In these scenarios, it is necessary to interact with the objects to accomplish the task (e.g., opening the drawer or cutting the apple).
sent10: Interactive Question Answering (IQA) requires the agent to navigate and sometimes to interact with objects to answer a given question.
sent11: Based on indoor scenes in AI2-THOR (Kolve et al., 2017), Shridhar et al. (2020) propose the ALFRED dataset, where agents are provided with both coarse-grained and fine-grained instructions complete household tasks in an interactive visual environment.
sent12: CHAI (Misra et al., 2018) requires the agent to navigate and simply interact with the environments.","Question: What are the different types of tasks and instructions involved in coarse-grained navigation for vision-and-language navigation?

Supporting sentence: sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",What are the different types of tasks and instructions involved in coarse-grained navigation for vision-and-language navigation?,"sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",6,"RoomNav (Wu et al., 2018) requires agent navigate according to instruction ""go to X"", where X is a predefined room or object.

In Embodied QA (Das et al., 2018), the agent navigates through the environment to find answer for a given question.

The instructions in REVERIE (Qi et al., 2020b) are annotated by humans, and thus more complicated and diverse.

The agent navigates through the rooms and differentiates the object against multiple competing candidates.

In SOON (Zhu et al., 2021a), an agent receives a long, complex coarse-to-fine instruction which gradually narrows down the search scope.

Navigation+Object Interaction For some tasks, the target object might be hidden (e.g., the spoon in a drawer), or need to change status (e.g., a sliced apple is requested but only a whole apple is available).

In these scenarios, it is necessary to interact with the objects to accomplish the task (e.g., opening the drawer or cutting the apple).

Interactive Question Answering (IQA) requires the agent to navigate and sometimes to interact with objects to answer a given question.

Based on indoor scenes in AI2-THOR (Kolve et al., 2017), Shridhar et al. (2020) propose the ALFRED dataset, where agents are provided with both coarse-grained and fine-grained instructions complete household tasks in an interactive visual environment.

CHAI (Misra et al., 2018) requires the agent to navigate and simply interact with the environments.",invalid,,"Question:

What are the different types of tasks and instructions involved in coarse-grained navigation for vision-and-language navigation?

Answer:

nan"
252762171,"The Lifecycle of ""Facts"": A Survey of Social Bias in Knowledge Graphs",https://www.semanticscholar.org/paper/8d74c7cde3ec806546c09274a968b87620442396,Extraction: Automated Extraction of Information,20,"Natural language processing (NLP) methods can be used to recognize and extract entities (named entity recognition; NER) and their relations (relation extraction; RE), which are then represented as [head entity, relation, tail entity] tuples (or as [subject, predicate, object], respectively). Mehrabi et al. (2020) showed that the NER system CoreNLP  exhibits binary gender bias. They used a number of template sentences, like ""<Name> is going to school"" or ""<Name> is a person"" using male and female names 5 from 139 years of census data. The model returned more erroneous tags for female names. Similarly, Mishra et al. (2020) created synthetic sentences from adjusted Winogender (Rudinger et al., 2018) templates with names associated with different ethnicities and genders. A range of different NER systems were evaluated (bidirectional LSTMs with Conditional Random Field (BiLSTM CRF) (Huang et al., 2015) on GloVe (Pennington et al., 2014), ConceptNet (Speer et al., 2017) and ELMo (Peters et al., 2017) embeddings, CoreNLP, and spaCy 6 NER models). Across models, nonwhite names yielded on average lower performance scores than white names. Generally, ELMo exhibited the least bias. Although ConceptNet is debiased for gender and ethnicity 7 , it was found to produce strongly varied accuracy values. Gaut et al. (2020) analyzed binary gender bias in a popular open-source neural relation extraction (NRE) model, OpenNRE (Han et al., 2019). For this purpose, the authors created a new dataset, named WikiGenderBias (sourced from Wikipedia and DBpedia). All sentences describe a gendered subject with one of four relations: spouse, hypernym, birthData, or birthPlace (DBpedia mostly uses occupation-related hypernyms). The most notable bias found was the spouse relation. It was more reliably predicted for male than female entities. This observation stands in contrast to the predominance of female instances with spouse relation in WikiGenderBias. The authors experimented with three different mitigation strategies: downsampling the training data to equalize the number of male and female instances, augmenting the data by artificially introducing new female instances, and finally word embedding debiasing (Bolukbasi et al., 2016). Only downsampling facilitated a reduction of bias that did not come at the cost of model performance.

Nowadays, contextualized transformer-based en-coders are used in various NLP applications, including NER and NRE. Several works have analyzed the various societal biases encoded in large-scale word embeddings (like word2vec (Mikolov et al., 2013;Bolukbasi et al., 2016) or BERT (Devlin et al., 2019;Kurita et al., 2019)) or language models (like GPT-2 (Radford et al., 2019;Kirk et al., 2021) and GPT-3 (Brown et al., 2020;Abid et al., 2021)). Thus, it is likely that these biases also affect the downstream tasks discussed here.  used two types of tasks to analyze bias in BERT-based RE on the newly created Wiki80 and TACRED (Zhang et al., 2017) benchmarks. For the first task, they masked only entity names with a special token (masked-entity; ME), whereas for the second task, only the entity names were given (onlyentity; OE). The model maintained higher performances in the OE setting, indicating that the entity names were more informative of the predicted relation than the contextual information. This hints at what the authors call semantic bias.

A Note on Reporting Bias Generally, when extracting knowledge from text, one should be aware that the frequency with which facts are reported is not representative of their real-world prevalence. Humans tend to mention only events, outcomes, or properties that are out of their perceived ordinary (Gordon and Van Durme, 2013) (e.g., ""a banana is yellow"" is too trivial to be reported). This phenomenon is called reporting bias and likely stems from a need to be as informative and non-redundant as possible when sharing knowledge.","sent1: Natural language processing (NLP) methods can be used to recognize and extract entities (named entity recognition; NER) and their relations (relation extraction; RE), which are then represented as [head entity, relation, tail entity] tuples (or as [subject, predicate, object], respectively).
sent2: Mehrabi et al. (2020) showed that the NER system CoreNLP  exhibits binary gender bias.
sent3: They used a number of template sentences, like ""<Name> is going to school"" or ""<Name> is a person"" using male and female names 5 from 139 years of census data.
sent4: The model returned more erroneous tags for female names.
sent5: Similarly, Mishra et al. (2020) created synthetic sentences from adjusted Winogender (Rudinger et al., 2018) templates with names associated with different ethnicities and genders.
sent6: A range of different NER systems were evaluated (bidirectional LSTMs with Conditional Random Field (BiLSTM CRF)
sent7: (Huang et al., 2015) on GloVe (Pennington et al., 2014), ConceptNet (Speer et al., 2017) and ELMo (Peters et al., 2017) embeddings, CoreNLP, and spaCy 6 NER models).
sent8: Across models, nonwhite names yielded on average lower performance scores than white names.
sent9: Generally, ELMo exhibited the least bias.
sent10: Although ConceptNet is debiased for gender and ethnicity 7 , it was found to produce strongly varied accuracy values.
sent11: Gaut et al. (2020) analyzed binary gender bias in a popular open-source neural relation extraction (NRE) model, OpenNRE (Han et al., 2019).
sent12: For this purpose, the authors created a new dataset, named WikiGenderBias (sourced from Wikipedia and DBpedia).
sent13: All sentences describe a gendered subject with one of four relations: spouse, hypernym, birthData, or birthPlace (DBpedia mostly uses occupation-related hypernyms).
sent14: The most notable bias found was the spouse relation.
sent15: It was more reliably predicted for male than female entities.
sent16: This observation stands in contrast to the predominance of female instances with spouse relation in WikiGenderBias.
sent17: The authors experimented with three different mitigation strategies: downsampling the training data to equalize the number of male and female instances, augmenting the data by artificially introducing new female instances, and finally word embedding debiasing (Bolukbasi et al., 2016).
sent18: Only downsampling facilitated a reduction of bias that did not come at the cost of model performance.
sent19: Nowadays, contextualized transformer-based en-coders are used in various NLP applications, including NER and NRE.
sent20: Several works have analyzed the various societal biases encoded in large-scale word embeddings (like word2vec (Mikolov et al., 2013;Bolukbasi et al., 2016) or BERT (Devlin et al., 2019;Kurita et al., 2019)) or language models (like GPT-2 (Radford et al., 2019;Kirk et al., 2021) and GPT-3 (Brown et al., 2020;Abid et al., 2021)).
sent21: Thus, it is likely that these biases also affect the downstream tasks discussed here.
sent22: used two types of tasks to analyze bias in BERT-based RE on the newly created Wiki80 and TACRED (Zhang et al., 2017) benchmarks.
sent23: For the first task, they masked only entity names with a special token (masked-entity; ME), whereas for the second task, only the entity names were given (onlyentity; OE).
sent24: The model maintained higher performances in the OE setting, indicating that the entity names were more informative of the predicted relation than the contextual information.
sent25: This hints at what the authors call semantic bias.
sent26: A Note on Reporting Bias Generally, when extracting knowledge from text, one should be aware that the frequency with which facts are reported is not representative of their real-world prevalence.
sent27: Humans tend to mention only events, outcomes, or properties that are out of their perceived ordinary (Gordon and Van Durme, 2013) (e.g., ""a banana is yellow"" is too trivial to be reported).
sent28: This phenomenon is called reporting bias and likely stems from a need to be as informative and non-redundant as possible when sharing knowledge.","Question: How do biases manifest in named entity recognition (NER) and relation extraction (RE) systems, and what mitigation strategies have been explored?

Supporting sentence: sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18","How do biases manifest in named entity recognition (NER) and relation extraction (RE) systems, and what mitigation strategies have been explored?","sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18",6,"Mehrabi et al. (2020) showed that the NER system CoreNLP  exhibits binary gender bias.

They used a number of template sentences, like ""<Name> is going to school"" or ""<Name> is a person"" using male and female names 5 from 139 years of census data.

The model returned more erroneous tags for female names.

Similarly, Mishra et al. (2020) created synthetic sentences from adjusted Winogender (Rudinger et al., 2018) templates with names associated with different ethnicities and genders.

A range of different NER systems were evaluated (bidirectional LSTMs with Conditional Random Field (BiLSTM CRF)

(Huang et al., 2015) on GloVe (Pennington et al., 2014), ConceptNet (Speer et al., 2017) and ELMo (Peters et al., 2017) embeddings, CoreNLP, and spaCy 6 NER models).

Across models, nonwhite names yielded on average lower performance scores than white names.

Generally, ELMo exhibited the least bias.

Although ConceptNet is debiased for gender and ethnicity 7 , it was found to produce strongly varied accuracy values.

Gaut et al. (2020) analyzed binary gender bias in a popular open-source neural relation extraction (NRE) model, OpenNRE (Han et al., 2019).

For this purpose, the authors created a new dataset, named WikiGenderBias (sourced from Wikipedia and DBpedia).

All sentences describe a gendered subject with one of four relations: spouse, hypernym, birthData, or birthPlace (DBpedia mostly uses occupation-related hypernyms).

The most notable bias found was the spouse relation.

It was more reliably predicted for male than female entities.

This observation stands in contrast to the predominance of female instances with spouse relation in WikiGenderBias.

The authors experimented with three different mitigation strategies: downsampling the training data to equalize the number of male and female instances, augmenting the data by artificially introducing new female instances, and finally word embedding debiasing (Bolukbasi et al., 2016).

Only downsampling facilitated a reduction of bias that did not come at the cost of model performance.",invalid,,"Question:

How do biases manifest in named entity recognition (NER) and relation extraction (RE) systems, and what mitigation strategies have been explored?

Answer:

nan"
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Become An Independent Research Problem.,7,"Early works extracted ZP information from closed annotations (e.g. OntoNotes and Treebanks) (Yang and Xue, 2010;Chung and Gildea, 2010), which were considered as a sub-problem of coreference or syntactic parsing. With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:

(1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money. Nonetheless, it is still necessary to establish testing datasets for validating/analyzing the model performance.

Besides, pre-trained modes are already equipped with some capabilities on discourse (Chen et al., 2019;Koto et al., 2021). This highlights the importance of formulating the downstream task in a manner that can effectively leverage the capabilities of the pre-trained models.","sent1: Early works extracted ZP information from closed annotations (e.g. OntoNotes and Treebanks) (Yang and Xue, 2010;Chung and Gildea, 2010), which were considered as a sub-problem of coreference or syntactic parsing.
sent2: With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:
sent3: (1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money.
sent4: Nonetheless, it is still necessary to establish testing datasets for validating/analyzing the model performance.
sent5: Besides, pre-trained modes are already equipped with some capabilities on discourse (Chen et al., 2019;Koto et al., 2021).
sent6: This highlights the importance of formulating the downstream task in a manner that can effectively leverage the capabilities of the pre-trained models.","Question: What are the main challenges and considerations in constructing datasets for Zero Pronoun Translation (ZPT)?

Supporting sentence: sent2, sent3, sent4",What are the main challenges and considerations in constructing datasets for Zero Pronoun Translation (ZPT)?,"sent2, sent3, sent4",3,"With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:

(1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money.

Nonetheless, it is still necessary to establish testing datasets for validating/analyzing the model performance.",implement,"The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges (Wang et al., 2018a).

Firstly, it requires experts for both source ZP annotation and target translation (Wang et al., 2016c; Wang et al., 2018a). Secondly, annotating the training data manually is time-consuming and costly.

Nonetheless, it is still necessary to establish testing datasets for validating and analyzing the model performance.","Question:

What are the main challenges and considerations in constructing datasets for Zero Pronoun Translation (ZPT)?

Answer:

The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges (Wang et al., 2018a).

Firstly, it requires experts for both source ZP annotation and target translation (Wang et al., 2016c; Wang et al., 2018a).

Secondly, annotating the training data manually is time-consuming and costly.

Nonetheless, it is still necessary to establish testing datasets for validating and analyzing the model performance."
254854669,Let's Negotiate! A Survey of Negotiation Dialogue Systems,https://www.semanticscholar.org/paper/0974035826cd6d4be9c604a8679621c8621aff5f,John F. Kennedy,15,"Negotiation is one of the crucial abilities in human communication that involves two or more individuals discussing goals and tactics to resolve conflicts, achieve mutual benefit, or find mutually acceptable solutions (Fershtman, 1990;Bazerman and Neale, 1993;Lewicki et al., 2011). It is a common aspect of human interaction, occurring whenever people communicate in order to manage conflict or reach a compromise. Scientifically, one of the long-term goals of dialogue research is to empower intelligent agents with such ability. Agent effectively negotiating with a human in natural language could have significant benefits in many scenarios, from bargaining prices in everyday trade-in (He et al., 2018) to high-stakes political or legal situations (Basave and He, 2016). Negotiation dialogue systems (Lewandowska, 1982;Lambert and Carberry, 1992;Chawla et al., 2021c) is an emerging research field that aims to build intelligent conversational agents that can automatically negotiate with a human in natural languages, e.g., CICERO 1 from Meta AI. Agents negotiate with human through multi-turn interaction using logically reasoning (Sycara and Dai, 2010) over goals (Zhang et al., 2020), strategies (Zhou et al., 2020) and psychology factors (Yang et al., 2021). As illustrated in Figure 1, negotiation dialogue agents interact with the human through multiturn cycles. A successful negotiation process involves efficient information exchange, strategic discussion toward their goals, and a closing section.

Despite the significant amount of research that has been conducted on the task, there is a lack of a systematic review of the topic. In this work, we aim to fill this gap by reviewing contemporary work in the emerging field of negotiation dialogue systems, covering aspects such as benchmarks, evaluation, methodology, and future directions. In recent years, various benchmarks have been proposed for negotiation dialogue systems, ranging from bargaining (Lewis et al., 2017) and game scenarios (Asher et al., 2016) to job interviews  and items exchanging (Chawla et al., 2021c). Our survey will provide an overview of these benchmarks and discuss how they have been used to evaluate the performance of negotiation dialogue systems.

Modeling the negotiation process for conversational agents also imposes challenges. Firstly, these agents must be able to reason about and employ various strategies in different situations. In addition to strategy modeling, it is also necessary to model the personalities (e.g., mind, emotion, and behaviors) of the negotiators. Thirdly, an effective policy learning method is essential for the successful use of language. To address these challenges, we can categorize existing solutions into three areas: (1) Personality modeling helps us understand negotiator's preferences, (2) Strategy modeling enables agents to make reasonable decisions based on gathered information, and (3) Policy learning methods utilize information effectively to maximize results.

In summary, our contributions are three-fold: (1) To the best of our knowledge, we systematically categorize current negotiation dialogue benchmarks from the perspective of distributive and integrative, with each category based on different goal types of negotiation dialogue tasks. (2) We categorize typical evaluation methods and current solutions into an appropriate taxonomy. (3) We pointed out the current limitation and promising research directions in the future.","sent1: Negotiation is one of the crucial abilities in human communication that involves two or more individuals discussing goals and tactics to resolve conflicts, achieve mutual benefit, or find mutually acceptable solutions (Fershtman, 1990;Bazerman and Neale, 1993;Lewicki et al., 2011).
sent2: It is a common aspect of human interaction, occurring whenever people communicate in order to manage conflict or reach a compromise.
sent3: Scientifically, one of the long-term goals of dialogue research is to empower intelligent agents with such ability.
sent4: Agent effectively negotiating with a human in natural language could have significant benefits in many scenarios, from bargaining prices in everyday trade-in (He et al., 2018) to high-stakes political or legal situations (Basave and He, 2016).
sent5: Negotiation dialogue systems (Lewandowska, 1982;Lambert and Carberry, 1992;Chawla et al., 2021c) is an emerging research field that aims to build intelligent conversational agents that can automatically negotiate with a human in natural languages, e.g., CICERO 1 from Meta AI.
sent6: Agents negotiate with human through multi-turn interaction using logically reasoning (Sycara and Dai, 2010) over goals (Zhang et al., 2020), strategies (Zhou et al., 2020) and psychology factors (Yang et al., 2021).
sent7: As illustrated in Figure 1, negotiation dialogue agents interact with the human through multiturn cycles.
sent8: A successful negotiation process involves efficient information exchange, strategic discussion toward their goals, and a closing section.
sent9: Despite the significant amount of research that has been conducted on the task, there is a lack of a systematic review of the topic.
sent10: In this work, we aim to fill this gap by reviewing contemporary work in the emerging field of negotiation dialogue systems, covering aspects such as benchmarks, evaluation, methodology, and future directions.
sent11: In recent years, various benchmarks have been proposed for negotiation dialogue systems, ranging from bargaining (Lewis et al., 2017) and game scenarios (Asher et al., 2016) to job interviews  and items exchanging (Chawla et al., 2021c).
sent12: Our survey will provide an overview of these benchmarks and discuss how they have been used to evaluate the performance of negotiation dialogue systems.
sent13: Modeling the negotiation process for conversational agents also imposes challenges.
sent14: Firstly, these agents must be able to reason about and employ various strategies in different situations.
sent15: In addition to strategy modeling, it is also necessary to model the personalities (e.g., mind, emotion, and behaviors) of the negotiators.
sent16: Thirdly, an effective policy learning method is essential for the successful use of language.
sent17: To address these challenges, we can categorize existing solutions into three areas: (1) Personality modeling helps us understand negotiator's preferences, (2) Strategy modeling enables agents to make reasonable decisions based on gathered information, and (3) Policy learning methods utilize information effectively to maximize results.
sent18: In summary, our contributions are three-fold: (1) To the best of our knowledge, we systematically categorize current negotiation dialogue benchmarks from the perspective of distributive and integrative, with each category based on different goal types of negotiation dialogue tasks.
sent19: (2) We categorize typical evaluation methods and current solutions into an appropriate taxonomy.
sent20: (3) We pointed out the current limitation and promising research directions in the future.","Question: What are the main challenges in modeling negotiation processes for conversational agents, and how can these challenges be addressed?

Supporting sentence: sent13, sent14, sent15, sent16, sent17","What are the main challenges in modeling negotiation processes for conversational agents, and how can these challenges be addressed?","sent13, sent14, sent15, sent16, sent17",7,"Modeling the negotiation process for conversational agents also imposes challenges.

Firstly, these agents must be able to reason about and employ various strategies in different situations.

In addition to strategy modeling, it is also necessary to model the personalities (e.g., mind, emotion, and behaviors) of the negotiators.

Thirdly, an effective policy learning method is essential for the successful use of language.

To address these challenges, we can categorize existing solutions into three areas: (1) Personality modeling helps us understand negotiator's preferences, (2) Strategy modeling enables agents to make reasonable decisions based on gathered information, and (3) Policy learning methods utilize information effectively to maximize results.",invalid,,"Question:

What are the main challenges in modeling negotiation processes for conversational agents, and how can these challenges be addressed?

Answer:

nan"
252992688,A Survey of Active Learning for Natural Language Processing,https://www.semanticscholar.org/paper/3cd98a010b36832fc2bd8368cd4f34c72cd0ac6f,Output Uncertainty,11,"Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and the most commonly utilized query strategy. It prefers the most uncertain instances judged by the model outputs. For probabilistic models, entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005) and margin-sampling (Scheffer et al., 2001;Schein and Ungar, 2007) are three typical uncertainty sampling strategies (Settles, 2009). Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification. For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000;Tong and Koller, 2001).

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region. If an instance is near the decision boundary, the model's outputs may be different within its local region. In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).","sent1: Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and the most commonly utilized query strategy.
sent2: It prefers the most uncertain instances judged by the model outputs.
sent3: For probabilistic models, entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005) and margin-sampling (Scheffer et al., 2001;Schein and Ungar, 2007) are three typical uncertainty sampling strategies (Settles, 2009).
sent4: Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification.
sent5: For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000;Tong and Koller, 2001).
sent6: Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.
sent7: If an instance is near the decision boundary, the model's outputs may be different within its local region.
sent8: In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).","Question: What are the various strategies for measuring output uncertainty in active learning for NLP?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",What are the various strategies for measuring output uncertainty in active learning for NLP?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",4,"Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and the most commonly utilized query strategy.

It prefers the most uncertain instances judged by the model outputs.

For probabilistic models, entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005) and margin-sampling (Scheffer et al., 2001;Schein and Ungar, 2007) are three typical uncertainty sampling strategies (Settles, 2009).

Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification.

For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000;Tong and Koller, 2001).

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may be different within its local region.

In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).",implement,"Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and most commonly utilized query strategy.

It prefers the most uncertain instances judged by the model outputs.

For probabilistic models, three typical uncertainty sampling strategies are entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005), and margin-sampling (Scheffer et al., 2001; Schein and Ungar, 2007) (Settles, 2009).

Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification.

For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000; Tong and Koller, 2001).

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may be different within its local region.

In this spirit, recent works examine different ways to check instances' local divergence, such as nearest-neighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b), and data augmentation (Jiang et al., 2020).","Question:

What are the various strategies for measuring output uncertainty in active learning for NLP?

Answer:

Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and most commonly utilized query strategy.

It prefers the most uncertain instances judged by the model outputs.

For probabilistic models, three typical uncertainty sampling strategies are entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005), and margin-sampling (Scheffer et al., 2001; Schein and Ungar, 2007) (Settles, 2009).

Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification.

For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000; Tong and Koller, 2001).

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may be different within its local region.

In this spirit, recent works examine different ways to check instances' local divergence, such as nearest-neighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b), and data augmentation (Jiang et al., 2020)."
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,Syntactic knowledge,5,"As far as how syntactic information is represented, it seems that syntactic structure is not directly encoded in self-attention weights, but they can be transformed to reflect it. Htut et al.

(2019) were unable to extract full parse trees from BERT heads even with the gold annotations for the root. Jawahar et al. (2019) include a brief illustration of a dependency tree extracted directly from self-attention weights, but provide no quantitative evaluation. However, Hewitt and Manning (2019) were able to learn transformation matrices that would successfully recover much of the Stanford Dependencies formalism for PennTreebank data (see Figure 2). Jawahar et al. (2019) try to approximate BERT representations with Tensor Product Decomposition Networks (McCoy et al., 2019a), concluding that the dependency trees are the best match among 5 decomposition schemes (although the reported MSE differences are very small).

Regarding syntactic competence of BERT's MLM, Goldberg (2019) showed that BERT takes subject-predicate agreement into account when performing the cloze task. This was the case even for sentences with distractor clauses between the subject and the verb, and meaningless sentences. A study of negative polarity items (NPIs) by Warstadt et al. (2019) showed that BERT is better able to detect the presence of NPIs (e.g. ""ever"") and the words that allow their use (e.g. ""whether"") than scope violations. The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input. In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019). This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.","sent1: As far as how syntactic information is represented, it seems that syntactic structure is not directly encoded in self-attention weights, but they can be transformed to reflect it.
sent2: Htut et al.(2019) were unable to extract full parse trees from BERT heads even with the gold annotations for the root.
sent3: Jawahar et al. (2019) include a brief illustration of a dependency tree extracted directly from self-attention weights, but provide no quantitative evaluation.
sent4: However, Hewitt and Manning (2019) were able to learn transformation matrices that would successfully recover much of the Stanford Dependencies formalism for PennTreebank data (see Figure 2).
sent5: Jawahar et al. (2019) try to approximate BERT representations with Tensor Product Decomposition Networks (McCoy et al., 2019a), concluding that the dependency trees are the best match among 5 decomposition schemes (although the reported MSE differences are very small).
sent6: Regarding syntactic competence of BERT's MLM, Goldberg (2019) showed that BERT takes subject-predicate agreement into account when performing the cloze task.
sent7: This was the case even for sentences with distractor clauses between the subject and the verb, and meaningless sentences.
sent8: A study of negative polarity items (NPIs) by Warstadt et al. (2019) showed that BERT is better able to detect the presence of NPIs (e.g. ""ever"") and the words that allow their use (e.g. ""whether"") than scope violations.
sent9: The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input.
sent10: In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019).
sent11: This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.","Question: What evidence suggests that BERT's syntactic knowledge is limited despite its ability to perform certain syntactic tasks?

Supporting sentence: sent9, sent10, sent11",What evidence suggests that BERT's syntactic knowledge is limited despite its ability to perform certain syntactic tasks?,"sent9, sent10, sent11",2,"The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input.

In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019).

This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.",implement,"The evidence of syntactic knowledge in BERT is belied by the fact that it does not ""understand"" negation and is insensitive to malformed input.

In particular, its predictions were not altered even with shuffled word order, truncated sentences, or removed subjects and objects (Ettinger, 2019).

This is in line with recent findings on adversarial attacks, where models are disturbed by nonsensical inputs (Wallace et al., 2019a), suggesting that BERT's encoding of syntactic structure does not indicate actual reliance on that knowledge.","Question:

What evidence suggests that BERT's syntactic knowledge is limited despite its ability to perform certain syntactic tasks?

Answer:

The evidence of syntactic knowledge in BERT is belied by the fact that it does not ""understand"" negation and is insensitive to malformed input.

In particular, its predictions were not altered even with shuffled word order, truncated sentences, or removed subjects and objects (Ettinger, 2019).

This is in line with recent findings on adversarial attacks, where models are disturbed by nonsensical inputs (Wallace et al., 2019a), suggesting that BERT's encoding of syntactic structure does not indicate actual reliance on that knowledge."
232075945,A Survey on Stance Detection for Mis-and Disinformation Identification,https://www.semanticscholar.org/paper/14ba97c7e4c7d370965333ecf3835e514c664106,Explainability,10,"The ability for a model to be able to explain its decisions is getting increasingly important, especially for mis-and disinformation detection, as one could argue that it is a crucial step towards adopting fully automated fact-checking. The FEVER 2.0 task formulation (Thorne et al., 2019) can be viewed as a step towards obtaining such explanations, e.g., there have been efforts to identify adversarial triggers that offer explanations for the vulnerabilities at the model level (Atanasova et al., 2020b). However, FEVER is artificially created and is limited to Wikipedia, which may not reflect real-world settings. To mitigate this, explanation by professional journalists can be found on fact-checking websites, and can be further combined with stance detection in an automated system. In a step in this direction, Atanasova et al. (2020a) generated natural language explanations for claims from PolitiFact 4 given gold evidence document summaries by journalists.

Moreover, partial explanations can be obtained automatically from the underlying models, e.g., from memory networks (Mohtarami et al., 2018), attention weights (Zhou et al., 2019;Liu et al., 2020b), or topic relations (Si et al., 2021). However, such approaches are limited as they can require gold snippets justifying the document's stance, attention weights can be misleading (Jain and Wallace, 2019), and topics might be noisy due to their unsupervised nature. Other existing systems (Popat et al., 2017(Popat et al., , 2018Nadeem et al., 2019) offer explanations to a more limited extent, highlighting span overlaps between the target text and the evidence documents. Overall, there is a need for holistic and realistic explanations of how a factchecking model arrived at its prediction.

Integration People question false information more and tend to confirm true information (Mendoza et al., 2010). Thus, stance can play a vital role in verifying dubious content. In Appendix C, we discuss existing systems and real-world applications of stance for mis-and disinformation identification in more detail. However, we argue that a tighter integration between stance and factchecking is needed. Stance can be expressed in different forms, e.g., tweets, news articles, user posts, sentences in Wikipedia, and Wiki tables, among others and can have different formulations as part of the fact-checking pipeline (see Section 3). All these can guide human fact-checkers through the process of fact-checking, and can point them to relevant evidence. Moreover, the wisdom of the crowd can be a powerful instrument in the fight against mis-and disinformation (Pennycook and Rand, 2019), but we should note that vocal minorities can derail public discourse (Scannell et al., 2021). Nevertheless, these risks can be mitigated by taking into account the credibility of the user or of the information source, which can be done automatically or with the help of human fact-checkers.","sent1: The ability for a model to be able to explain its decisions is getting increasingly important, especially for mis-and disinformation detection, as one could argue that it is a crucial step towards adopting fully automated fact-checking.
sent2: The FEVER 2.0 task formulation (Thorne et al., 2019) can be viewed as a step towards obtaining such explanations, e.g., there have been efforts to identify adversarial triggers that offer explanations for the vulnerabilities at the model level (Atanasova et al., 2020b).
sent3: However, FEVER is artificially created and is limited to Wikipedia, which may not reflect real-world settings.
sent4: To mitigate this, explanation by professional journalists can be found on fact-checking websites, and can be further combined with stance detection in an automated system.
sent5: In a step in this direction, Atanasova et al. (2020a) generated natural language explanations for claims from PolitiFact 4 given gold evidence document summaries by journalists.
sent6: Moreover, partial explanations can be obtained automatically from the underlying models, e.g., from memory networks (Mohtarami et al., 2018), attention weights (Zhou et al., 2019;Liu et al., 2020b), or topic relations (Si et al., 2021).
sent7: However, such approaches are limited as they can require gold snippets justifying the document's stance, attention weights can be misleading (Jain and Wallace, 2019), and topics might be noisy due to their unsupervised nature.
sent8: Other existing systems (Popat et al., 2017(Popat et al., , 2018Nadeem et al., 2019) offer explanations to a more limited extent, highlighting span overlaps between the target text and the evidence documents.
sent9: Overall, there is a need for holistic and realistic explanations of how a factchecking model arrived at its prediction.
sent10: Integration People question false information more and tend to confirm true information (Mendoza et al., 2010).
sent11: Thus, stance can play a vital role in verifying dubious content.
sent12: In Appendix C, we discuss existing systems and real-world applications of stance for mis-and disinformation identification in more detail.
sent13: However, we argue that a tighter integration between stance and factchecking is needed.
sent14: Stance can be expressed in different forms, e.g., tweets, news articles, user posts, sentences in Wikipedia, and Wiki tables, among others and can have different formulations as part of the fact-checking pipeline (see Section 3).
sent15: All these can guide human fact-checkers through the process of fact-checking, and can point them to relevant evidence.
sent16: Moreover, the wisdom of the crowd can be a powerful instrument in the fight against mis-and disinformation (Pennycook and Rand, 2019), but we should note that vocal minorities can derail public discourse (Scannell et al., 2021).
sent17: Nevertheless, these risks can be mitigated by taking into account the credibility of the user or of the information source, which can be done automatically or with the help of human fact-checkers.","Question: What are the current methods and challenges in providing explanations for stance detection in mis-and disinformation identification?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the current methods and challenges in providing explanations for stance detection in mis-and disinformation identification?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",7,"The ability for a model to be able to explain its decisions is getting increasingly important, especially for mis-and disinformation detection, as one could argue that it is a crucial step towards adopting fully automated fact-checking.

The FEVER 2.0 task formulation (Thorne et al., 2019) can be viewed as a step towards obtaining such explanations, e.g., there have been efforts to identify adversarial triggers that offer explanations for the vulnerabilities at the model level (Atanasova et al., 2020b).

However, FEVER is artificially created and is limited to Wikipedia, which may not reflect real-world settings.

To mitigate this, explanation by professional journalists can be found on fact-checking websites, and can be further combined with stance detection in an automated system.

In a step in this direction, Atanasova et al. (2020a) generated natural language explanations for claims from PolitiFact 4 given gold evidence document summaries by journalists.

Moreover, partial explanations can be obtained automatically from the underlying models, e.g., from memory networks (Mohtarami et al., 2018), attention weights (Zhou et al., 2019;Liu et al., 2020b), or topic relations (Si et al., 2021).

However, such approaches are limited as they can require gold snippets justifying the document's stance, attention weights can be misleading (Jain and Wallace, 2019), and topics might be noisy due to their unsupervised nature.

Other existing systems (Popat et al., 2017(Popat et al., , 2018Nadeem et al., 2019) offer explanations to a more limited extent, highlighting span overlaps between the target text and the evidence documents.

Overall, there is a need for holistic and realistic explanations of how a factchecking model arrived at its prediction.",invalid,,"Question:

What are the current methods and challenges in providing explanations for stance detection in mis-and disinformation identification?

Answer:

nan"
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Model Level,4,"Another approach to generating positive examples is by leveraging the distinctive characteristics of the backbone model utilized in contrastive learning. These characteristics might be the architectural choices or using representation from certain components of the model.

Dropout is a regularization technique used in deep learning to prevent overfitting of a model. During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times. These different representations can be used as positive examples for sentence representations. Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy. Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).

Specific components of language models can be trained to generate semantically similar representations. One example is the use of prefix modules (Li and Liang, 2021), which are small, trainable modules added to a pretrained language model. In a recent study, Wang and Lu (2022) trained prefix modules on NLI data before using them to generate positive examples for unsupervised sentence representations. a","sent1: Another approach to generating positive examples is by leveraging the distinctive characteristics of the backbone model utilized in contrastive learning.
sent2: These characteristics might be the architectural choices or using representation from certain components of the model.
sent3: Dropout is a regularization technique used in deep learning to prevent overfitting of a model.
sent4: During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.
sent5: These different representations can be used as positive examples for sentence representations.
sent6: Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.
sent7: Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).
sent8: Specific components of language models can be trained to generate semantically similar representations.
sent9: One example is the use of prefix modules (Li and Liang, 2021), which are small, trainable modules added to a pretrained language model.
sent10: In a recent study, Wang and Lu (2022) trained prefix modules on NLI data before using them to generate positive examples for unsupervised sentence representations.
sent11: a","Question: How is dropout used as an augmentation strategy in generating positive examples for sentence representations?

Supporting sentence: sent3, sent4, sent5, sent6, sent7",How is dropout used as an augmentation strategy in generating positive examples for sentence representations?,"sent3, sent4, sent5, sent6, sent7",1,"Dropout is a regularization technique used in deep learning to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).",implement,"Dropout is used as an augmentation strategy in generating positive examples for sentence representations by acting as a regularization technique to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it, such as promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).","Question:

How is dropout used as an augmentation strategy in generating positive examples for sentence representations?

Answer:

Dropout is used as an augmentation strategy in generating positive examples for sentence representations by acting as a regularization technique to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it, such as promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d)."
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Probed PLMs,4,"PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).","sent1: PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).","Question: What are the methods used to probe pre-trained language models (PLMs) for knowledge?

Supporting sentence: sent1",What are the methods used to probe pre-trained language models (PLMs) for knowledge?,sent1,4,"PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).",implement,,"Question:

What are the methods used to probe pre-trained language models (PLMs) for knowledge?

Answer:

nan"
232075945,A Survey on Stance Detection for Mis-and Disinformation Identification,https://www.semanticscholar.org/paper/14ba97c7e4c7d370965333ecf3835e514c664106,Shades of Truth,6,"The notion of shades of truth is important in mis-and disinformation detection. For example, fact-checking often goes beyond binary true/false labels, e.g., Nakov et al. (2018) used a third category half-true, Rashkin et al. (2017) included mixed and no factual evidence, and Wang (2017); Santia and Williams (2018) adopted an even finer-grained schema with six labels, including barely true and utterly false. We believe that such shades could be applied to stance and used in a larger pipeline. In fact, fine-grained labels are common for the related task of Sentiment Analysis (Pang and Lee, 2005;Rosenthal et al., 2017).

Label Semantics As research in stance detection has evolved, so has the definition of the task and the label inventories, but they still do not capture the strength of the expressed stance. As shown in Section 3 (also Appendix 2, labels can vary based on the use case and the setting they are used in. Most researchers have adopted a variant of the Favour, Against, and Neither labels, or an extended schema such as (S)upport, (Q)uery, (D)eny, and (C)omment (Mohammad et al., 2016), but that is not enough to accurately assess stance. Moreover, adding label granularity can further improve the transfer between datasets, as the stance labels already share some semantic similarities, but there can be mismatches in the label definitions (Schiller et al., 2021;Hardalov et al., 2021Hardalov et al., , 2022.","sent1: The notion of shades of truth is important in mis-and disinformation detection.
sent2: For example, fact-checking often goes beyond binary true/false labels, e.g., Nakov et al. (2018) used a third category half-true, Rashkin et al. (2017) included mixed and no factual evidence, and Wang (2017); Santia and Williams (2018) adopted an even finer-grained schema with six labels, including barely true and utterly false.
sent3: We believe that such shades could be applied to stance and used in a larger pipeline.
sent4: In fact, fine-grained labels are common for the related task of Sentiment Analysis (Pang and Lee, 2005;Rosenthal et al., 2017).
sent5: Label Semantics As research in stance detection has evolved, so has the definition of the task and the label inventories, but they still do not capture the strength of the expressed stance.
sent6: As shown in Section 3 (also Appendix 2, labels can vary based on the use case and the setting they are used in. Most researchers have adopted a variant of the Favour, Against, and Neither labels, or an extended schema such as (S)upport, (Q)uery, (D)eny, and (C)omment (Mohammad et al., 2016), but that is not enough to accurately assess stance.
sent7: Moreover, adding label granularity can further improve the transfer between datasets, as the stance labels already share some semantic similarities, but there can be mismatches in the label definitions (Schiller et al., 2021;Hardalov et al., 2021Hardalov et al., , 2022.","Question: How do fine-grained labels enhance the detection of mis-and disinformation in stance detection tasks?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",How do fine-grained labels enhance the detection of mis-and disinformation in stance detection tasks?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",3,"The notion of shades of truth is important in mis-and disinformation detection.

For example, fact-checking often goes beyond binary true/false labels, e.g., Nakov et al. (2018) used a third category half-true, Rashkin et al. (2017) included mixed and no factual evidence, and Wang (2017); Santia and Williams (2018) adopted an even finer-grained schema with six labels, including barely true and utterly false.

We believe that such shades could be applied to stance and used in a larger pipeline.

In fact, fine-grained labels are common for the related task of Sentiment Analysis (Pang and Lee, 2005;Rosenthal et al., 2017).

Label Semantics As research in stance detection has evolved, so has the definition of the task and the label inventories, but they still do not capture the strength of the expressed stance.

As shown in Section 3 (also Appendix 2, labels can vary based on the use case and the setting they are used in. Most researchers have adopted a variant of the Favour, Against, and Neither labels, or an extended schema such as (S)upport, (Q)uery, (D)eny, and (C)omment (Mohammad et al., 2016), but that is not enough to accurately assess stance.

Moreover, adding label granularity can further improve the transfer between datasets, as the stance labels already share some semantic similarities, but there can be mismatches in the label definitions (Schiller et al., 2021;Hardalov et al., 2021Hardalov et al., , 2022.",implement,"The notion of shades of truth is important in enhancing the detection of mis-and disinformation in stance detection tasks.

For example, fact-checking often goes beyond binary true/false labels, with Nakov et al. (2018) using a third category half-true, Rashkin et al. (2017) including mixed and no factual evidence, and Wang (2017) and Santia and Williams (2018) adopting an even finer-grained schema with six labels, including barely true and utterly false.

Such shades of truth could be applied to stance detection and used in a larger pipeline.

In fact, fine-grained labels are common for the related task of Sentiment Analysis (Pang and Lee, 2005; Rosenthal et al., 2017).

As research in stance detection has evolved, so has the definition of the task and the label inventories, but they still do not capture the strength of the expressed stance.

As shown in various studies, labels can vary based on the use case and the setting they are used in. Most researchers have adopted a variant of the Favour, Against, and Neither labels, or an extended schema such as (S)upport, (Q)uery, (D)eny, and (C)omment (Mohammad et al., 2016), but that is not enough to accurately assess stance.

Moreover, adding label granularity can further improve the transfer between datasets, as the stance labels already share some semantic similarities, but there can be mismatches in the label definitions (Schiller et al., 2021; Hardalov et al., 2021; Hardalov et al., 2022).","Question:

How do fine-grained labels enhance the detection of mis-and disinformation in stance detection tasks?

Answer:

The notion of shades of truth is important in enhancing the detection of mis-and disinformation in stance detection tasks.

For example, fact-checking often goes beyond binary true/false labels, with Nakov et al. (2018) using a third category half-true, Rashkin et al. (2017) including mixed and no factual evidence, and Wang (2017) and Santia and Williams (2018) adopting an even finer-grained schema with six labels, including barely true and utterly false.

Such shades of truth could be applied to stance detection and used in a larger pipeline.

In fact, fine-grained labels are common for the related task of Sentiment Analysis (Pang and Lee, 2005; Rosenthal et al., 2017).

As research in stance detection has evolved, so has the definition of the task and the label inventories, but they still do not capture the strength of the expressed stance.

As shown in various studies, labels can vary based on the use case and the setting they are used in.

Most researchers have adopted a variant of the Favour, Against, and Neither labels, or an extended schema such as (S)upport, (Q)uery, (D)eny, and (C)omment (Mohammad et al., 2016), but that is not enough to accurately assess stance.

Moreover, adding label granularity can further improve the transfer between datasets, as the stance labels already share some semantic similarities, but there can be mismatches in the label definitions (Schiller et al., 2021; Hardalov et al., 2021; Hardalov et al., 2022)."
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Method Decision based on,26,"Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc. Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)

PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokens Transkimmer (Guan et al., 2022) hidden states forward tokens VCRNN (Jernite et al., 2017) input token; hidden states partial update with zero-masked weights Skim-RNN (Seo et al., 2018) input token; hidden states partial update with a small RNN HM-RNN (Chung et al., 2017) states of the gates skip a single step; ""flush"" FHRNN (Ke et al., 2018) query; hidden states update the upper RNN layer ing jumped over important information. LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed. Structural information that naturally exists in sentences can also play a role in skimming. Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark or question mark), or to the end of the text (i.e., stop reading).

In the era of Transformers, there have been works attempting to reduce computation by either skip tokens at higher layers or forward tokens to higher layers. The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores. The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function. This results in an improved balance between accuracy and processing time. TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, using reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained. In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them. The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning. The schedule for LAT is found through an evolutionary search algorithm. LTP ) trains a threshold for each Transformer layer, instead of following a predetermined schedule. It simply drops tokens with attention scores lower than the learned threshold. Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer. This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.

Computation Reduction Different from skipping, computation reduction applies a reduced computational workload for some time steps instead of skipping it completely. VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step. Upon making the decision, only the corresponding proportion of the weight matrix will be used to update the hidden states while the rest part of the weight matrix will be masked out with zero.

Instead of using part of weights to update the hidden states, Skim-RNN (Seo et al., 2018) has a big RNN and a separate small RNN. At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token. If the model decides to skim, the small RNN will update only a fraction of the hid-den states. Otherwise, a regular full update will be conducted by the big RNN.

Dynamic Hierarchical RNN Different from the aforementioned two categories of skimming, dynamic hierarchical RNN can increase computation by calling the upper layer RNN when needed. HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture. In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), they add a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.

In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed. Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering. It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.","sent1: Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc.
sent2: Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokens
sent3: Transkimmer (Guan et al., 2022) hidden states forward tokens VCRNN (Jernite et al., 2017) input token; hidden states partial update with zero-masked weights Skim-RNN (Seo et al., 2018) input token; hidden states partial update with a small RNN HM-RNN (Chung et al., 2017) states of the gates skip a single step; ""flush"" FHRNN (Ke et al., 2018) query; hidden states update the upper RNN layer ing jumped over important information.
sent4: LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.
sent5: Structural information that naturally exists in sentences can also play a role in skimming.
sent6: Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark or question mark), or to the end of the text (i.e., stop reading).
sent7: In the era of Transformers, there have been works attempting to reduce computation by either skip tokens at higher layers or forward tokens to higher layers.
sent8: The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores.
sent9: The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function.
sent10: This results in an improved balance between accuracy and processing time.
sent11: TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, using reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained.
sent12: In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them.
sent13: The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning.
sent14: The schedule for LAT is found through an evolutionary search algorithm.
sent15: LTP ) trains a threshold for each Transformer layer, instead of following a predetermined schedule.
sent16: It simply drops tokens with attention scores lower than the learned threshold.
sent17: Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer.
sent18: This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.
sent19: Computation Reduction Different from skipping, computation reduction applies a reduced computational workload for some time steps instead of skipping it completely.
sent20: VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step.
sent21: Upon making the decision, only the corresponding proportion of the weight matrix will be used to update the hidden states while the rest part of the weight matrix will be masked out with zero.
sent22: Instead of using part of weights to update the hidden states, Skim-RNN (Seo et al., 2018) has a big RNN and a separate small RNN.
sent23: At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token.
sent24: If the model decides to skim, the small RNN will update only a fraction of the hid-den states.
sent25: Otherwise, a regular full update will be conducted by the big RNN.
sent26: Dynamic Hierarchical RNN Different from the aforementioned two categories of skimming, dynamic hierarchical RNN can increase computation by calling the upper layer RNN when needed.
sent27: HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture.
sent28: In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), they add a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.
sent29: In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed.
sent30: Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering.
sent31: It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.","Question: How do dynamic neural networks utilize skimming and computation reduction techniques to improve efficiency in NLP tasks?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31",How do dynamic neural networks utilize skimming and computation reduction techniques to improve efficiency in NLP tasks?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31",3,"LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.

Structural information that naturally exists in sentences can also play a role in skimming.

Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark or question mark), or to the end of the text (i.e., stop reading).

In the era of Transformers, there have been works attempting to reduce computation by either skip tokens at higher layers or forward tokens to higher layers.

The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores.

The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function.

This results in an improved balance between accuracy and processing time.

TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, using reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained.

In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them.

The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning.

The schedule for LAT is found through an evolutionary search algorithm.

LTP ) trains a threshold for each Transformer layer, instead of following a predetermined schedule.

It simply drops tokens with attention scores lower than the learned threshold.

Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer.

This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.

Computation Reduction Different from skipping, computation reduction applies a reduced computational workload for some time steps instead of skipping it completely.

VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step.

Upon making the decision, only the corresponding proportion of the weight matrix will be used to update the hidden states while the rest part of the weight matrix will be masked out with zero.

Instead of using part of weights to update the hidden states, Skim-RNN (Seo et al., 2018) has a big RNN and a separate small RNN.

At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token.

If the model decides to skim, the small RNN will update only a fraction of the hid-den states.

Otherwise, a regular full update will be conducted by the big RNN.

Dynamic Hierarchical RNN Different from the aforementioned two categories of skimming, dynamic hierarchical RNN can increase computation by calling the upper layer RNN when needed.

HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture.

In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), they add a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.

In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed.

Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering.

It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.",implement,"LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism that can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.

Structural information that naturally exists in sentences can also play a role in skimming.

Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark, or question mark), or to the end of the text (i.e., stop reading).

In the era of Transformers, there have been works attempting to reduce computation by either skipping tokens at higher layers or forwarding tokens to higher layers.

The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores.

The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function.

This results in an improved balance between accuracy and processing time.

TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, employing reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained.

In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them.

The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning.

The schedule for LAT is found through an evolutionary search algorithm.

LTP trains a threshold for each Transformer layer, instead of following a predetermined schedule.

It simply drops tokens with attention scores lower than the learned threshold.

Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer.

This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.

Computation reduction, different from skipping, applies a reduced computational workload for some time steps instead of skipping them completely.

VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step.

Upon making the decision, only the corresponding proportion of the weight matrix is used to update the hidden states, while the rest of the weight matrix is masked out with zero.

Instead of using part of the weights to update the hidden states, Skim-RNN (Seo et al., 2018) employs a large RNN and a separate small RNN.

At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token.

If the model decides to skim, the small RNN will update only a fraction of the hidden states.

Otherwise, a regular full update will be conducted by the big RNN.

Dynamic Hierarchical RNN can increase computation by calling the upper layer RNN when needed.

HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture.

In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), HM-RNN adds a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.

In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed.

Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering.

It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.","Question:

How do dynamic neural networks utilize skimming and computation reduction techniques to improve efficiency in NLP tasks?

Answer:

LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism that can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.

Structural information that naturally exists in sentences can also play a role in skimming.

Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark, or question mark), or to the end of the text (i.e., stop reading).

In the era of Transformers, there have been works attempting to reduce computation by either skipping tokens at higher layers or forwarding tokens to higher layers.

The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores.

The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function.

This results in an improved balance between accuracy and processing time.

TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, employing reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained.

In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them.

The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning.

The schedule for LAT is found through an evolutionary search algorithm.

LTP trains a threshold for each Transformer layer, instead of following a predetermined schedule.

It simply drops tokens with attention scores lower than the learned threshold.

Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer.

This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.

Computation reduction, different from skipping, applies a reduced computational workload for some time steps instead of skipping them completely.

VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step.

Upon making the decision, only the corresponding proportion of the weight matrix is used to update the hidden states, while the rest of the weight matrix is masked out with zero.

Instead of using part of the weights to update the hidden states, Skim-RNN (Seo et al., 2018) employs a large RNN and a separate small RNN.

At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token.

If the model decides to skim, the small RNN will update only a fraction of the hidden states.

Otherwise, a regular full update will be conducted by the big RNN.

Dynamic Hierarchical RNN can increase computation by calling the upper layer RNN when needed.

HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture.

In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), HM-RNN adds a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.

In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed.

Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering.

It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding."
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Discursive information,13,"While most work on abstractive meeting summarization implicitly assumes that conversation is merely a linear sequence of utterances without semantic relations between them, example (1) underscores the importance of semantic relations for conversational understanding. Drawing on similar insights, certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993;Lascarides and Asher, 2008), to improve summarization. Accounts like RST and SDRT maintain that in a coherent conversation, each (roughly) clause-level unit should be semantically related to some other part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, Contrast, etc. to reflect its contribution to the larger discourse. Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations. Figure 2 il-  , 2021a). The * indicates summary-level (with sentence split) ROUGE-L score (Lin, 2004).

lustrates a possible SDRT graph for example (1).

To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries. They employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora. Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices. Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary. A dialogue-aware data augmentation strategy for constructing pseudo-summaries is introduced to pretrain the model.

An alternative approach to discourse interpretation that developed largely independently of RST and SDRT is dialogue act classification. Detailing the differences between the approaches is out of the scope of this paper, but in a nutshell, dialogue acts provide a shallower notion of discourse structure (Jurafsky et al., 1997) in that they do not entail a full graph structure over a conversation. On the other hand, systems for dialogue act labeling, such as DAMSL (Allen and Core, 1997; Core and Allen, 1997) or DiAML (Bunt et al., 2010(Bunt et al., , 2012, place more emphasis on interactive acts such as stalling to hold the floor, assessing other discourse moves, suggesting or informing.

Both the AMI and ICSI corpora provide gold dialogue act labels, and Goo and Chen (2018) use the labels from the AMI corpus to develop a sentence-gated mechanism that jointly models the relationships between dialogue acts and topic summaries to improve abstractive meeting summarization. In particular, they show that dialogue acts of the type inform are more closely linked to summary-worthy material than acts such as stall or assess. Using LSTM, their model consists of three components enhanced with various attention mechanisms: an utterance encoder, a dialogue act labeler, and a summary decoder.

Dialogue acts have also been used to good effect for summarizing decisions. Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution. Then, key fragments of the decision related utterances are retained to form an extractive decision summary. Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007.","sent1: While most work on abstractive meeting summarization implicitly assumes that conversation is merely a linear sequence of utterances without semantic relations between them, example (1) underscores the importance of semantic relations for conversational understanding.
sent2: Drawing on similar insights, certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993;Lascarides and Asher, 2008), to improve summarization.
sent3: Accounts like RST and SDRT maintain that in a coherent conversation, each (roughly) clause-level unit should be semantically related to some other part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, Contrast, etc. to reflect its contribution to the larger discourse.
sent4: Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations.
sent5: Figure 2 il-  , 2021a). The * indicates summary-level (with sentence split) ROUGE-L score (Lin, 2004).lustrates a possible SDRT graph for example (1).
sent6: To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries.
sent7: They employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora.
sent8: Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices.
sent9: Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary.
sent10: A dialogue-aware data augmentation strategy for constructing pseudo-summaries is introduced to pretrain the model.
sent11: An alternative approach to discourse interpretation that developed largely independently of RST and SDRT is dialogue act classification.
sent12: Detailing the differences between the approaches is out of the scope of this paper, but in a nutshell, dialogue acts provide a shallower notion of discourse structure (Jurafsky et al., 1997) in that they do not entail a full graph structure over a conversation.
sent13: On the other hand, systems for dialogue act labeling, such as DAMSL (Allen and Core, 1997; Core and Allen, 1997) or DiAML (Bunt et al., 2010(Bunt et al., , 2012, place more emphasis on interactive acts such as stalling to hold the floor, assessing other discourse moves, suggesting or informing.
sent14: Both the AMI and ICSI corpora provide gold dialogue act labels, and Goo and Chen (2018) use the labels from the AMI corpus to develop a sentence-gated mechanism that jointly models the relationships between dialogue acts and topic summaries to improve abstractive meeting summarization.
sent15: In particular, they show that dialogue acts of the type inform are more closely linked to summary-worthy material than acts such as stall or assess.
sent16: Using LSTM, their model consists of three components enhanced with various attention mechanisms: an utterance encoder, a dialogue act labeler, and a summary decoder.
sent17: Dialogue acts have also been used to good effect for summarizing decisions.
sent18: Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution.
sent19: Then, key fragments of the decision related utterances are retained to form an extractive decision summary.
sent20: Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007.","Question: How do recent approaches utilize discourse structure theories to improve abstractive meeting summarization?

Supporting sentence: sent2, sent3, sent4, sent6, sent7, sent8, sent9",How do recent approaches utilize discourse structure theories to improve abstractive meeting summarization?,"sent2, sent3, sent4, sent6, sent7, sent8, sent9",3,"Drawing on similar insights, certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993;Lascarides and Asher, 2008), to improve summarization.

Accounts like RST and SDRT maintain that in a coherent conversation, each (roughly) clause-level unit should be semantically related to some other part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, Contrast, etc. to reflect its contribution to the larger discourse.

Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations.

To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries.

They employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora.

Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices.

Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary.",implement,"Certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993; Lascarides and Asher, 2008), to improve abstractive meeting summarization.

These theories maintain that in a coherent conversation, each clause-level unit should be semantically related to another part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, or Contrast to reflect its contribution to the larger discourse.

Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations.

To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries.

Feng et al. (2020) employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora.

Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices.

Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary.","Question:

How do recent approaches utilize discourse structure theories to improve abstractive meeting summarization?

Answer:

Certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993; Lascarides and Asher, 2008), to improve abstractive meeting summarization.

These theories maintain that in a coherent conversation, each clause-level unit should be semantically related to another part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, or Contrast to reflect its contribution to the larger discourse.

Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations.

To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries.

Feng et al. (2020) employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora.

Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices.

Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary."
247627890,"Vision-and-Language Navigation: A Survey of Tasks, Methods, and Future Directions",https://www.semanticscholar.org/paper/4f1d598f919aae55c3cbbc425ef1514a54e2b8cd,Initial Instruction,5,"In many VLN benchmarks, the agent is given a natural language instruction for the whole navigation process, such as ""Go upstairs and pass the table in the living room. Turn left and go through the door in the middle."" Fine-grained Navigation An agent needs to strictly follow the natural language instruction to reach the target goal. Anderson et al. (2018b) create the R2R dataset based on the Matterport3D simulator (Chang et al., 2017). An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views. R2R is extended to create other VLN benchmarks. Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019). Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018) RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments. In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview rendered simulation of New York City to find a hidden object. Most photo-realistic outdoor VLN datasets including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019;Mehta et al., 2020), StreetNav(Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021 are proposed based on Google Street View.

Some work uses natural language to guide drones. LANI (Misra et al., 2018) is a 3D synthetic navigation environment, where an agent navigates between landmarks following natural language instructions. Current datasets on drone navigation usually fall in a synthetic environment such as Unity3D (Blukis et al., 2018.","sent1: In many VLN benchmarks, the agent is given a natural language instruction for the whole navigation process, such as ""Go upstairs and pass the table in the living room.
sent2: Turn left and go through the door in the middle.""
sent3: Fine-grained Navigation An agent needs to strictly follow the natural language instruction to reach the target goal.
sent4: Anderson et al. (2018b) create the R2R dataset based on the Matterport3D simulator (Chang et al., 2017).
sent5: An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views.
sent6: R2R is extended to create other VLN benchmarks.
sent7: Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019).
sent8: Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018) RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments.
sent9: In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview rendered simulation of New York City to find a hidden object.
sent10: Most photo-realistic outdoor VLN datasets including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019;Mehta et al., 2020), StreetNav(Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021 are proposed based on Google Street View.
sent11: Some work uses natural language to guide drones.
sent12: LANI (Misra et al., 2018) is a 3D synthetic navigation environment, where an agent navigates between landmarks following natural language instructions.
sent13: Current datasets on drone navigation usually fall in a synthetic environment such as Unity3D (Blukis et al., 2018.","Question: What are the key characteristics and challenges of outdoor vision-and-language navigation (VLN) datasets?

Supporting sentence: sent9, sent10, sent11",What are the key characteristics and challenges of outdoor vision-and-language navigation (VLN) datasets?,"sent9, sent10, sent11",3,"In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview rendered simulation of New York City to find a hidden object.

Most photo-realistic outdoor VLN datasets including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019;Mehta et al., 2020), StreetNav(Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021 are proposed based on Google Street View.

Some work uses natural language to guide drones.",implement,"In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview-rendered simulation of New York City to find a hidden object.

Most photo-realistic outdoor VLN datasets, including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019; Mehta et al., 2020), StreetNav (Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021), are based on Google Street View.

Some work uses natural language to guide drones.","Question:

What are the key characteristics and challenges of outdoor vision-and-language navigation (VLN) datasets?

Answer:

In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview-rendered simulation of New York City to find a hidden object.

Most photo-realistic outdoor VLN datasets, including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019; Mehta et al., 2020), StreetNav (Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021), are based on Google Street View.

Some work uses natural language to guide drones."
236460241,A Survey of Code-switching: Linguistic and Social Perspectives for Language Technologies,https://www.semanticscholar.org/paper/ee6d66efc86746d42ace14db30fcbaf9d3380e25,C-S across Languages: European Context,24,"The contexts in which people acquire and use multiple languages in Europe are diverse. Some acquire their languages simultaneously from birth, while others acquire them sequentially, either naturally or via explicit instruction. Multilingualism is the norm in many zones where local residents may speak different languages to accommodate their interlocutors. Speakers who use local dialects or minoritized varieties may also be engaged in C-S when switching between their variety and a dominant one (Mills and Washington, 2015;Blom and Gumperz, 1972). C-S in bilingual language acquisition of children has been studied across language contact contexts in Europe. In Germany, Herkenrath (2012) and Pfaff (1999) focused on Turkish-German C-S and Meisel (1994) on German-French C-S of bilingual children. From a comparative perspective, Poeste et al. (2019) analyzed C-S among bilingual, trilingual, and multilingual children growing up in Spain and Germany. In the Netherlands, Bosma and Blom (2019) focused on C-S among bilingual Frisian-Dutch children. In addition to analyzing C-S in children's speech, Juan-Garau and Perez-Vidal (2001) and Lanza (1998) investigated C-S in the interaction patterns between bilingual children and their parents (i.e. Spanish-Catalan and English-Norwegian respectively).

Within an educational setting, Kleeman (2012) observed C-S among bilingual (North Sami-Norwegian) kindergarten children in the North of Norway. Similarly, Jørgensen (1998) and Cromdal (2004) report the use of C-S for resolving disputes among bilingual (Turkish-Danish) children in Denmark and multilingual (Swedish-English and/or a Non-Scandinavian Language) children in Sweden respectively.

C-S does not only take place between standard languages but between minority languages and dialects as well. For example, Themistocleous (2013) studied C-S between Greek and Cypriot Greek and Deuchar (2006) focused on the C-S between Welsh and English in the UK. Berruto (2005) reports cases of language mixing between standard Italian and Italoromance dialects in Italy. In the Balkans, Kyuchukov (2006) analyzed C-S between Turkish-Bulgarian and Romani in Bulgaria. C-S between dialects and/or standard vs. minority languages in computer mediated interaction was analyzed by Siebenhaar (2006) among Swiss-German dialects and by Robert-Tissot and Morel (2017) through SMS corpora collected across Germanic (i.e. English and German) and Romance languages (French, Spanish, Italian) in Switzerland.

C-S is commonly observable across immigrant contexts in Europe. In the UK, Georgakopoulou and Finnis (2009) described the C-S patterns between English and Cypriot Greek while Issa (2006) focused on the C-S between English and Cypriot Turkish communities in London. Wei and Milroy (1995) analyzed the C-S between English and Chinese from a conversational analysis point of view based on the interactions of bilingual (Chinese-English) families in Northeastern England. In addition, Ożańska-Ponikwia (2016) investigated the Polish-English C-S in the UK as well. C-S among immigrant community members have also been widely studied in Germany (e.g. Turkish-German C-S by Keim (2008) and Ç etinoglu (2017), Russian-German C-S by Khakimov (2016)). In the Netherlands, C-S studies include Turkish-Dutch C-S by Backus (2010) and Dutch-Morroccan C-S by Nortier (1990). In Belgium, Meeuws and Blommaert (1998) studied the French-Lingala-Swahili C-S among immigrants of Zaire and Treffers-Daller (1994) studied French-Dutch C-S in Brussels. In Spain, Jieanu (2013) describes the Romanian-Spanish C-S among the Romanian immigrants. In addition to the C-S analyses within spoken interactions of immigrant communities across Europe, there are also studies about C-S within computer mediated communication as well. These studies include Greek-German C-S by Androutsopoulos (2015) in Germany, Turkish-Dutch C-S by Papalexakis et al. (2014), Papalexakis and Dogruöz (2015) and a comparison of Turkish-Dutch and Moroccan-Dutch C-S by Dorleijn and Nortier (2009) in the Netherlands. Similarly, Marley (2011) compared French-Arabic C-S within computer mediated interaction across Moroccan communities in France and the UK.

In addition to daily communication, some linguists are also interested in the C-S observed in historical documents. While Swain (2002) explored Latin-Greek C-S by Cicero (Roman Statesman), Dunkel (2000) analyzed C-S in his communication with Atticus (Roman philosopher who studied in Athens) in the Roman Empire. Argenter (2001) reports cases of language mixing within the Catalan Jewish community (in Spain) in the 14th and 15th centuries and Rothman (2011) highlights the C-S between Italian, Slavic and Turkish in the historical documents about Ottoman-Venetian relations. In Switzerland, Volk and Clematide (2014) worked on detecting and annotating C-S patterns in diachronic and multilingual (English, French, German, Italian, Romansh and Swiss German) Alpine Heritage corpus.

Within the media context, Martin (1998) investigated English C-S in written French advertising, and Onysko (2007) investigated the English C-S in German written media through corpus analyses. Zhiganova (2016) indicates that German speakers perceive C-S into English for advertising purposes with both positive and negative consequences.

Similar to humans, institutions and/or organizations could also have multilingual communication with their members and/or audience. For example, Wodak et al. (2012) analyzed the C-S and language choice at the institutional level for European Union institutions.","sent1: The contexts in which people acquire and use multiple languages in Europe are diverse.
sent2: Some acquire their languages simultaneously from birth, while others acquire them sequentially, either naturally or via explicit instruction.
sent3: Multilingualism is the norm in many zones where local residents may speak different languages to accommodate their interlocutors.
sent4: Speakers who use local dialects or minoritized varieties may also be engaged in C-S when switching between their variety and a dominant one (Mills and Washington, 2015;Blom and Gumperz, 1972). C-S in bilingual language acquisition of children has been studied across language contact contexts in Europe.
sent5: In Germany, Herkenrath (2012) and Pfaff (1999) focused on Turkish-German C-S and Meisel (1994) on German-French C-S of bilingual children.
sent6: From a comparative perspective, Poeste et al. (2019) analyzed C-S among bilingual, trilingual, and multilingual children growing up in Spain and Germany.
sent7: In the Netherlands, Bosma and Blom (2019) focused on C-S among bilingual Frisian-Dutch children.
sent8: In addition to analyzing C-S in children's speech, Juan-Garau and Perez-Vidal (2001) and Lanza (1998) investigated C-S in the interaction patterns between bilingual children and their parents (i.e. Spanish-Catalan and English-Norwegian respectively).
sent9: Within an educational setting, Kleeman (2012) observed C-S among bilingual (North Sami-Norwegian) kindergarten children in the North of Norway.
sent10: Similarly, Jørgensen (1998) and Cromdal (2004) report the use of C-S for resolving disputes among bilingual (Turkish-Danish) children in Denmark and multilingual (Swedish-English and/or a Non-Scandinavian Language) children in Sweden respectively.
sent11: C-S does not only take place between standard languages but between minority languages and dialects as well.
sent12: For example, Themistocleous (2013) studied C-S between Greek and Cypriot Greek and Deuchar (2006) focused on the C-S between Welsh and English in the UK.
sent13: Berruto (2005) reports cases of language mixing between standard Italian and Italoromance dialects in Italy.
sent14: In the Balkans, Kyuchukov (2006) analyzed C-S between Turkish-Bulgarian and Romani in Bulgaria.
sent15: C-S between dialects and/or standard vs. minority languages in computer mediated interaction was analyzed by Siebenhaar (2006) among Swiss-German dialects and by Robert-Tissot and Morel (2017) through SMS corpora collected across Germanic (i.e. English and German) and Romance languages (French, Spanish, Italian) in Switzerland.C-S is commonly observable across immigrant contexts in Europe.
sent16: In the UK, Georgakopoulou and Finnis (2009) described the C-S patterns between English and Cypriot Greek while Issa (2006) focused on the C-S between English and Cypriot Turkish communities in London.
sent17: Wei and Milroy (1995) analyzed the C-S between English and Chinese from a conversational analysis point of view based on the interactions of bilingual (Chinese-English) families in Northeastern England.
sent18: In addition, Ożańska-Ponikwia (2016) investigated the Polish-English C-S in the UK as well.
sent19: C-S among immigrant community members have also been widely studied in Germany (e.g. Turkish-German C-S by Keim (2008) and Ç etinoglu (2017), Russian-German C-S by Khakimov (2016)).
sent20: In the Netherlands, C-S studies include Turkish-Dutch C-S by Backus (2010) and Dutch-Morroccan C-S by Nortier (1990).
sent21: In Belgium, Meeuws and Blommaert (1998) studied the French-Lingala-Swahili C-S among immigrants of Zaire and Treffers-Daller (1994) studied French-Dutch C-S in Brussels.
sent22: In Spain, Jieanu (2013) describes the Romanian-Spanish C-S among the Romanian immigrants.
sent23: In addition to the C-S analyses within spoken interactions of immigrant communities across Europe, there are also studies about C-S within computer mediated communication as well.
sent24: These studies include Greek-German C-S by Androutsopoulos (2015) in Germany, Turkish-Dutch C-S by Papalexakis et al. (2014), Papalexakis and Dogruöz (2015) and a comparison of Turkish-Dutch and Moroccan-Dutch C-S by Dorleijn and Nortier (2009) in the Netherlands.
sent25: Similarly, Marley (2011) compared French-Arabic C-S within computer mediated interaction across Moroccan communities in France and the UK.
sent26: In addition to daily communication, some linguists are also interested in the C-S observed in historical documents.
sent27: While Swain (2002) explored Latin-Greek C-S by Cicero (Roman Statesman), Dunkel (2000) analyzed C-S in his communication with Atticus (Roman philosopher who studied in Athens) in the Roman Empire.
sent28: Argenter (2001) reports cases of language mixing within the Catalan Jewish community (in Spain) in the 14th and 15th centuries and Rothman (2011) highlights the C-S between Italian, Slavic and Turkish in the historical documents about Ottoman-Venetian relations.
sent29: In Switzerland, Volk and Clematide (2014) worked on detecting and annotating C-S patterns in diachronic and multilingual (English, French, German, Italian, Romansh and Swiss German) Alpine Heritage corpus.
sent30: Within the media context, Martin (1998) investigated English C-S in written French advertising, and Onysko (2007) investigated the English C-S in German written media through corpus analyses.
sent31: Zhiganova (2016) indicates that German speakers perceive C-S into English for advertising purposes with both positive and negative consequences.
sent32: Similar to humans, institutions and/or organizations could also have multilingual communication with their members and/or audience.
sent33: For example, Wodak et al. (2012) analyzed the C-S and language choice at the institutional level for European Union institutions.","Question: How is code-switching (C-S) studied in the context of immigrant communities in Europe?

Supporting sentence: sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25",How is code-switching (C-S) studied in the context of immigrant communities in Europe?,"sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25",9,"In the UK, Georgakopoulou and Finnis (2009) described the C-S patterns between English and Cypriot Greek while Issa (2006) focused on the C-S between English and Cypriot Turkish communities in London.

Wei and Milroy (1995) analyzed the C-S between English and Chinese from a conversational analysis point of view based on the interactions of bilingual (Chinese-English) families in Northeastern England.

In addition, Ożańska-Ponikwia (2016) investigated the Polish-English C-S in the UK as well.

C-S among immigrant community members have also been widely studied in Germany (e.g. Turkish-German C-S by Keim (2008) and Ç etinoglu (2017), Russian-German C-S by Khakimov (2016)).

In the Netherlands, C-S studies include Turkish-Dutch C-S by Backus (2010) and Dutch-Morroccan C-S by Nortier (1990).

In Belgium, Meeuws and Blommaert (1998) studied the French-Lingala-Swahili C-S among immigrants of Zaire and Treffers-Daller (1994) studied French-Dutch C-S in Brussels.

In Spain, Jieanu (2013) describes the Romanian-Spanish C-S among the Romanian immigrants.

In addition to the C-S analyses within spoken interactions of immigrant communities across Europe, there are also studies about C-S within computer mediated communication as well.

These studies include Greek-German C-S by Androutsopoulos (2015) in Germany, Turkish-Dutch C-S by Papalexakis et al. (2014), Papalexakis and Dogruöz (2015) and a comparison of Turkish-Dutch and Moroccan-Dutch C-S by Dorleijn and Nortier (2009) in the Netherlands.

Similarly, Marley (2011) compared French-Arabic C-S within computer mediated interaction across Moroccan communities in France and the UK.",invalid,,"Question:

How is code-switching (C-S) studied in the context of immigrant communities in Europe?

Answer:

nan"
232320384,A Survey on Multimodal Disinformation Detection,https://www.semanticscholar.org/paper/71d2dc1fc38e0c48c865de5f5c023ccf7c5ad018,Multimodal Harmful Content Detection,7,"In this section, we focus on the second aspect of disinformation: harmfulness. It is essential to filter or to flag online harmful content. The harmful content includes child abuse material, violent and extreme content, hate speech, graphic content, sexual content, and spam content (Banko et al., 2020). 3 In recent years, the ability to recognize harmful content within online communities has received a lot of attention by researchers (Pramanick et al., 2021a,b) and policymakers that aim to keep users safe in the digital world. Studies in this direction include detecting harmful contents in network science (Ribeiro et al., 2018), natural language processing (Waseem et al., 2017;Schmidt and Wiegand, 2017b;Fortuna and Nunes, 2018) and computer vision (Yang et al., 2019a;Vijayaraghavan et al., 2021;Gomez et al., 2020;Dimitrov et al., 2021b). In Table 2, we provide a list of relevant work addressing different types of harmful content, modalities, source of data, annotation approach, language of the content and the methods.","sent1: In this section, we focus on the second aspect of disinformation: harmfulness.
sent2: It is essential to filter or to flag online harmful content.
sent3: The harmful content includes child abuse material, violent and extreme content, hate speech, graphic content, sexual content, and spam content (Banko et al., 2020). 3
sent4: In recent years, the ability to recognize harmful content within online communities has received a lot of attention by researchers (Pramanick et al., 2021a,b) and policymakers that aim to keep users safe in the digital world.
sent5: Studies in this direction include detecting harmful contents in network science (Ribeiro et al., 2018), natural language processing (Waseem et al., 2017;Schmidt and Wiegand, 2017b;Fortuna and Nunes, 2018) and computer vision (Yang et al., 2019a;Vijayaraghavan et al., 2021;Gomez et al., 2020;Dimitrov et al., 2021b).
sent6: In Table 2, we provide a list of relevant work addressing different types of harmful content, modalities, source of data, annotation approach, language of the content and the methods.","Question: What are the various types of harmful content that need to be detected in online communities?

Supporting sentence: sent3, sent4, sent5",What are the various types of harmful content that need to be detected in online communities?,"sent3, sent4, sent5",9,"The harmful content includes child abuse material, violent and extreme content, hate speech, graphic content, sexual content, and spam content (Banko et al., 2020). 3

In recent years, the ability to recognize harmful content within online communities has received a lot of attention by researchers (Pramanick et al., 2021a,b) and policymakers that aim to keep users safe in the digital world.

Studies in this direction include detecting harmful contents in network science (Ribeiro et al., 2018), natural language processing (Waseem et al., 2017;Schmidt and Wiegand, 2017b;Fortuna and Nunes, 2018) and computer vision (Yang et al., 2019a;Vijayaraghavan et al., 2021;Gomez et al., 2020;Dimitrov et al., 2021b).",invalid,,"Question:

What are the various types of harmful content that need to be detected in online communities?

Answer:

nan"
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Large and Premium Data,6,"As the sizes of LLMs increase in the field of NL2Code, the scale of the corpus used for training also increases. This highlights the importance of selecting and pre-processing high-quality data. In this section, we will discuss various commonly used data sources and pre-processing strategies that are essential for training LLMs.

Early models were trained using manually annotated data pairs of NL and code, and the data sources include CodeSearchNet (Husain et al., 2019), CoST (Zhu et al., 2022b), and XL-CoST (Zhu et al., 2022a). However, manual annotation is labour-intensive and time-consuming. There are also models like GPT-3 (Brown et al., 2020), GPT-Neo (Black et al., 2021), and GPT-J (Wang and Komatsuzaki, 2021)  In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data. We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities. One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless. Additionally, specific rules are employed to filter out uncommon code files. These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate. In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","sent1: As the sizes of LLMs increase in the field of NL2Code, the scale of the corpus used for training also increases.
sent2: This highlights the importance of selecting and pre-processing high-quality data.
sent3: In this section, we will discuss various commonly used data sources and pre-processing strategies that are essential for training LLMs.
sent4: Early models were trained using manually annotated data pairs of NL and code, and the data sources include CodeSearchNet (Husain et al., 2019), CoST (Zhu et al., 2022b), and XL-CoST (Zhu et al., 2022a).
sent5: However, manual annotation is labour-intensive and time-consuming.
sent6: There are also models like GPT-3 (Brown et al., 2020), GPT-Neo (Black et al., 2021), and GPT-J (Wang and Komatsuzaki, 2021)
sent7: In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.
sent8: We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities.
sent9: One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.
sent10: Additionally, specific rules are employed to filter out uncommon code files.
sent11: These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.
sent12: In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","Question: What are the common data pre-processing strategies used to ensure high-quality training corpora for large language models in NL2Code?

Supporting sentence: sent7, sent8, sent9, sent10, sent11, sent12",What are the common data pre-processing strategies used to ensure high-quality training corpora for large language models in NL2Code?,"sent7, sent8, sent9, sent10, sent11, sent12",3,"In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.

We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities.

One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.

In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.",implement,"To ensure the quality of the training corpus, it is common for large language models (LLMs) to perform data preprocessing on the significant amount of code in the collected data.

Several common data pre-processing methods are identified from the review of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b).

One common method is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.

In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","Question:

What are the common data pre-processing strategies used to ensure high-quality training corpora for large language models in NL2Code?

Answer:

To ensure the quality of the training corpus, it is common for large language models (LLMs) to perform data preprocessing on the significant amount of code in the collected data.

Several common data pre-processing methods are identified from the review of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b).

One common method is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.

In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature."
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Models,8,"A generative approach models the joint probability of the sentence and the corresponding parse tree. Traditional generative models are mostly based on probabilistic grammars. To enable efficient inference, they typically make one or more relatively strict conditional independence assumptions. The simplest assumption (a.k.a. the context-free assumption) states that the generation of a token is only dependent on its head token and is independent of anything else. Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference. However, they also lead to unavailability of useful information (e.g., context and generation history) in generating each token.

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree. Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner. The generation of a child token is conditioned on the head token and the dependency direction. In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously. Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token. Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token. Headden  propose to also introduce the valence into the condition of decision sampling. Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context. Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information. In addition to these generative dependency models, other grammar formalisms have also been used for unsupervised dependency parsing, such as tree substitution grammars (Blunsom and Cohn, 2010) and combinatory categorial grammars (Bisk and Hockenmaier, 2012;Bisk and Hockenmaier, 2013).

Similar tokens may have similar syntactic behaviors in a grammar. For example, all the verbs are very likely to generate a noun to the left as the subject. One way to capture this prior knowledge is to compute generation probabilities from a set of features that conveys syntactic similarity.  use a log-linear model based on manually-designed local morpho-syntactic features (e.g., whether a word is a noun) and Jiang et al. (2016) employ a neural network to automatically learn such features. Both approaches are based on DMV.","sent1: A generative approach models the joint probability of the sentence and the corresponding parse tree.
sent2: Traditional generative models are mostly based on probabilistic grammars.
sent3: To enable efficient inference, they typically make one or more relatively strict conditional independence assumptions.
sent4: The simplest assumption (a.k.a. the context-free assumption) states that the generation of a token is only dependent on its head token and is independent of anything else.
sent5: Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference.
sent6: However, they also lead to unavailability of useful information (e.g., context and generation history) in generating each token.
sent7: Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.
sent8: Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.
sent9: The generation of a child token is conditioned on the head token and the dependency direction.
sent10: In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.
sent11: Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.
sent12: Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token.
sent13: Headden  propose to also introduce the valence into the condition of decision sampling.
sent14: Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.
sent15: Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.
sent16: In addition to these generative dependency models, other grammar formalisms have also been used for unsupervised dependency parsing, such as tree substitution grammars (Blunsom and Cohn, 2010) and combinatory categorial grammars (Bisk and Hockenmaier, 2012;Bisk and Hockenmaier, 2013).
sent17: Similar tokens may have similar syntactic behaviors in a grammar.
sent18: For example, all the verbs are very likely to generate a noun to the left as the subject.
sent19: One way to capture this prior knowledge is to compute generation probabilities from a set of features that conveys syntactic similarity.
sent20: use a log-linear model based on manually-designed local morpho-syntactic features (e.g., whether a word is a noun) and Jiang et al. (2016) employ a neural network to automatically learn such features.
sent21: Both approaches are based on DMV.","Question: What are the key generative models used in unsupervised dependency parsing, and how do they differ in their generation processes?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15","What are the key generative models used in unsupervised dependency parsing, and how do they differ in their generation processes?","sent1, sent2, sent3, sent4, sent5, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",2,"A generative approach models the joint probability of the sentence and the corresponding parse tree.

Traditional generative models are mostly based on probabilistic grammars.

To enable efficient inference, they typically make one or more relatively strict conditional independence assumptions.

The simplest assumption (a.k.a. the context-free assumption) states that the generation of a token is only dependent on its head token and is independent of anything else.

Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference.

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.

Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.

Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token.

Headden  propose to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.",implement,"A generative approach models the joint probability of the sentence and the corresponding parse tree.

Traditional generative models are mostly based on probabilistic grammars.

To enable efficient inference, these models typically make one or more relatively strict conditional independence assumptions.

The simplest assumption, known as the context-free assumption, states that the generation of a token is only dependent on its head token and is independent of anything else.

Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference.

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.

For instance, Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token in the DMV has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.

Additionally, the generation of a child token in DMV is conditioned on the valence, which is defined as the number of child tokens already generated from a head token.

Headden propose to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.","Question:

What are the key generative models used in unsupervised dependency parsing, and how do they differ in their generation processes?

Answer:

A generative approach models the joint probability of the sentence and the corresponding parse tree.

Traditional generative models are mostly based on probabilistic grammars.

To enable efficient inference, these models typically make one or more relatively strict conditional independence assumptions.

The simplest assumption, known as the context-free assumption, states that the generation of a token is only dependent on its head token and is independent of anything else.

Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference.

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.

For instance, Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token in the DMV has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.

Additionally, the generation of a child token in DMV is conditioned on the valence, which is defined as the number of child tokens already generated from a head token.

Headden propose to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information."
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,Two-Stage Supervised Keyphrase Extraction Models,8,"Different from two-stage unsupervised approaches, supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guide the whole model to rank and extract keyphrases through annotated data and optimize the two stages simultaneously. Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations. BLING-KPE achieves significant improvement over previous models. To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction. Later, Ainslie et al. (2020) replaces the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents. SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context. JointKPE 10 (Sun et al., 2020a) proposes an opendomain keyphrase extraction approach built on pretrained language models (Devlin et al., 2019;, which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP 11 (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introducing a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases. To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space. Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.  ","sent1: Different from two-stage unsupervised approaches, supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guide the whole model to rank and extract keyphrases through annotated data and optimize the two stages simultaneously.
sent2: Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations.
sent3: BLING-KPE achieves significant improvement over previous models.
sent4: To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.
sent5: Later, Ainslie et al. (2020) replaces the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents.
sent6: SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context.
sent7: JointKPE 10 (Sun et al., 2020a) proposes an opendomain keyphrase extraction approach built on pretrained language models (Devlin et al., 2019;, which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP 11 (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introducing a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases.
sent8: To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space.
sent9: Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.","Question: What are the recent advancements in supervised keyphrase extraction models and their key techniques?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the recent advancements in supervised keyphrase extraction models and their key techniques?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",3,"Different from two-stage unsupervised approaches, supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guide the whole model to rank and extract keyphrases through annotated data and optimize the two stages simultaneously.

Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations.

BLING-KPE achieves significant improvement over previous models.

To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.

Later, Ainslie et al. (2020) replaces the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents.

SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context.

JointKPE 10 (Sun et al., 2020a) proposes an opendomain keyphrase extraction approach built on pretrained language models (Devlin et al., 2019;, which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP 11 (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introducing a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases.

To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space.

Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.",implement,"Supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guiding the whole model to rank and extract keyphrases through annotated data and optimizing the two stages simultaneously.

Recent supervised models, such as the one by Xiong et al. (2019), formulate keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, incorporating pre-trained embeddings like ELMo (Peters et al., 2018) into a convolutional transformer network to model n-gram representations.

BLING-KPE achieves significant improvement over previous models.

To leverage external knowledge to assist keyphrase extraction, SMART-KPE shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.

Later, Ainslie et al. (2020) replace the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents.

SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context.

JointKPE (Sun et al., 2020a) proposes an open-domain keyphrase extraction approach built on pre-trained language models (Devlin et al., 2019), which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introduces a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases.

To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space.

Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.","Question:

What are the recent advancements in supervised keyphrase extraction models and their key techniques?

Answer:

Supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guiding the whole model to rank and extract keyphrases through annotated data and optimizing the two stages simultaneously.

Recent supervised models, such as the one by Xiong et al. (2019), formulate keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, incorporating pre-trained embeddings like ELMo (Peters et al., 2018) into a convolutional transformer network to model n-gram representations.

BLING-KPE achieves significant improvement over previous models.

To leverage external knowledge to assist keyphrase extraction, SMART-KPE shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.

Later, Ainslie et al. (2020) replace the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents.

SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context.

JointKPE (Sun et al., 2020a) proposes an open-domain keyphrase extraction approach built on pre-trained language models (Devlin et al., 2019), which can capture both local phraseness and global informativeness when extracting keyphrases.

JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates.

KIEMP (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introduces a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases.

To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space.

Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases."
254854669,Let's Negotiate! A Survey of Negotiation Dialogue Systems,https://www.semanticscholar.org/paper/0974035826cd6d4be9c604a8679621c8621aff5f,Integrative Strategy,4,"Integrative strategy (known as win-win) modeling aims to achieve mutual gain among participants. For instance, Zhao et al. (2019) proposes to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework. LaRL can model strategy transition within a latent space. However, due to the lack of explicit strategy labels, LaRL can only analysis strategies in implicit space.

To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy. While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion. In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model. Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, which goal is to reach an agreement between employer and employee. It assists humans in becoming better negotiators during this process, e.g., communicating politely, addressing concerns, and providing side offers.","sent1: Integrative strategy (known as win-win) modeling aims to achieve mutual gain among participants.
sent2: For instance, Zhao et al. (2019) proposes to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework.
sent3: LaRL can model strategy transition within a latent space.
sent4: However, due to the lack of explicit strategy labels, LaRL can only analysis strategies in implicit space.
sent5: To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy.
sent6: While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.
sent7: In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model.
sent8: Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, which goal is to reach an agreement between employer and employee.
sent9: It assists humans in becoming better negotiators during this process, e.g., communicating politely, addressing concerns, and providing side offers.","Question: What are the methods used to model integrative strategies in negotiation dialogue systems?

Supporting sentence: sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the methods used to model integrative strategies in negotiation dialogue systems?,"sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",4,"For instance, Zhao et al. (2019) proposes to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework.

LaRL can model strategy transition within a latent space.

However, due to the lack of explicit strategy labels, LaRL can only analysis strategies in implicit space.

To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy.

While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.

In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model.

Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, which goal is to reach an agreement between employer and employee.

It assists humans in becoming better negotiators during this process, e.g., communicating politely, addressing concerns, and providing side offers.",implement,"Zhao et al. (2019) propose to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework.

LaRL can model strategy transition within a latent space.

However, due to the lack of explicit strategy labels, LaRL can only analyze strategies in an implicit space.

To resolve this problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination, and Empathy.

While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.

To capture the user's preference, Chawla et al. (2022) utilize these strategies using a hierarchical neural model.

Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, aiming to reach an agreement between employer and employee.

It assists humans in becoming better negotiators during this process, for example, by communicating politely, addressing concerns, and providing side offers.","Question:

What are the methods used to model integrative strategies in negotiation dialogue systems?

Answer:

Zhao et al. (2019) propose to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework.

LaRL can model strategy transition within a latent space.

However, due to the lack of explicit strategy labels, LaRL can only analyze strategies in an implicit space.

To resolve this problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination, and Empathy.

While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.

To capture the user's preference, Chawla et al. (2022) utilize these strategies using a hierarchical neural model.

Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, aiming to reach an agreement between employer and employee.

It assists humans in becoming better negotiators during this process, for example, by communicating politely, addressing concerns, and providing side offers."
254854317,The Decades Progress on Code-Switching Research in NLP: A Systematic Survey on Trends and Challenges,https://www.semanticscholar.org/paper/44ebfdb670007b3949507be0d1a1fca93bc3d5d5,Linguistic-Driven Approaches,4,"Equivalence Constraint In a well-formed codeswitched sentence, the switching takes place at those points where the grammatical constraints of both languages are satisfied (Poplack, 1980). Fung (2012, 2013) incorporate this syntactic constraint to a statistical code-switch language model (LM) and evaluate the model on Chinese-English code-switched speech recognition. On the same line of work, Pratapa et al. (2018a); Pratapa and Choudhury (2021) implement the same constraint to Hindi-English CSW data by producing parse trees of parallel sentences and matching the surface order of child nodes in the trees. Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity. They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.

Matrix-Embedded Language Framework (MLF) Myers-Scotton (1997) proposed that in bilingual CSW, there exists an asymmetrical relationship between the dominant matrix language and the subordinate embedded language.

Matrix language provides the frame of the sentence by governing all or most of the most of the grammatical morphemes as well as word order, whereas syntactic elements that bear no or only limited grammatical function can be provided by the embedded language (Johanson, 1999;Myers-Scotton, 2005 Functional Head Constraint Belazi et al. (1994) posit that it is impossible to switch languages between a functional head and its complement because of the strong relationship between the two constituents. Li and Fung (2014) use the constraint of the LM by first expanding the search network with a translation model and then using parsing to restrict paths to those permissible under the constraint.","sent1: Equivalence Constraint In a well-formed codeswitched sentence, the switching takes place at those points where the grammatical constraints of both languages are satisfied (Poplack, 1980).
sent2: Fung (2012, 2013) incorporate this syntactic constraint to a statistical code-switch language model (LM) and evaluate the model on Chinese-English code-switched speech recognition.
sent3: On the same line of work, Pratapa et al. (2018a); Pratapa and Choudhury (2021) implement the same constraint to Hindi-English CSW data by producing parse trees of parallel sentences and matching the surface order of child nodes in the trees.
sent4: Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity.
sent5: They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.
sent6: Matrix-Embedded Language Framework (MLF) Myers-Scotton (1997) proposed that in bilingual CSW, there exists an asymmetrical relationship between the dominant matrix language and the subordinate embedded language.
sent7: Matrix language provides the frame of the sentence by governing all or most of the most of the grammatical morphemes as well as word order, whereas syntactic elements that bear no or only limited grammatical function can be provided by the embedded language
sent8: (Johanson, 1999;Myers-Scotton, 2005 Functional Head Constraint Belazi et al. (1994) posit that it is impossible to switch languages between a functional head and its complement because of the strong relationship between the two constituents.
sent9: Li and Fung (2014) use the constraint of the LM by first expanding the search network with a translation model and then using parsing to restrict paths to those permissible under the constraint.","Question: How have linguistic-driven approaches incorporated syntactic constraints to improve code-switched language models?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",How have linguistic-driven approaches incorporated syntactic constraints to improve code-switched language models?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8",2,"Equivalence Constraint In a well-formed codeswitched sentence, the switching takes place at those points where the grammatical constraints of both languages are satisfied (Poplack, 1980).

Fung (2012, 2013) incorporate this syntactic constraint to a statistical code-switch language model (LM) and evaluate the model on Chinese-English code-switched speech recognition.

On the same line of work, Pratapa et al. (2018a); Pratapa and Choudhury (2021) implement the same constraint to Hindi-English CSW data by producing parse trees of parallel sentences and matching the surface order of child nodes in the trees.

Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity.

They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.

Matrix-Embedded Language Framework (MLF) Myers-Scotton (1997) proposed that in bilingual CSW, there exists an asymmetrical relationship between the dominant matrix language and the subordinate embedded language.

Matrix language provides the frame of the sentence by governing all or most of the most of the grammatical morphemes as well as word order, whereas syntactic elements that bear no or only limited grammatical function can be provided by the embedded language

(Johanson, 1999;Myers-Scotton, 2005 Functional Head Constraint Belazi et al. (1994) posit that it is impossible to switch languages between a functional head and its complement because of the strong relationship between the two constituents.",skip,,"Question:

How have linguistic-driven approaches incorporated syntactic constraints to improve code-switched language models?

Answer:

nan"
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Large Language Models for NL2Code,9,"Given a natural language problem description, the NL2Code task aims to automatically generate the demanded code. To illustrate this task visually, we provide a Python programming problem as an example in Figure 1, while different NL2Code benchmarks may vary in terms of language or 2 We summarize the related surveys in Appendix A.  problem domain. Existing large language models for the NL2Code task are usually based on Transformer (Vaswani et al., 2017) and are trained on a large-scale code related unlabelled corpus. For better code generation performance, most LLMs, no matter encoder-decoder or decoder-only models, employ the causal language modeling objective for training, which is to predict the token following a sequence of tokens. During inference, an LLM can tackle NL2Code problems in a zero-shot manner without fine-tuning its parameters. There are also studies employing few-shot (Austin et al., 2021) or in-context learning (Nijkamp et al., 2023) to further boost the performance. We conduct a comprehensive investigation of 27 representative LLMs for the NL2Code task. Details of each model are summarized in Table 1, where models vary in architecture, size, and accessibility. For better visualization, we present these models in chronological order in Figure 2, plotting the largest model sizes. One trend observed is that these large language models are consistently growing in size as the research field advances. Additionally, the decoder-only architecture is favoured for pre-trained models with larger sizes.

Early works, such as GPT-C (Svyatkovskiy et al., 2020), PyMT5 (Clement et al., 2020), and PLBART (Ahmad et al., 2021), have relatively small numbers of parameters and do not demonstrate strong capabilities in zero-shot code generation. Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus. Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code. While they show surprisingly good performance on NL2Code, most of them are not readily accessible. At present, a number of excellent open-source models have also been proposed, including CodeParrot (Huggingface, 2021), PolyCoder , GPT-NeoX (Black et al., 2022), and San-taCoder (Allal et al., 2023), which contribute to the thriving of LLMs for NL2Code. Besides, recent studies have proposed various approaches to address specific NL2Code scenarios. For example, JuPyT5 (Chandel et al., 2022a) is designed to work within Jupyter Notebooks, while ERNIE-Code (Chai et al., 2022), CodeGeeX (Zheng et al., 2023), andBLOOM (Scao et al., 2022) are trained to support multiple natural or programming languages. Additionally, InCoder (Fried et al., 2023), FIM (Bavarian et al., 2022), and SantaCoder (Allal et al., 2023) not only support left-to-right code prediction, but also allow for infilling arbitrary regions of code. As LLMs for NL2Code are evolving rapidly, we created a website to keep up-to-date with the latest advances by crowd-sourcing. Details of the website can be found in Appendix B.

These models are not only attractive in academia (Chen et al., 2021;Nijkamp et al., 2023;Li et al., 2022b), but also applied in real-world products to improve programming efficiency (Sobania et al., 2022a;Barke et al., 2023). One example is GitHub and OpenAI's Copilot, a programming assistance tool that utilizes Codex to provide realtime code suggestions. Other notable products include CodeGeeX 3 and CodeWhisperer 4 . A summary of 10 products can be found in Appendix Table 5. Recent studies (Sobania et al., 2022b;Pearce et al., 2022;Nguyen and Nadi, 2022) have shown that these products can provide helpful recommendations, while they also introduce minor bugs that can cause issues for users. There is still room for improvement before LLMs can be fully practical and capable of coding like humans.","sent1: Given a natural language problem description, the NL2Code task aims to automatically generate the demanded code.
sent2: To illustrate this task visually, we provide a Python programming problem as an example in Figure 1, while different NL2Code benchmarks may vary in terms of language or 2
sent3: We summarize the related surveys in Appendix A.  problem domain.
sent4: Existing large language models for the NL2Code task are usually based on Transformer (Vaswani et al., 2017) and are trained on a large-scale code related unlabelled corpus.
sent5: For better code generation performance, most LLMs, no matter encoder-decoder or decoder-only models, employ the causal language modeling objective for training, which is to predict the token following a sequence of tokens.
sent6: During inference, an LLM can tackle NL2Code problems in a zero-shot manner without fine-tuning its parameters.
sent7: There are also studies employing few-shot (Austin et al., 2021) or in-context learning (Nijkamp et al., 2023) to further boost the performance.
sent8: We conduct a comprehensive investigation of 27 representative LLMs for the NL2Code task.
sent9: Details of each model are summarized in Table 1, where models vary in architecture, size, and accessibility.
sent10: For better visualization, we present these models in chronological order in Figure 2, plotting the largest model sizes.
sent11: One trend observed is that these large language models are consistently growing in size as the research field advances.
sent12: Additionally, the decoder-only architecture is favoured for pre-trained models with larger sizes.
sent13: Early works, such as GPT-C (Svyatkovskiy et al., 2020), PyMT5 (Clement et al., 2020), and PLBART (Ahmad et al., 2021), have relatively small numbers of parameters and do not demonstrate strong capabilities in zero-shot code generation.
sent14: Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus.
sent15: Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code.
sent16: While they show surprisingly good performance on NL2Code, most of them are not readily accessible.
sent17: At present, a number of excellent open-source models have also been proposed, including CodeParrot (Huggingface, 2021), PolyCoder , GPT-NeoX (Black et al., 2022), and San-taCoder (Allal et al., 2023), which contribute to the thriving of LLMs for NL2Code.
sent18: Besides, recent studies have proposed various approaches to address specific NL2Code scenarios.
sent19: For example, JuPyT5 (Chandel et al., 2022a) is designed to work within Jupyter Notebooks, while ERNIE-Code (Chai et al., 2022), CodeGeeX (Zheng et al., 2023), andBLOOM (Scao et al., 2022) are trained to support multiple natural or programming languages.
sent20: Additionally, InCoder (Fried et al., 2023), FIM (Bavarian et al., 2022), and SantaCoder (Allal et al., 2023) not only support left-to-right code prediction, but also allow for infilling arbitrary regions of code.
sent21: As LLMs for NL2Code are evolving rapidly, we created a website to keep up-to-date with the latest advances by crowd-sourcing.
sent22: Details of the website can be found in Appendix B.These models are not only attractive in academia (Chen et al., 2021;Nijkamp et al., 2023;Li et al., 2022b), but also applied in real-world products to improve programming efficiency (Sobania et al., 2022a;Barke et al., 2023).
sent23: One example is GitHub and OpenAI's Copilot, a programming assistance tool that utilizes Codex to provide realtime code suggestions.
sent24: Other notable products include CodeGeeX 3 and CodeWhisperer 4 .
sent25: A summary of 10 products can be found in Appendix Table 5.
sent26: Recent studies (Sobania et al., 2022b;Pearce et al., 2022;Nguyen and Nadi, 2022) have shown that these products can provide helpful recommendations, while they also introduce minor bugs that can cause issues for users.
sent27: There is still room for improvement before LLMs can be fully practical and capable of coding like humans.","Question: What are the key characteristics and trends of large language models developed for the NL2Code task?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",What are the key characteristics and trends of large language models developed for the NL2Code task?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",6,"Existing large language models for the NL2Code task are usually based on Transformer (Vaswani et al., 2017) and are trained on a large-scale code related unlabelled corpus.

For better code generation performance, most LLMs, no matter encoder-decoder or decoder-only models, employ the causal language modeling objective for training, which is to predict the token following a sequence of tokens.

During inference, an LLM can tackle NL2Code problems in a zero-shot manner without fine-tuning its parameters.

There are also studies employing few-shot (Austin et al., 2021) or in-context learning (Nijkamp et al., 2023) to further boost the performance.

We conduct a comprehensive investigation of 27 representative LLMs for the NL2Code task.

Details of each model are summarized in Table 1, where models vary in architecture, size, and accessibility.

For better visualization, we present these models in chronological order in Figure 2, plotting the largest model sizes.

One trend observed is that these large language models are consistently growing in size as the research field advances.

Additionally, the decoder-only architecture is favoured for pre-trained models with larger sizes.

Early works, such as GPT-C (Svyatkovskiy et al., 2020), PyMT5 (Clement et al., 2020), and PLBART (Ahmad et al., 2021), have relatively small numbers of parameters and do not demonstrate strong capabilities in zero-shot code generation.

Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus.

Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code.

While they show surprisingly good performance on NL2Code, most of them are not readily accessible.

At present, a number of excellent open-source models have also been proposed, including CodeParrot (Huggingface, 2021), PolyCoder , GPT-NeoX (Black et al., 2022), and San-taCoder (Allal et al., 2023), which contribute to the thriving of LLMs for NL2Code.

Besides, recent studies have proposed various approaches to address specific NL2Code scenarios.

For example, JuPyT5 (Chandel et al., 2022a) is designed to work within Jupyter Notebooks, while ERNIE-Code (Chai et al., 2022), CodeGeeX (Zheng et al., 2023), andBLOOM (Scao et al., 2022) are trained to support multiple natural or programming languages.

Additionally, InCoder (Fried et al., 2023), FIM (Bavarian et al., 2022), and SantaCoder (Allal et al., 2023) not only support left-to-right code prediction, but also allow for infilling arbitrary regions of code.",invalid,,"Question:

What are the key characteristics and trends of large language models developed for the NL2Code task?

Answer:

nan"
254877753,Towards Reasoning in Large Language Models: A Survey,https://www.semanticscholar.org/paper/db4ab91d5675c37795e719e997a2827d3d83cd45,Towards Reasoning in Large Language Models,5,"Reasoning, particularly multi-step reasoning, is often seen as a weakness in language models and other NLP models (Bommasani et al., 2021;Rae et al., 2021;Valmeekam et al., 2022). Recent research has suggested that reasoning ability may emerge in language models at a certain scale, such as models with over 100 billion parameters (Wei et al., 2022a,b;Cobbe et al., 2021). In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).","sent1: Reasoning, particularly multi-step reasoning, is often seen as a weakness in language models and other NLP models (Bommasani et al., 2021;Rae et al., 2021;Valmeekam et al., 2022).
sent2: Recent research has suggested that reasoning ability may emerge in language models at a certain scale, such as models with over 100 billion parameters (Wei et al., 2022a,b;Cobbe et al., 2021).
sent3: In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).","Question: What are the challenges and potential solutions for improving reasoning abilities in large language models?

Supporting sentence: sent1, sent2, sent3",What are the challenges and potential solutions for improving reasoning abilities in large language models?,"sent1, sent2, sent3",9,"Reasoning, particularly multi-step reasoning, is often seen as a weakness in language models and other NLP models (Bommasani et al., 2021;Rae et al., 2021;Valmeekam et al., 2022).

Recent research has suggested that reasoning ability may emerge in language models at a certain scale, such as models with over 100 billion parameters (Wei et al., 2022a,b;Cobbe et al., 2021).

In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).",invalid,,"Question:

What are the challenges and potential solutions for improving reasoning abilities in large language models?

Answer:

nan"
232320384,A Survey on Multimodal Disinformation Detection,https://www.semanticscholar.org/paper/71d2dc1fc38e0c48c865de5f5c023ccf7c5ad018,Image,5,"Text with visual content (e.g., images) in social media is more prominent as it is more intuitive; thus, it is easier to consume, it spreads faster, it gets 18% more clicks, 89% more likes, and 150% more retweets . Due to the growing number of claims disseminated with images, in the current literature, there have been various studies that address the visual content with text for predicting misleading information (Volkova et al., 2019), fake images (Gupta et al., 2013), images shared with misinformation in political groups (Garimella and Eckles, 2020), and fauxtography Wang et al., 2021). Some of these studies attempt to understand how two different modalities are used. Their analyses show that the extension of text with images increases the effectiveness of misleading content. Gupta et al. (2013) highlighted the role of Twitter to spread fake images. This study reports that 86% tweets spreading fake images are retweets. Garimella and Eckles (2020) manually annotated a sample of 2,500 images collected from public WhatsApp groups, and labeled them as misinformation, not misinformation, misinformation already fact-checked, and unclear; however, experiments were conducted with binary labels: misinformation vs. not-misinformation. The authors found that violent and graphic images spread faster. Nakamura et al. (2020) developed a multimodal dataset containing 1M posts including text, images, metadata, and comments collected from Reddit. The dataset was labeled with 2, 3, and 6-ways labels. Volkova et al. (2019) proposed models for detecting misleading information using images and text.

Fauxtography is defined as ""visual images, especially news photographs, which convey a questionable (or outright false) sense of the events they seem to depict"" (Cooper, 2007). It is also commonly used in social media in different forms such as a fake image with false claims, a true image with false claims.  defined that ""a post is a fauxtography if the image of the post (i) directly supports a false claim, or (ii) conveys misinformation of a true claim."" An example is shown in Figure 2 (in Appendix A).  developed FauxBuster to detect fauxtographic social media content, which uses social media comments in addition to the content in the images and the texts. Zlatkova et al. (2019) investigated the factuality of claims with respect to images and compared the performance of different feature groups between text and images. Wang et al. (2021) analyzed fauxtography images in social media posts and found that posts with doctored images increase user engagement in the form of re-shares, likes, and comments, specifically in Twitter and Reddit. They pointed out that doctored images are often used as memes to mislead or as a means of satire, and that they have a 'clickbait' power to drive engagement.","sent1: Text with visual content (e.g., images) in social media is more prominent as it is more intuitive; thus, it is easier to consume, it spreads faster, it gets 18% more clicks, 89% more likes, and 150% more retweets .
sent2: Due to the growing number of claims disseminated with images, in the current literature, there have been various studies that address the visual content with text for predicting misleading information (Volkova et al., 2019), fake images (Gupta et al., 2013), images shared with misinformation in political groups (Garimella and Eckles, 2020), and fauxtography Wang et al., 2021).
sent3: Some of these studies attempt to understand how two different modalities are used.
sent4: Their analyses show that the extension of text with images increases the effectiveness of misleading content.
sent5: Gupta et al. (2013) highlighted the role of Twitter to spread fake images.
sent6: This study reports that 86% tweets spreading fake images are retweets.
sent7: Garimella and Eckles (2020) manually annotated a sample of 2,500 images collected from public WhatsApp groups, and labeled them as misinformation, not misinformation, misinformation already fact-checked, and unclear; however, experiments were conducted with binary labels: misinformation vs. not-misinformation.
sent8: The authors found that violent and graphic images spread faster.
sent9: Nakamura et al. (2020) developed a multimodal dataset containing 1M posts including text, images, metadata, and comments collected from Reddit.
sent10: The dataset was labeled with 2, 3, and 6-ways labels.
sent11: Volkova et al. (2019) proposed models for detecting misleading information using images and text.
sent12: Fauxtography is defined as ""visual images, especially news photographs, which convey a questionable (or outright false) sense of the events they seem to depict"" (Cooper, 2007).
sent13: It is also commonly used in social media in different forms such as a fake image with false claims, a true image with false claims.
sent14: defined that ""a post is a fauxtography if the image of the post (i) directly supports a false claim, or (ii) conveys misinformation of a true claim.""
sent15: An example is shown in Figure 2 (in Appendix A).
sent16: developed FauxBuster to detect fauxtographic social media content, which uses social media comments in addition to the content in the images and the texts.
sent17: Zlatkova et al. (2019) investigated the factuality of claims with respect to images and compared the performance of different feature groups between text and images.
sent18: Wang et al. (2021) analyzed fauxtography images in social media posts and found that posts with doctored images increase user engagement in the form of re-shares, likes, and comments, specifically in Twitter and Reddit.
sent19: They pointed out that doctored images are often used as memes to mislead or as a means of satire, and that they have a 'clickbait' power to drive engagement.","Question: How do studies address the role of images in spreading misleading information on social media?

Supporting sentence: sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent11, sent12, sent13, sent14, sent16, sent17, sent18, sent19",How do studies address the role of images in spreading misleading information on social media?,"sent2, sent4, sent5, sent6, sent7, sent8, sent9, sent11, sent12, sent13, sent14, sent16, sent17, sent18, sent19",7,"Due to the growing number of claims disseminated with images, in the current literature, there have been various studies that address the visual content with text for predicting misleading information (Volkova et al., 2019), fake images (Gupta et al., 2013), images shared with misinformation in political groups (Garimella and Eckles, 2020), and fauxtography Wang et al., 2021).

Their analyses show that the extension of text with images increases the effectiveness of misleading content.

Gupta et al. (2013) highlighted the role of Twitter to spread fake images.

This study reports that 86% tweets spreading fake images are retweets.

Garimella and Eckles (2020) manually annotated a sample of 2,500 images collected from public WhatsApp groups, and labeled them as misinformation, not misinformation, misinformation already fact-checked, and unclear; however, experiments were conducted with binary labels: misinformation vs. not-misinformation.

The authors found that violent and graphic images spread faster.

Nakamura et al. (2020) developed a multimodal dataset containing 1M posts including text, images, metadata, and comments collected from Reddit.

Volkova et al. (2019) proposed models for detecting misleading information using images and text.

Fauxtography is defined as ""visual images, especially news photographs, which convey a questionable (or outright false) sense of the events they seem to depict"" (Cooper, 2007).

It is also commonly used in social media in different forms such as a fake image with false claims, a true image with false claims.

defined that ""a post is a fauxtography if the image of the post (i) directly supports a false claim, or (ii) conveys misinformation of a true claim.""

developed FauxBuster to detect fauxtographic social media content, which uses social media comments in addition to the content in the images and the texts.

Zlatkova et al. (2019) investigated the factuality of claims with respect to images and compared the performance of different feature groups between text and images.

Wang et al. (2021) analyzed fauxtography images in social media posts and found that posts with doctored images increase user engagement in the form of re-shares, likes, and comments, specifically in Twitter and Reddit.

They pointed out that doctored images are often used as memes to mislead or as a means of satire, and that they have a 'clickbait' power to drive engagement.",invalid,,"Question:

How do studies address the role of images in spreading misleading information on social media?

Answer:

nan"
254854669,Let's Negotiate! A Survey of Negotiation Dialogue Systems,https://www.semanticscholar.org/paper/0974035826cd6d4be9c604a8679621c8621aff5f,Supervised Learning,6,"Supervised learning (SL) is another popular paradigm for policy learning. (Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data. However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue. Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training. The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy. In addition, Joshi et al. (2021) incorporate a pragmatic strategies graph network with the seq2seq model to create an interpretable policy learning paradigm. Recently, Dutt et al. (2021b) propose a generalised framework for identifying resisting strategies in persuasive negotiations using a pre-trained BERT model (Devlin et al., 2019).","sent1: Supervised learning (SL) is another popular paradigm for policy learning.
sent2: (Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.
sent3: However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue.
sent4: Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training.
sent5: The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy.
sent6: In addition, Joshi et al. (2021) incorporate a pragmatic strategies graph network with the seq2seq model to create an interpretable policy learning paradigm.
sent7: Recently, Dutt et al. (2021b) propose a generalised framework for identifying resisting strategies in persuasive negotiations using a pre-trained BERT model (Devlin et al., 2019).","Question: What are the different approaches to supervised learning for policy learning in negotiation dialogue systems?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",What are the different approaches to supervised learning for policy learning in negotiation dialogue systems?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",4,"Supervised learning (SL) is another popular paradigm for policy learning.

(Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.

However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue.

Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training.

The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy.

In addition, Joshi et al. (2021) incorporate a pragmatic strategies graph network with the seq2seq model to create an interpretable policy learning paradigm.

Recently, Dutt et al. (2021b) propose a generalised framework for identifying resisting strategies in persuasive negotiations using a pre-trained BERT model (Devlin et al., 2019).",skip,,"Question:

What are the different approaches to supervised learning for policy learning in negotiation dialogue systems?

Answer:

nan"
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Natural Language Inference,4,"Natural Language Inference (NLI) is the process of determining the logical relationship between a premise (an assumed true sentence) and a hypothesis (a possibly true sentence). The objective of NLI is to determine whether the hypothesis can be logically inferred from the premise (entailment), contradicts the premise (contradiction), or is neutral with respect to it (Dagan et al., 2013). NLI serves as a proxy for evaluating natural language understanding. According to Conneau et al. (2017), learning sentence representations using NLI data can be effectively transferred to other NLP tasks, demonstrating the generality of this approach.

In § 2.3, we discussed Siamese-BERT networks as presented in Reimers and Gurevych (2019). There are two noteworthy components to this model. First, processing inputs individually without promoting interaction between words; second, using an encoder like BERT that is not generative as its backbone model. The first component is computationally efficient but has been found to result in poorer performance compared to methods that promote interaction between words (Reimers and Gurevych, 2019). This lack of interaction can limit the network's ability to capture the nuances of language, and may result in less accurate sentence embeddings. In order to solve this, Cheng (2021) incorporate word-level interaction features into the sentence embedding while maintaining the efficiency of Siamese-BERT networks. Their approach makes use of ideas from knowledge distillation (Hinton et al., 2015): using the rich knowledge in pretrained cross-encoders and significantly improving the performance of Siamese-BERT.

Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks. Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings. They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder. This is one of the first studies that shows the utility of generative models for obtaining sentence representations.","sent1: Natural Language Inference (NLI) is the process of determining the logical relationship between a premise (an assumed true sentence) and a hypothesis (a possibly true sentence).
sent2: The objective of NLI is to determine whether the hypothesis can be logically inferred from the premise (entailment), contradicts the premise (contradiction), or is neutral with respect to it (Dagan et al., 2013).
sent3: NLI serves as a proxy for evaluating natural language understanding.
sent4: According to Conneau et al. (2017), learning sentence representations using NLI data can be effectively transferred to other NLP tasks, demonstrating the generality of this approach.
sent5: In § 2.3, we discussed Siamese-BERT networks as presented in Reimers and Gurevych (2019).
sent6: There are two noteworthy components to this model.
sent7: First, processing inputs individually without promoting interaction between words; second, using an encoder like BERT that is not generative as its backbone model.
sent8: The first component is computationally efficient but has been found to result in poorer performance compared to methods that promote interaction between words (Reimers and Gurevych, 2019).
sent9: This lack of interaction can limit the network's ability to capture the nuances of language, and may result in less accurate sentence embeddings.
sent10: In order to solve this, Cheng (2021) incorporate word-level interaction features into the sentence embedding while maintaining the efficiency of Siamese-BERT networks.
sent11: Their approach makes use of ideas from knowledge distillation (Hinton et al., 2015): using the rich knowledge in pretrained cross-encoders and significantly improving the performance of Siamese-BERT.
sent12: Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks.
sent13: Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings.
sent14: They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder.
sent15: This is one of the first studies that shows the utility of generative models for obtaining sentence representations.","Question: What are the key components and challenges of using Siamese-BERT networks for Natural Language Inference (NLI)?

Supporting sentence: sent6, sent7, sent8, sent9, sent10",What are the key components and challenges of using Siamese-BERT networks for Natural Language Inference (NLI)?,"sent6, sent7, sent8, sent9, sent10",2,"There are two noteworthy components to this model.

First, processing inputs individually without promoting interaction between words; second, using an encoder like BERT that is not generative as its backbone model.

The first component is computationally efficient but has been found to result in poorer performance compared to methods that promote interaction between words (Reimers and Gurevych, 2019).

This lack of interaction can limit the network's ability to capture the nuances of language, and may result in less accurate sentence embeddings.

In order to solve this, Cheng (2021) incorporate word-level interaction features into the sentence embedding while maintaining the efficiency of Siamese-BERT networks.",skip,,"Question:

What are the key components and challenges of using Siamese-BERT networks for Natural Language Inference (NLI)?

Answer:

nan"
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Intermediate Representation Encoder Decoder,8,"Autoencoder CRFAE (Cai et al., 2017) Z P (z|x) P (x|z) D-NDMV (Han et al., 2019a) Deterministic Variant S P (s|x) P (z,x|s)

Variational Autoencoder (Li et al., 2019) Z P (z|x) P (z, x) D-NDMV (Han et al., 2019a) Variational Variant S P (s|x) P (z, x|s) (Corro and Titov, 2018) Z P (z|x) P (x|z) Table 1: Major approaches based on autoencoders and variational autoencoders for unsupervised dependency parsing. Z: dependency tree. S: continuous sentence representation.x is a copy of x representing the reconstructed sentence. z is the dependency tree. s is the continuous representation of sentence x.

In addition to the EM algorithm, the learning objective can also be optimized with gradient descent. Yang et al. (2020) recently observe that gradient descent can sometimes significantly outperform EM when learning neural DMV.

Better learning results can also be achieved by manipulating the training data. Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences. Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing. Spitkovsky et al. (2013) propose to treat different learning algorithms and configurations as modules and connect them to form a network. Some approaches discussed above, such as Lateen EM and curriculum learning, can be seen as special cases of this approach.","sent1: Autoencoder CRFAE (Cai et al., 2017) Z P (z|x) P (x|z) D-NDMV (Han et al., 2019a)
sent2: Deterministic Variant S P (s|x) P (z,x|s)Variational Autoencoder (Li et al., 2019) Z P (z|x) P (z, x)
sent3: D-NDMV (Han et al., 2019a) Variational Variant S P (s|x) P (z, x|s) (Corro and Titov, 2018) Z P (z|x) P (x|z) Table 1: Major approaches based on autoencoders and variational autoencoders for unsupervised dependency parsing.
sent4: Z: dependency tree. S: continuous sentence representation.x is a copy of x representing the reconstructed sentence.
sent5: z is the dependency tree. s is the continuous representation of sentence x.
sent6: In addition to the EM algorithm, the learning objective can also be optimized with gradient descent.
sent7: Yang et al. (2020) recently observe that gradient descent can sometimes significantly outperform EM when learning neural DMV.
sent8: Better learning results can also be achieved by manipulating the training data.
sent9: Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences.
sent10: Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.
sent11: Spitkovsky et al. (2013) propose to treat different learning algorithms and configurations as modules and connect them to form a network.
sent12: Some approaches discussed above, such as Lateen EM and curriculum learning, can be seen as special cases of this approach.","Question: What are the key methods and strategies for improving learning outcomes in unsupervised dependency parsing?

Supporting sentence: sent6, sent7, sent8, sent9, sent10, sent11, sent12",What are the key methods and strategies for improving learning outcomes in unsupervised dependency parsing?,"sent6, sent7, sent8, sent9, sent10, sent11, sent12",3,"In addition to the EM algorithm, the learning objective can also be optimized with gradient descent.

Yang et al. (2020) recently observe that gradient descent can sometimes significantly outperform EM when learning neural DMV.

Better learning results can also be achieved by manipulating the training data.

Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences.

Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.

Spitkovsky et al. (2013) propose to treat different learning algorithms and configurations as modules and connect them to form a network.

Some approaches discussed above, such as Lateen EM and curriculum learning, can be seen as special cases of this approach.",skip,,"Question:

What are the key methods and strategies for improving learning outcomes in unsupervised dependency parsing?

Answer:

nan"
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Variational Autoencoder-Based Approaches,4,"As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable. However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption. Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability. Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.

Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1). There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.

Recurrent Neural Network Grammars (RNNG) ) is a transition-based constituent parser, with a discriminative and a generative variant. Discriminative RNNG incrementally constructs the constituency tree of the input sentence through three kinds of operations: generating a non-terminal token, shifting, and reducing. Generative RNNG replaces the shifting operation with a word generation operation and incrementally generates a constituency tree and its corresponding sentence. The probability of each operation is calculated by a neural network. Li et al. (2019) modify RNNG for dependency parsing and use discriminative RNNG and generative RNNG as the encoder and decoder of a variational autoencoder respectively. However, because RNNG has a strong expressive power, it is prone to overfitting in the unsupervised setting. Li et al. (2019) propose to use posterior regularization to introduce linguistic knowledge as a constraint in learning, thereby mitigating this problem to a certain extent.

The model proposed by Corro and Titov (2018) is also based on a variational autoencoder. It is designed for semi-supervised dependency parsing, but in principle it can also be applied for unsupervised dependency parsing. The encoder of this model is a conditional random field model while the decoder generates a sentence based on a graph convolutional neural network whose structure is specified by the dependency tree. Since the variational autoencoder needs Monte Carlo sampling to approximate the gradient and the complexity of sampling a dependency tree is very high, Corro and Titov (2018) use Gumbel random perturbation. Jang et al. (2017) use differentiable dynamic programming to design an efficient approximate sampling algorithm.

The variational variant of D-NDMV (Han et al., 2019a) has the same structure as the deterministic variant described in Section 3.2.1, except that the variational variant probabilistically models the intermediate continuous vector conditioned on the input sentence using a Gaussian distribution. It also specifies a Gaussian prior over the intermediate continuous vector.","sent1: As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable.
sent2: However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption.
sent3: Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability.
sent4: Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.
sent5: Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1).
sent6: There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.
sent7: Recurrent Neural Network Grammars (RNNG) ) is a transition-based constituent parser, with a discriminative and a generative variant.
sent8: Discriminative RNNG incrementally constructs the constituency tree of the input sentence through three kinds of operations: generating a non-terminal token, shifting, and reducing.
sent9: Generative RNNG replaces the shifting operation with a word generation operation and incrementally generates a constituency tree and its corresponding sentence.
sent10: The probability of each operation is calculated by a neural network.
sent11: Li et al. (2019) modify RNNG for dependency parsing and use discriminative RNNG and generative RNNG as the encoder and decoder of a variational autoencoder respectively.
sent12: However, because RNNG has a strong expressive power, it is prone to overfitting in the unsupervised setting.
sent13: Li et al. (2019) propose to use posterior regularization to introduce linguistic knowledge as a constraint in learning, thereby mitigating this problem to a certain extent.
sent14: The model proposed by Corro and Titov (2018) is also based on a variational autoencoder.
sent15: It is designed for semi-supervised dependency parsing, but in principle it can also be applied for unsupervised dependency parsing.
sent16: The encoder of this model is a conditional random field model while the decoder generates a sentence based on a graph convolutional neural network whose structure is specified by the dependency tree.
sent17: Since the variational autoencoder needs Monte Carlo sampling to approximate the gradient and the complexity of sampling a dependency tree is very high, Corro and Titov (2018) use Gumbel random perturbation.
sent18: Jang et al. (2017) use differentiable dynamic programming to design an efficient approximate sampling algorithm.
sent19: The variational variant of D-NDMV (Han et al., 2019a) has the same structure as the deterministic variant described in Section 3.2.1, except that the variational variant probabilistically models the intermediate continuous vector conditioned on the input sentence using a Gaussian distribution.
sent20: It also specifies a Gaussian prior over the intermediate continuous vector.","Question: What are the key components and challenges of using variational autoencoders for unsupervised dependency parsing?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",What are the key components and challenges of using variational autoencoders for unsupervised dependency parsing?,"sent1, sent2, sent3, sent4, sent5, sent6, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",2,"As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable.

However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption.

Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability.

Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.

Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1).

There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.

Li et al. (2019) modify RNNG for dependency parsing and use discriminative RNNG and generative RNNG as the encoder and decoder of a variational autoencoder respectively.

However, because RNNG has a strong expressive power, it is prone to overfitting in the unsupervised setting.

Li et al. (2019) propose to use posterior regularization to introduce linguistic knowledge as a constraint in learning, thereby mitigating this problem to a certain extent.

The model proposed by Corro and Titov (2018) is also based on a variational autoencoder.

It is designed for semi-supervised dependency parsing, but in principle it can also be applied for unsupervised dependency parsing.

The encoder of this model is a conditional random field model while the decoder generates a sentence based on a graph convolutional neural network whose structure is specified by the dependency tree.

Since the variational autoencoder needs Monte Carlo sampling to approximate the gradient and the complexity of sampling a dependency tree is very high, Corro and Titov (2018) use Gumbel random perturbation.

Jang et al. (2017) use differentiable dynamic programming to design an efficient approximate sampling algorithm.

The variational variant of D-NDMV (Han et al., 2019a) has the same structure as the deterministic variant described in Section 3.2.1, except that the variational variant probabilistically models the intermediate continuous vector conditioned on the input sentence using a Gaussian distribution.

It also specifies a Gaussian prior over the intermediate continuous vector.",skip,,"Question:

What are the key components and challenges of using variational autoencoders for unsupervised dependency parsing?

Answer:

nan"
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Why graph neural networks ?,9,"Contemporary solutions to the task of ATS suffer from a number of issues, chiefly an inconsistent evaluation protocol and, somewhat, a lack of progress, as noted by Kryściński et al. (2019). In recent years GNNs have been successfully applied to a number of downstream NLP tasks such as classification    and translation (Xu et al., 2021) (Yin et al., 2020). Although GNNs may not be able to solve all problems related to the task of ATS, we believe that they can at least give a new perspective to this task. Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey. In particular we want to highlight the following aspects of GNNs:

• Scalability and Flexibility. A vast number of ATS models are based on BERT (Devlin et al., 2019). However, the computational complexity of BERT-based ATS models grows quadratic with the input length; due to the selfattention operation. This fact renders them impractical for long, or even medium sized text documents. Recently some work has been done in order to circumvent this limiting factor (Ding et al., 2020) (Zhang et al., 2021). In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more. This is in part due to the linear scaling of the memory cost with regards to the input size. The total memory cost of a GNN model depends on the size of the graph, the number of layers and the feature vector size of the nodes present. Formally, for L layers and an input of N nodes with each node's feature vector being of size H the memory complexity is O(LN H). But even for very large graphs on the scale of millions of nodes one can utilize GNNs. This can be achieved using methods such as neighbour sampling or distributing the graph over multiple GPUs, as done for example by Jia et al. (2020b). We recommend the paper by  for insights as to how one can train large and very deep GNNs. As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures. Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.

• Understanding and Explainability. It is often difficult to understand why a model arrived at a certain conclusion. Additionally it is often difficult to see how the model aggregates information. This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output. This removes a layer of the blackbox magic present in many current non-GNN models. We recommend the survey by Yuan et al. (2020) for an overview of methods for generating explanations for GNNs.","sent1: Contemporary solutions to the task of ATS suffer from a number of issues, chiefly an inconsistent evaluation protocol and, somewhat, a lack of progress, as noted by Kryściński et al. (2019).
sent2: In recent years GNNs have been successfully applied to a number of downstream NLP tasks such as classification    and translation (Xu et al., 2021) (Yin et al., 2020).
sent3: Although GNNs may not be able to solve all problems related to the task of ATS, we believe that they can at least give a new perspective to this task.
sent4: Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey.
sent5: In particular we want to highlight the following aspects of GNNs:• Scalability and Flexibility.
sent6: A vast number of ATS models are based on BERT (Devlin et al., 2019).
sent7: However, the computational complexity of BERT-based ATS models grows quadratic with the input length; due to the selfattention operation.
sent8: This fact renders them impractical for long, or even medium sized text documents.
sent9: Recently some work has been done in order to circumvent this limiting factor (Ding et al., 2020) (Zhang et al., 2021).
sent10: In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more.
sent11: This is in part due to the linear scaling of the memory cost with regards to the input size.
sent12: The total memory cost of a GNN model depends on the size of the graph, the number of layers and the feature vector size of the nodes present.
sent13: Formally, for L layers and an input of N nodes with each node's feature vector being of size H the memory complexity is O(LN H).
sent14: But even for very large graphs on the scale of millions of nodes one can utilize GNNs.
sent15: This can be achieved using methods such as neighbour sampling or distributing the graph over multiple GPUs, as done for example by Jia et al. (2020b).
sent16: We recommend the paper by  for insights as to how one can train large and very deep GNNs.
sent17: As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures.
sent18: Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.
sent19: • Understanding and Explainability.
sent20: It is often difficult to understand why a model arrived at a certain conclusion.
sent21: Additionally it is often difficult to see how the model aggregates information.
sent22: This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output.
sent23: This removes a layer of the blackbox magic present in many current non-GNN models.
sent24: We recommend the survey by Yuan et al. (2020) for an overview of methods for generating explanations for GNNs.","Question: What are the advantages of using Graph Neural Networks (GNNs) for Automatic Text Summarization (ATS)?

Supporting sentence: sent4, sent5, sent10, sent11, sent12, sent13, sent14, sent15, sent17, sent18, sent19, sent20, sent21, sent22, sent23",What are the advantages of using Graph Neural Networks (GNNs) for Automatic Text Summarization (ATS)?,"sent4, sent5, sent10, sent11, sent12, sent13, sent14, sent15, sent17, sent18, sent19, sent20, sent21, sent22, sent23",3,"Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey.

In particular we want to highlight the following aspects of GNNs:• Scalability and Flexibility.

In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more.

This is in part due to the linear scaling of the memory cost with regards to the input size.

The total memory cost of a GNN model depends on the size of the graph, the number of layers and the feature vector size of the nodes present.

Formally, for L layers and an input of N nodes with each node's feature vector being of size H the memory complexity is O(LN H).

But even for very large graphs on the scale of millions of nodes one can utilize GNNs.

This can be achieved using methods such as neighbour sampling or distributing the graph over multiple GPUs, as done for example by Jia et al. (2020b).

As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures.

Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.

• Understanding and Explainability.

It is often difficult to understand why a model arrived at a certain conclusion.

Additionally it is often difficult to see how the model aggregates information.

This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output.

This removes a layer of the blackbox magic present in many current non-GNN models.",skip,,"Question:

What are the advantages of using Graph Neural Networks (GNNs) for Automatic Text Summarization (ATS)?

Answer:

nan"
233476148,Explanation-Based Human Debugging of NLP Models: A Survey,https://www.semanticscholar.org/paper/d84ed05ab860b75f9e6b28e717abf4bc12da03d7,Models,8,"Early work used Naive Bayes models with bag-ofwords (NB) as text classifiers (Kulesza et al., 2009(Kulesza et al., , 2010, which are relatively easy to generate explanations for and to incorporate human feedback into (discussed in section 2.2). Other traditional models used include logistic regression (LR) (Teso and Kersting, 2019;Han and Ghosh, 2020)  (2019), respectively. While the NLP community nowadays is mainly driven by pre-trained language models (Qiu et al., 2020) with many papers studying their behaviors (Rogers et al., 2021;Hoover et al., 2020), only Zylberajch et al. (2021) and Yao et al. (2021) have used pre-trained language models, including BERT (Devlin et al., 2019) and RoBERTa , as test beds for EBHD.","sent1: Early work used Naive Bayes models with bag-ofwords (NB) as text classifiers (Kulesza et al., 2009(Kulesza et al., , 2010, which are relatively easy to generate explanations for and to incorporate human feedback into (discussed in section 2.2).
sent2: Other traditional models used include logistic regression (LR) (Teso and Kersting, 2019;Han and Ghosh, 2020)  (2019), respectively.
sent3: While the NLP community nowadays is mainly driven by pre-trained language models (Qiu et al., 2020) with many papers studying their behaviors (Rogers et al., 2021;Hoover et al., 2020), only Zylberajch et al. (2021) and Yao et al. (2021) have used pre-trained language models, including BERT (Devlin et al., 2019) and RoBERTa , as test beds for EBHD.","Question: What are the traditional and modern models used for explanation-based human debugging (EBHD) in NLP?

Supporting sentence: sent1, sent2, sent3",What are the traditional and modern models used for explanation-based human debugging (EBHD) in NLP?,"sent1, sent2, sent3",7,"Early work used Naive Bayes models with bag-ofwords (NB) as text classifiers (Kulesza et al., 2009(Kulesza et al., , 2010, which are relatively easy to generate explanations for and to incorporate human feedback into (discussed in section 2.2).

Other traditional models used include logistic regression (LR) (Teso and Kersting, 2019;Han and Ghosh, 2020)  (2019), respectively.

While the NLP community nowadays is mainly driven by pre-trained language models (Qiu et al., 2020) with many papers studying their behaviors (Rogers et al., 2021;Hoover et al., 2020), only Zylberajch et al. (2021) and Yao et al. (2021) have used pre-trained language models, including BERT (Devlin et al., 2019) and RoBERTa , as test beds for EBHD.",invalid,,"Question:

What are the traditional and modern models used for explanation-based human debugging (EBHD) in NLP?

Answer:

nan"
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,MIND Link Top-N RS,6,"Fine-tuning Holistic Model (Xiao et al., 2022), Fine-tuning Partial Mode (Yu et al., 2022), Fine-tuning External Part (Yu et al., 2022), Fixed-prompt PTM Tuning  Textual data (Xiao et al., 2022;Yu et al., 2022;; Sequential data (Xiao et al., 2022;Yu et al., 2022) ReDial Link Conversational RS Fine-tuning Holistic Model , Fixed-PTM Prompt Tuning (Wang et al., 2022c), Fixed-prompt PTM Tuning (Yang et al., 2022a) Textual data (Wang et al., 2022c;Yang et al., 2022a;; Graph (Li et (Hou et al., 2022) Textual + Sequential data (Hou et al., 2022)  where y t = 1(x t = x t ), andX is corrupted from the input sequence X. de Souza Pereira Moreira et al. (2021) trained a Transformer-based model with RTD objective for session-based recommendations, which achieved the best performance among MLM and AM objectives. This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.","sent1: Fine-tuning Holistic Model (Xiao et al., 2022), Fine-tuning Partial Mode (Yu et al., 2022), Fine-tuning External Part (Yu et al., 2022), Fixed-prompt PTM Tuning  Textual data (Xiao et al., 2022;Yu et al., 2022;; Sequential data (Xiao et al., 2022;Yu et al., 2022) ReDial Link Conversational RS Fine-tuning Holistic Model , Fixed-PTM Prompt Tuning (Wang et al., 2022c), Fixed-prompt PTM Tuning (Yang et al., 2022a) Textual data (Wang et al., 2022c;Yang et al., 2022a;; Graph (Li et (Hou et al., 2022) Textual + Sequential data (Hou et al., 2022)  where y t = 1(x t = x t ), andX is corrupted from the input sequence X. de Souza Pereira Moreira et al. (2021) trained a Transformer-based model with RTD objective for session-based recommendations, which achieved the best performance among MLM and AM objectives.
sent2: This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.","Question: What are the different fine-tuning and prompt tuning methods used in MIND Link Top-N and ReDial Link Conversational recommender systems?

Supporting sentence: sent1, sent2",What are the different fine-tuning and prompt tuning methods used in MIND Link Top-N and ReDial Link Conversational recommender systems?,"sent1, sent2",3,"Fine-tuning Holistic Model (Xiao et al., 2022), Fine-tuning Partial Mode (Yu et al., 2022), Fine-tuning External Part (Yu et al., 2022), Fixed-prompt PTM Tuning  Textual data (Xiao et al., 2022;Yu et al., 2022;; Sequential data (Xiao et al., 2022;Yu et al., 2022) ReDial Link Conversational RS Fine-tuning Holistic Model , Fixed-PTM Prompt Tuning (Wang et al., 2022c), Fixed-prompt PTM Tuning (Yang et al., 2022a) Textual data (Wang et al., 2022c;Yang et al., 2022a;; Graph (Li et (Hou et al., 2022) Textual + Sequential data (Hou et al., 2022)  where y t = 1(x t = x t ), andX is corrupted from the input sequence X. de Souza Pereira Moreira et al. (2021) trained a Transformer-based model with RTD objective for session-based recommendations, which achieved the best performance among MLM and AM objectives.

This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.",skip,,"Question:

What are the different fine-tuning and prompt tuning methods used in MIND Link Top-N and ReDial Link Conversational recommender systems?

Answer:

nan"
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Alternative Loss and Objectives,6,"In § 2, we discuss Contrastive loss, which is widely used in machine learning. However, this loss suffers from several limitations: for instance it only considers binary relationships between instances, lacks a mechanism to incorporate ""hard negatives"". To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss. Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations. This section provides an overview of these approaches.

To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses. These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics; (3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness. For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances. In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.

However, recent research has moved away from using the contrastive loss and has employed different loss functions to learn sentence representations. For instance, Zhang et al. (2020) maximize the mutual information between a local and a global representation of a sentence using .  identify an alternative sub-manifold within the sentence representation space that considers the geometric structure of sentences to compute semantic similarity.","sent1: In § 2, we discuss Contrastive loss, which is widely used in machine learning.
sent2: However, this loss suffers from several limitations: for instance it only considers binary relationships between instances, lacks a mechanism to incorporate ""hard negatives"".
sent3: To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss.
sent4: Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations.
sent5: This section provides an overview of these approaches.
sent6: To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses.
sent7: These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics;
sent8: (3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.
sent9: Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness.
sent10: For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.
sent11: In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.
sent12: However, recent research has moved away from using the contrastive loss and has employed different loss functions to learn sentence representations.
sent13: For instance, Zhang et al. (2020) maximize the mutual information between a local and a global representation of a sentence using .
sent14: identify an alternative sub-manifold within the sentence representation space that considers the geometric structure of sentences to compute semantic similarity.","Question: What are the different approaches to improving the learning of sentence representations using the Contrastive loss?

Supporting sentence: sent3, sent4, sent6, sent7, sent8, sent9, sent10, sent11, sent12",What are the different approaches to improving the learning of sentence representations using the Contrastive loss?,"sent3, sent4, sent6, sent7, sent8, sent9, sent10, sent11, sent12",3,"To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss.

Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations.

To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses.

These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics;

(3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness.

For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.

In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.

However, recent research has moved away from using the contrastive loss and has employed different loss functions to learn sentence representations.",skip,,"Question:

What are the different approaches to improving the learning of sentence representations using the Contrastive loss?

Answer:

nan"
234093015,A Survey of Data Augmentation Approaches for NLP,https://www.semanticscholar.org/paper/63d8426ba1f51a8525dd19fd8ec92934ec71aea5,Rule-Based Techniques,4,"Here, we cover DA primitives which use easyto-compute, predetermined transforms sans model components. Feature space DA approaches generate augmented examples in the model's feature space rather than input data. Many few-shot learning approaches (Hariharan and Girshick, 2017;Schwartz et al., 2018) leverage estimated feature space ""analogy"" transformations between examples of known classes to augment for novel classes (see §4.4). Paschali et al. (2019) use iterative affine transformations and projections to maximally ""stretch"" an example along the class-manifold. Wei and Zou (2019) propose EASY DATA AUG-MENTATION (EDA), a set of token-level random perturbation operations including random insertion, deletion, and swap. They show improved performance on many text classification tasks. UDA (Xie et al., 2020) show how supervised DA methods can be exploited for unsupervised data through consistency training on (x, DA(x)) pairs.

For paraphrase identification, Chen et al. (2020b) construct a signed graph over the data, with individual sentences as nodes and pair labels as signed edges. They use balance theory and transitivity to infer augmented sentence pairs from this graph. Motivated by image cropping and rotation, Şahin and Steedman (2018) propose dependency tree morphing. For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2. This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).","sent1: Here, we cover DA primitives which use easyto-compute, predetermined transforms sans model components.
sent2: Feature space DA approaches generate augmented examples in the model's feature space rather than input data.
sent3: Many few-shot learning approaches (Hariharan and Girshick, 2017;Schwartz et al., 2018) leverage estimated feature space ""analogy"" transformations between examples of known classes to augment for novel classes (see §4.4).
sent4: Paschali et al. (2019) use iterative affine transformations and projections to maximally ""stretch"" an example along the class-manifold.
sent5: Wei and Zou (2019) propose EASY DATA AUG-MENTATION (EDA), a set of token-level random perturbation operations including random insertion, deletion, and swap.
sent6: They show improved performance on many text classification tasks.
sent7: UDA (Xie et al., 2020) show how supervised DA methods can be exploited for unsupervised data through consistency training on (x, DA(x)) pairs.
sent8: For paraphrase identification, Chen et al. (2020b) construct a signed graph over the data, with individual sentences as nodes and pair labels as signed edges.
sent9: They use balance theory and transitivity to infer augmented sentence pairs from this graph.
sent10: Motivated by image cropping and rotation, Şahin and
sent11: Steedman (2018) propose dependency tree morphing.
sent12: For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2.
sent13: This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).","Question: What are some rule-based data augmentation techniques used in NLP, and how do they improve model performance?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13","What are some rule-based data augmentation techniques used in NLP, and how do they improve model performance?","sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",2,"Here, we cover DA primitives which use easyto-compute, predetermined transforms sans model components.

Feature space DA approaches generate augmented examples in the model's feature space rather than input data.

Many few-shot learning approaches (Hariharan and Girshick, 2017;Schwartz et al., 2018) leverage estimated feature space ""analogy"" transformations between examples of known classes to augment for novel classes (see §4.4).

Paschali et al. (2019) use iterative affine transformations and projections to maximally ""stretch"" an example along the class-manifold.

Wei and Zou (2019) propose EASY DATA AUG-MENTATION (EDA), a set of token-level random perturbation operations including random insertion, deletion, and swap.

They show improved performance on many text classification tasks.

UDA (Xie et al., 2020) show how supervised DA methods can be exploited for unsupervised data through consistency training on (x, DA(x)) pairs.

For paraphrase identification, Chen et al. (2020b) construct a signed graph over the data, with individual sentences as nodes and pair labels as signed edges.

They use balance theory and transitivity to infer augmented sentence pairs from this graph.

Motivated by image cropping and rotation, Şahin and

Steedman (2018) propose dependency tree morphing.

For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2.

This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).",skip,,"Question:

What are some rule-based data augmentation techniques used in NLP, and how do they improve model performance?

Answer:

nan"
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Graph-based Methods,12,"Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures. As summarized in § 2, datasets prior to Spider typically involve simple DBs that contain only one table or a single DB in both training and testing. As a result, modeling DB schema receives little attention. Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas. Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure. In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation. RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.

Graphs have also been used to encode questions together with DB schema. Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema. Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently. SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking. Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance. To improve the generalization of the graph method for unseen domains, ShawdowGNN (Chen et al., 2021b) ignores names of tables or columns in the database and uses abstract schemas in the graph projection neural network to obtain delexicalized representations of questions and DB schemas.

Finally, graph-based techniques are also exploited in context-dependent text-to-SQL. For instance, IGSQL (Cai and Wan, 2020) uses a graph encoder to utilize historical information of DB schemas in the previous turns.

Self-attention Models using transformer-based encoder (He et al., 2019;Xie et al., 2022) incorporate the original self-attention mechanism by default because it is the building block of the transformer structure.

RAT-SQL  applies relationaware self-attention, a modified version of selfattention (Vaswani et al., 2017), to leverage relations of tables and columns. DuoRAT (Scholak et al., 2021a) also adopts such a relation-aware self-attention in their encoder.

Adapt PLM Various methods have been proposed to leverage the knowledge in pre-trained language models (PLMs) and better align PLM with the text-to-SQL task. PLMs such as BERT (Devlin et al., 2019) are used to encode questions and DB schemas. The modus operandi is to input the concatenation of question words and schema words to the BERT encoder Choi et al., 2021). Other methods adjust the embeddings by PLMs. On WikiSQL, for instance, X-SQL (He et al., 2019) replaces segment embeddings from the pre-trained encoder by column type embeddings. Guo and Gao (2019) encode two additional feature vectors for matching between question tokens and table cells as well as column names and concatenate them with BERT embeddings of questions and DB schemas.

HydraNet  uses BERT to encode the question and an individual column, aligning with the tasks BERT is pre-trained on. After obtaining the BERT representations of all columns, Lyu et al. (2020) select top-ranked columns for SQL prediction. Liu et al. (2021b) train an auxiliary concept prediction module to predict which tables and columns correspond to the question. They detect important question tokens by detecting the largest drop in the confidence score caused by erasing that token in the question. Lastly, they train the PLM with a grounding module using the question tokens and the corresponding tables as well as columns. By empirical studies, Liu et al. (2021b) claim that their approach can awaken the latent grounding from PLM via this erase-andpredict technique.

Pre-training There have been various works proposing different pre-training objectives and using different pre-training data to better align the transformer-based encoder with the text-to-SQL task. For instance, TaBERT  uses tabular data for pre-training with objectives of masked column prediction and cell value recovery to pre-train BERT. Grappa  synthesizes question-SQL pairs over tables and pre-trains BERT with the objectives of masked language modeling (MLM) and predicting whether a column appears in the SQL query as well as what SQL operations are triggered. GAP (Shi et al., 2020a) pre-trains BART (Lewis et al., 2020) on synthesized text-to-SQL and tabular data with the objectives of MLM, column prediction, column recovery, and SQL generation.","sent1: Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures.
sent2: As summarized in § 2, datasets prior to Spider typically involve simple DBs that contain only one table or a single DB in both training and testing.
sent3: As a result, modeling DB schema receives little attention.
sent4: Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas.
sent5: Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure.
sent6: In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.
sent7: RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.
sent8: Graphs have also been used to encode questions together with DB schema.
sent9: Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema.
sent10: Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently.
sent11: SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking.
sent12: Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance.
sent13: To improve the generalization of the graph method for unseen domains, ShawdowGNN (Chen et al., 2021b) ignores names of tables or columns in the database and uses abstract schemas in the graph projection neural network to obtain delexicalized representations of questions and DB schemas.
sent14: Finally, graph-based techniques are also exploited in context-dependent text-to-SQL.
sent15: For instance, IGSQL (Cai and Wan, 2020) uses a graph encoder to utilize historical information of DB schemas in the previous turns.
sent16: Self-attention Models using transformer-based encoder (He et al., 2019;Xie et al., 2022) incorporate the original self-attention mechanism by default because it is the building block of the transformer structure.
sent17: RAT-SQL  applies relationaware self-attention, a modified version of selfattention (Vaswani et al., 2017), to leverage relations of tables and columns.
sent18: DuoRAT (Scholak et al., 2021a) also adopts such a relation-aware self-attention in their encoder.
sent19: Adapt PLM Various methods have been proposed to leverage the knowledge in pre-trained language models (PLMs) and better align PLM with the text-to-SQL task.
sent20: PLMs such as BERT (Devlin et al., 2019) are used to encode questions and DB schemas.
sent21: The modus operandi is to input the concatenation of question words and schema words to the BERT encoder Choi et al., 2021).
sent22: Other methods adjust the embeddings by PLMs.
sent23: On WikiSQL, for instance, X-SQL (He et al., 2019) replaces segment embeddings from the pre-trained encoder by column type embeddings.
sent24: Guo and Gao (2019) encode two additional feature vectors for matching between question tokens and table cells as well as column names and concatenate them with BERT embeddings of questions and DB schemas.
sent25: HydraNet  uses BERT to encode the question and an individual column, aligning with the tasks BERT is pre-trained on.
sent26: After obtaining the BERT representations of all columns, Lyu et al. (2020) select top-ranked columns for SQL prediction.
sent27: Liu et al. (2021b) train an auxiliary concept prediction module to predict which tables and columns correspond to the question.
sent28: They detect important question tokens by detecting the largest drop in the confidence score caused by erasing that token in the question.
sent29: Lastly, they train the PLM with a grounding module using the question tokens and the corresponding tables as well as columns.
sent30: By empirical studies, Liu et al. (2021b) claim that their approach can awaken the latent grounding from PLM via this erase-andpredict technique.
sent31: Pre-training There have been various works proposing different pre-training objectives and using different pre-training data to better align the transformer-based encoder with the text-to-SQL task.
sent32: For instance, TaBERT  uses tabular data for pre-training with objectives of masked column prediction and cell value recovery to pre-train BERT.
sent33: Grappa  synthesizes question-SQL pairs over tables and pre-trains BERT with the objectives of masked language modeling (MLM) and predicting whether a column appears in the SQL query as well as what SQL operations are triggered.
sent34: GAP (Shi et al., 2020a) pre-trains BART (Lewis et al., 2020) on synthesized text-to-SQL and tabular data with the objectives of MLM, column prediction, column recovery, and SQL generation.","Question: How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?

Supporting sentence: sent1, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?,"sent1, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",1,"Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures.

Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas.

Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure.

In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.

RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.

Graphs have also been used to encode questions together with DB schema.

Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema.

Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently.

SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking.

Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance.

To improve the generalization of the graph method for unseen domains, ShawdowGNN (Chen et al., 2021b) ignores names of tables or columns in the database and uses abstract schemas in the graph projection neural network to obtain delexicalized representations of questions and DB schemas.

Finally, graph-based techniques are also exploited in context-dependent text-to-SQL.

For instance, IGSQL (Cai and Wan, 2020) uses a graph encoder to utilize historical information of DB schemas in the previous turns.",skip,,"Question:

How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?

Answer:

nan"
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Optimized Inputs,20,"Probing inputs contribute substantially to the probing procedure.PLMs are sensitive to the inputs (Petroni et al., 2019;Jiang et al., 2020b;Elazar et al., 2021), and even syntactical variations or distractors, that do not alter the meaning, cause the PLM's predictions to change (Heinzerling and Inui, 2021;Longpre et al., 2021;Pandia and Ettinger, 2021;Podkorytov et al., 2021;Li et al., 2022a).Therefore, depending on the probing inputs, the estimate on factual knowledge we obtain may vary significantly.Optimized inputs represent variations of the inputs, where the inputs are changed to account for the sensitivity of the probed PLMs.

Diversification and mining methods aim to diversify and optimize prompts by mining Wikipedia or other resources, and selecting the best performing prompts or a combination of them.For example, Jiang et al. (2020b) propose a mining-based and a paraphrasing-based approach to create alternative prompts that outperform manual ones.The final prompts are selected based on their performance on a training set, and can also be combined in an ensemble.Bouraoui et al. (2020) mine for prompts that contain the entities of interest, and filter these based on the ability of the probed PLMs to predict the masked objects.After the filtering step, the remaining prompts are utilized to create a dataset that consists of positive inputs, i.e., containing true subject-object pairs, and negative inputs, which contain false pairs.This dataset is then used for the final evaluation.

Direct optimization methods aim to directly optimize existing prompts.This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.These tokens are chosen to increase the probability of predicting the correct object.OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.

Generation with PLM methods re-write prompts with the help of a secondary PLM.Haviv et al. (2021) re-write manual prompts using another version of the probed model.The re-writing model is trained to produce prompts that help extract more knowledge from the probed one, which is kept unchanged.Zhang et al. (2022) leverage a generative PLM to produce optimized prompts.","sent1: Probing inputs contribute substantially to the probing procedure.
sent2: PLMs are sensitive to the inputs (Petroni et al., 2019;Jiang et al., 2020b;Elazar et al., 2021), and even syntactical variations or distractors, that do not alter the meaning, cause the PLM's predictions to change (Heinzerling and Inui, 2021;Longpre et al., 2021;Pandia and Ettinger, 2021;Podkorytov et al., 2021;Li et al., 2022a).Therefore, depending on the probing inputs, the estimate on factual knowledge we obtain may vary significantly.
sent3: Optimized inputs represent variations of the inputs, where the inputs are changed to account for the sensitivity of the probed PLMs.
sent4: Diversification and mining methods aim to diversify and optimize prompts by mining Wikipedia or other resources, and selecting the best performing prompts or a combination of them.
sent5: For example, Jiang et al. (2020b) propose a mining-based and a paraphrasing-based approach to create alternative prompts that outperform manual ones.
sent6: The final prompts are selected based on their performance on a training set, and can also be combined in an ensemble.
sent7: Bouraoui et al. (2020) mine for prompts that contain the entities of interest, and filter these based on the ability of the probed PLMs to predict the masked objects.
sent8: After the filtering step, the remaining prompts are utilized to create a dataset that consists of positive inputs, i.e., containing true subject-object pairs, and negative inputs, which contain false pairs.
sent9: This dataset is then used for the final evaluation.
sent10: Direct optimization methods aim to directly optimize existing prompts.
sent11: This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.
sent12: Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.
sent13: Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.
sent14: These tokens are chosen to increase the probability of predicting the correct object.
sent15: OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.
sent16: In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.
sent17: Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.
sent18: The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.
sent19: Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.
sent20: Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.
sent21: These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.
sent22: PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.
sent23: Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.
sent24: Generation with PLM methods re-write prompts with the help of a secondary PLM.Haviv et al. (2021) re-write manual prompts using another version of the probed model.
sent25: The re-writing model is trained to produce prompts that help extract more knowledge from the probed one, which is kept unchanged.
sent26: Zhang et al. (2022) leverage a generative PLM to produce optimized prompts.","Question: What are the methods used to optimize probing inputs for factual knowledge extraction in pre-trained language models?

Supporting sentence: sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26",What are the methods used to optimize probing inputs for factual knowledge extraction in pre-trained language models?,"sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26",3,"Optimized inputs represent variations of the inputs, where the inputs are changed to account for the sensitivity of the probed PLMs.

Diversification and mining methods aim to diversify and optimize prompts by mining Wikipedia or other resources, and selecting the best performing prompts or a combination of them.

For example, Jiang et al. (2020b) propose a mining-based and a paraphrasing-based approach to create alternative prompts that outperform manual ones.

The final prompts are selected based on their performance on a training set, and can also be combined in an ensemble.

Bouraoui et al. (2020) mine for prompts that contain the entities of interest, and filter these based on the ability of the probed PLMs to predict the masked objects.

After the filtering step, the remaining prompts are utilized to create a dataset that consists of positive inputs, i.e., containing true subject-object pairs, and negative inputs, which contain false pairs.

This dataset is then used for the final evaluation.

Direct optimization methods aim to directly optimize existing prompts.

This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.

Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.

Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.

These tokens are chosen to increase the probability of predicting the correct object.

OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.

In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.

Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.

The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.

Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.

Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.

These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.

PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.

Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.

Generation with PLM methods re-write prompts with the help of a secondary PLM.Haviv et al. (2021) re-write manual prompts using another version of the probed model.

The re-writing model is trained to produce prompts that help extract more knowledge from the probed one, which is kept unchanged.

Zhang et al. (2022) leverage a generative PLM to produce optimized prompts.",skip,,"Question:

What are the methods used to optimize probing inputs for factual knowledge extraction in pre-trained language models?

Answer:

nan"
252683270,A Decade of Knowledge Graphs in Natural Language Processing: A Survey,https://www.semanticscholar.org/paper/2341353cae858ce06225e46356c472b71dc63372,Knowledge Graph Construction,8,"The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020). Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a). A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018). Entity linking is a task of linking entities recognized in some text to already existing entities in KGs (Moon et al., 2018;. Since synonymous or similar entities often exist in different KGs or in different languages, entity alignment can be performed to reduce redundancy and repetition in future tasks (Gangemi et al., 2016;Chen et al., 2018). Coming up with the rules and schemes of KGs, i.e., their structure and format of knowledge presented in it, is done with the task of ontology construction (Haussmann et al., 2019).","sent1: The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020).
sent2: Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a).
sent3: A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).
sent4: Entity linking is a task of linking entities recognized in some text to already existing entities in KGs (Moon et al., 2018;. Since synonymous or similar entities often exist in different KGs or in different languages, entity alignment can be performed to reduce redundancy and repetition in future tasks (Gangemi et al., 2016;Chen et al., 2018).
sent5: Coming up with the rules and schemes of KGs, i.e., their structure and format of knowledge presented in it, is done with the task of ontology construction (Haussmann et al., 2019).","Question: What are the key tasks involved in constructing Knowledge Graphs (KGs) from unstructured text?

Supporting sentence: sent1, sent2, sent3, sent4, sent5",What are the key tasks involved in constructing Knowledge Graphs (KGs) from unstructured text?,"sent1, sent2, sent3, sent4, sent5",3,"The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020).

Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a).

A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).

Entity linking is a task of linking entities recognized in some text to already existing entities in KGs (Moon et al., 2018;. Since synonymous or similar entities often exist in different KGs or in different languages, entity alignment can be performed to reduce redundancy and repetition in future tasks (Gangemi et al., 2016;Chen et al., 2018).

Coming up with the rules and schemes of KGs, i.e., their structure and format of knowledge presented in it, is done with the task of ontology construction (Haussmann et al., 2019).",skip,,"Question:

What are the key tasks involved in constructing Knowledge Graphs (KGs) from unstructured text?

Answer:

nan"
253736389,Transformers for Tabular Data Representation: A Survey of Models and Applications,https://www.semanticscholar.org/paper/18ff1542d5a2a4490c7b3f21522bf1343889f700,Vanilla Transformer,6,"The vanilla transformer (Vaswani et al., 2017) is a seq2seq model (Sutskever et al., 2014) consisting of an encoder and a decoder, each of which is a stack of N identical modules. The encoder block is composed of a multi-head self-attention module and a position-wise feed-forward network. Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. Residual connections and layer-normalization modules are also used. Decoder blocks consist of cross-attention modules between the multi-head self-attention modules and the position-wise feed-forward networks, where masking is used to prevent each position from attending to subsequent positions.

The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model. The choice of the architecture depends on the final task. Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data. In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input. The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX).","sent1: The vanilla transformer (Vaswani et al., 2017) is a seq2seq model (Sutskever et al., 2014) consisting of an encoder and a decoder, each of which is a stack of N identical modules.
sent2: The encoder block is composed of a multi-head self-attention module and a position-wise feed-forward network.
sent3: Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.
sent4: Residual connections and layer-normalization modules are also used.
sent5: Decoder blocks consist of cross-attention modules between the multi-head self-attention modules and the position-wise feed-forward networks, where masking is used to prevent each position from attending to subsequent positions.
sent6: The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model.
sent7: The choice of the architecture depends on the final task.
sent8: Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data.
sent9: In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input.
sent10: The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX).","Question: What are the key components and functionalities of the vanilla transformer architecture?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6",What are the key components and functionalities of the vanilla transformer architecture?,"sent1, sent2, sent3, sent4, sent5, sent6",1,"The vanilla transformer (Vaswani et al., 2017) is a seq2seq model (Sutskever et al., 2014) consisting of an encoder and a decoder, each of which is a stack of N identical modules.

The encoder block is composed of a multi-head self-attention module and a position-wise feed-forward network.

Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.

Residual connections and layer-normalization modules are also used.

Decoder blocks consist of cross-attention modules between the multi-head self-attention modules and the position-wise feed-forward networks, where masking is used to prevent each position from attending to subsequent positions.

The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model.",skip,,"Question:

What are the key components and functionalities of the vanilla transformer architecture?

Answer:

nan"
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Skimming,7,"Skimming techniques, as summarized in Table 1, skip some time steps or allocate different computation on them. Intuitively, skimming matches how human beings efficiently read text and extract information from it (Li et al., 2019). By em-phasizing the important information within a sequence and ignoring parts with little importance, skimming helps the model achieve faster inference speed and better capture long-term dependencies. The three categories of skimming are skipping and early stopping, computation reduction, and dynamic hierarchical RNN, corresponding with three motivations: to skip unimportant input, to allocate less computation to unimportant input, and to increase computation to important input only.

Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early. LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU). At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading. LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions. The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label. Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up. Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update. If the gate decides to skip a time step, the hidden states will be directly copied without any update.

To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level. Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings. They then apply early stopping at a sentence when the policy network decides to stop reading. Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text. They propose Reading Inspired Model to mimic the behaviors of humans, which allows the model to decide whether to skip a single time step or stop reading early. Yu et al. (2018) add a rereading operation to LSTM-Jump (Yu et al., 2017) which allows the model to stay on the current time step, allocating more computation to important information.

The aforementioned techniques can only go forward, which makes it impossible to regret if hav-","sent1: Skimming techniques, as summarized in Table 1, skip some time steps or allocate different computation on them.
sent2: Intuitively, skimming matches how human beings efficiently read text and extract information from it (Li et al., 2019).
sent3: By em-phasizing the important information within a sequence and ignoring parts with little importance, skimming helps the model achieve faster inference speed and better capture long-term dependencies.
sent4: The three categories of skimming are skipping and early stopping, computation reduction, and dynamic hierarchical RNN, corresponding with three motivations: to skip unimportant input, to allocate less computation to unimportant input, and to increase computation to important input only.
sent5: Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.
sent6: LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU).
sent7: At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading.
sent8: LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.
sent9: The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label.
sent10: Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.
sent11: Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update.
sent12: If the gate decides to skip a time step, the hidden states will be directly copied without any update.
sent13: To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level.
sent14: Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings.
sent15: They then apply early stopping at a sentence when the policy network decides to stop reading.
sent16: Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text.
sent17: They propose Reading Inspired Model to mimic the behaviors of humans, which allows the model to decide whether to skip a single time step or stop reading early.
sent18: Yu et al. (2018) add a rereading operation to LSTM-Jump (Yu et al., 2017) which allows the model to stay on the current time step, allocating more computation to important information.
sent19: The aforementioned techniques can only go forward, which makes it impossible to regret if hav-","Question: What are the main categories and motivations behind skimming techniques in dynamic neural networks for NLP?

Supporting sentence: sent1, sent2, sent3, sent4",What are the main categories and motivations behind skimming techniques in dynamic neural networks for NLP?,"sent1, sent2, sent3, sent4",3,"Skimming techniques, as summarized in Table 1, skip some time steps or allocate different computation on them.

Intuitively, skimming matches how human beings efficiently read text and extract information from it (Li et al., 2019).

By em-phasizing the important information within a sequence and ignoring parts with little importance, skimming helps the model achieve faster inference speed and better capture long-term dependencies.

The three categories of skimming are skipping and early stopping, computation reduction, and dynamic hierarchical RNN, corresponding with three motivations: to skip unimportant input, to allocate less computation to unimportant input, and to increase computation to important input only.",skip,,"Question:

What are the main categories and motivations behind skimming techniques in dynamic neural networks for NLP?

Answer:

nan"
232075945,A Survey on Stance Detection for Mis-and Disinformation Identification,https://www.semanticscholar.org/paper/14ba97c7e4c7d370965333ecf3835e514c664106,B Additional Formulations of Stance as a Component for Fact-Checking,11,"Beyond the approaches that we outlined in Section 3.2, stance has also been used for detecting misconceptions and for profiling media sources as part of a fact-checking pipeline. Below, we describe some work that follows these formulations.

Misconceptions Hossain et al. (2020) focused on detecting misinformation related to COVID-19, based on known misconceptions listed in Wikipedia. They evaluated the veracity of a tweet depending on whether it agrees, disagrees, or has no stance with respect to a set of misconceptions. A related formulation of the task is detecting previously fact-checked claims (Shaar et al., 2020). This allows to assess the veracity of dubious content by evaluating the stance of a claim regarding already checked stories, known misconceptions, and facts.

Media Profiling Stance detection has also been used for media profiling. Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics. They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020). This is an important step towards understanding media biases. Tweet: Wow, that is fascinating! I hope you never mock our proud Scandi heritage again.

(b) Examples from Qazvinian et al. (2011) andDerczynski et al. (2017) Claim: The Rodney King riots took place in the most populous county in the USA. ɀiki Evidence 1: The 1992 Los Angeles riots, also known as the Rodney King riots were a series of riots, lootings, arsons, and civil disturbances that occurred in Los Angeles County, California in April and May 1992. ɀiki Evidence 2: Los Angeles County, officially the County of Los Angeles, is the most populous county in the USA.

(c) Example from  Headline: Jess Smith of Chatham, Kent was the smiling sun baby in the Teletubbies TV show ǌ Summary 1: Canterbury Christ Church University student Jess Smith, from Chatham, starred as Teletubbies sun ǌ Summary 2: This College Student Claims She Was The Teletubbies Sun Baby (d) Example from Ferreira and Vlachos (2016) u1: We understand that there are two gunmen and up to a dozen hostages inside the cafe under siege at Sydney.. ISIS flags remain on display #7News u2: @u1 not ISIS flags u3: @u1 sorry -how do you know its an ISIS flag? Can you actually confirm that? ɳ u4: @u3 no she cant cos its actually not u5: @u1 More on situation at Martin Place in Sydney, AU LINK u6: @u1 Have you actually confirmed its an ISIS flag or are you talking shit ɳ  Table 3: Illustrative examples for different stance detection scenarios included in our survey. We annotate the expressed stance with (support, for), (deny, against), ɳ (query), and (comment).

The reliability of entire news media sources has been automatically rated based on their stance with respect to manually fact-checked claims, without access to gold labels for the overall medium-level factuality of reporting (Mukherjee and Weikum, 2015;Popat et al., 2017Popat et al., , 2018. The assumption in such methods is that reliable media agree with true claims and disagree with false ones, while for unreliable media, the situation is reversed. The trustworthiness of Web sources has also been studied from a data analytics perspective, e.g., Dong et al. (2015) proposed that a trustworthy source is one that contains very few false claims.

More recently, Baly et al. (2018a) used gold labels from Media Bias/Fact Check, 5 and a variety of information sources: articles published by the medium, what is said about the medium on Wikipedia, metadata from its Twitter profile, URL structure, and traffic information. In follow-up work, Baly et al. (2019) used the same representation to jointly predict a medium's factuality of reporting (high vs. mixed vs. low) and its bias (left vs. center vs. right) on an ordinal scale, in a multi-task ordinal regression setup.  (Nakov et al., 2021) for a recent survey on media profiling.

There is a well-known connection between factuality and bias. 6 For example, hyper-partisanship is often linked to low trustworthiness (Potthast et al., 2018), e.g., appealing to emotions rather than sticking to the facts, while center media tend to be generally more impartial and also more trustworthy.

User Profiling In the case of social media and community fora, it is important to model the trustworthiness of the user. In particular, there has been research on finding opinion manipulation trolls, paid (Mihaylov et al., 2015b) or just perceived (Mihaylov et al., 2015a), sockpuppets (Maity et al., 2017Kumar et al., 2017), Internet water army (Chen et al., 2013), and seminar users (Darwish et al., 2017).","sent1: Beyond the approaches that we outlined in Section 3.2, stance has also been used for detecting misconceptions and for profiling media sources as part of a fact-checking pipeline.
sent2: Below, we describe some work that follows these formulations.
sent3: Misconceptions Hossain et al. (2020) focused on detecting misinformation related to COVID-19, based on known misconceptions listed in Wikipedia.
sent4: They evaluated the veracity of a tweet depending on whether it agrees, disagrees, or has no stance with respect to a set of misconceptions.
sent5: A related formulation of the task is detecting previously fact-checked claims (Shaar et al., 2020).
sent6: This allows to assess the veracity of dubious content by evaluating the stance of a claim regarding already checked stories, known misconceptions, and facts.
sent7: Media Profiling Stance detection has also been used for media profiling.
sent8: Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics.
sent9: They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020).
sent10: This is an important step towards understanding media biases.
sent11: Tweet: Wow, that is fascinating!
sent12: I hope you never mock our proud Scandi heritage again.
sent13: (b) Examples from Qazvinian et al. (2011)
sent14: andDerczynski et al. (2017) Claim: The Rodney King riots took place in the most populous county in the USA. ɀiki Evidence 1: The 1992 Los Angeles riots, also known as the Rodney King riots were a series of riots, lootings, arsons, and civil disturbances that occurred in Los Angeles County, California in April and May 1992.
sent15: ɀiki Evidence 2: Los Angeles County, officially the County of Los Angeles, is the most populous county in the USA.(c)
sent16: Example from  Headline: Jess Smith of Chatham, Kent was the smiling sun baby in the Teletubbies TV show ǌ
sent17: Summary 1: Canterbury Christ Church University student Jess Smith, from Chatham, starred as Teletubbies sun ǌ
sent18: Summary 2: This College Student Claims She Was The Teletubbies Sun Baby (d) Example from Ferreira and Vlachos (2016) u1: We understand that there are two gunmen and up to a dozen hostages inside the cafe under siege at Sydney.. ISIS flags remain on display #7News u2: @u1 not ISIS flags u3: @u1 sorry -how
sent19: do you know its an ISIS flag? Can you actually confirm that?
sent20: ɳ u4: @u3 no she cant cos its actually not u5: @u1 More on situation at Martin Place in Sydney, AU LINK u6: @u1 Have you actually confirmed its an ISIS flag or are you talking shit ɳ  Table
sent21: 3: Illustrative examples for different stance detection scenarios included in our survey.
sent22: We annotate the expressed stance with (support, for), (deny, against), ɳ (query), and (comment).
sent23: The reliability of entire news media sources has been automatically rated based on their stance with respect to manually fact-checked claims, without access to gold labels for the overall medium-level factuality of reporting (Mukherjee and Weikum, 2015;Popat et al., 2017Popat et al., , 2018. The assumption in such methods is that reliable media agree with true claims and disagree with false ones, while for unreliable media, the situation is reversed. The trustworthiness of Web sources has also been studied from a data analytics perspective, e.g., Dong et al. (2015) proposed that a trustworthy source is one that contains very few false claims.
sent24: More recently, Baly et al. (2018a) used gold labels from Media Bias/Fact Check, 5 and a variety of information sources: articles published by the medium, what is said about the medium on Wikipedia, metadata from its Twitter profile, URL structure, and traffic information.
sent25: In follow-up work, Baly et al. (2019) used the same representation to jointly predict a medium's factuality of reporting (high vs. mixed vs. low) and its bias (left vs. center vs. right) on an ordinal scale, in a multi-task ordinal regression setup.  (Nakov et al., 2021) for a recent survey on media profiling.
sent26: There is a well-known connection between factuality and bias.
sent27: 6 For example, hyper-partisanship is often linked to low trustworthiness (Potthast et al., 2018), e.g., appealing to emotions rather than sticking to the facts, while center media tend to be generally more impartial and also more trustworthy.
sent28: User Profiling In the case of social media and community fora, it is important to model the trustworthiness of the user.
sent29: In particular, there has been research on finding opinion manipulation trolls, paid (Mihaylov et al., 2015b) or just perceived (Mihaylov et al., 2015a), sockpuppets (Maity et al., 2017Kumar et al., 2017), Internet water army (Chen et al., 2013), and seminar users (Darwish et al., 2017).","Question: How is stance detection utilized in the context of fact-checking and media profiling?

Supporting sentence: sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent23, sent24, sent25, sent26, sent27",How is stance detection utilized in the context of fact-checking and media profiling?,"sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent23, sent24, sent25, sent26, sent27",6,"Beyond the approaches that we outlined in Section 3.2, stance has also been used for detecting misconceptions and for profiling media sources as part of a fact-checking pipeline.

Misconceptions Hossain et al. (2020) focused on detecting misinformation related to COVID-19, based on known misconceptions listed in Wikipedia.

They evaluated the veracity of a tweet depending on whether it agrees, disagrees, or has no stance with respect to a set of misconceptions.

A related formulation of the task is detecting previously fact-checked claims (Shaar et al., 2020).

This allows to assess the veracity of dubious content by evaluating the stance of a claim regarding already checked stories, known misconceptions, and facts.

Media Profiling Stance detection has also been used for media profiling.

Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics.

They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020).

This is an important step towards understanding media biases.

The reliability of entire news media sources has been automatically rated based on their stance with respect to manually fact-checked claims, without access to gold labels for the overall medium-level factuality of reporting (Mukherjee and Weikum, 2015;Popat et al., 2017Popat et al., , 2018. The assumption in such methods is that reliable media agree with true claims and disagree with false ones, while for unreliable media, the situation is reversed. The trustworthiness of Web sources has also been studied from a data analytics perspective, e.g., Dong et al. (2015) proposed that a trustworthy source is one that contains very few false claims.

More recently, Baly et al. (2018a) used gold labels from Media Bias/Fact Check, 5 and a variety of information sources: articles published by the medium, what is said about the medium on Wikipedia, metadata from its Twitter profile, URL structure, and traffic information.

In follow-up work, Baly et al. (2019) used the same representation to jointly predict a medium's factuality of reporting (high vs. mixed vs. low) and its bias (left vs. center vs. right) on an ordinal scale, in a multi-task ordinal regression setup.  (Nakov et al., 2021) for a recent survey on media profiling.

There is a well-known connection between factuality and bias.

6 For example, hyper-partisanship is often linked to low trustworthiness (Potthast et al., 2018), e.g., appealing to emotions rather than sticking to the facts, while center media tend to be generally more impartial and also more trustworthy.",invalid,,"Question:

How is stance detection utilized in the context of fact-checking and media profiling?

Answer:

nan"
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,Adaptive objectives to recommendation,7,"Numerous pre-training or fine-tuning objectives draw inspiration from LM objectives and have been effectively applied to specific downstream tasks based on the input data types and recommendation goals. In sequential recommendations, there is a common interest in modelling an ordered input sequence in an auto-regressive manner from left to right.

Analogous to text sentences,  and Xiao et al. (2022) treated the user's clicked news history as input text and proposed to model user behavior in an auto-regressive manner for next-click prediction. However, as the sequential dependency may not always hold strictly in terms of user preference for recommendations (Yuan et al., 2020a), MLM objectives can be modified accordingly. Yuan et al. (2020b) randomly masked a certain percentage of historical user records and predicted the masked items during training. Autoregressive learning tasks can also be adapted to other types of data. Geng et al. (2022b) modeled a series of paths sampled from a knowledge graph in an auto-regressive manner for recommendation by generating the end node from the pretrained model. Zhao (2022) proposed pre-training the Rearrange Sequence Prediction task to learn the sequence-level information of the user's entire interaction history by predicting whether the user interaction history had been rearranged, which is similar to Permuted Language Modelling (PerLM) (Yang et al., 2019).

MLM, also known as Cloze Prediction, can be adapted to learn graph representations for different recommendation purposes.  proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives. Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node. Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context. Apart from that, MLM can also be adapted to multi-modal data called Masked Multimodal Modelling (MMM) (Wu et al., 2022a). MMM was performed by predicting the semantics of masked news and news image regions given the unmasked inputs and indicating whether a news image and news content segment correspond to each other for news recommendation purposes.

The NSP/SOP can be adapted for CTR prediction as Next K Behaviors Prediction (NBP). NBP was proposed to learn user representations in the pre-training stage by inferring whether a candidate behavior is the next i-th behavior of the target user based on their past N behaviors. NBP can also capture the relatedness between past and multiple future behaviors.","sent1: Numerous pre-training or fine-tuning objectives draw inspiration from LM objectives and have been effectively applied to specific downstream tasks based on the input data types and recommendation goals.
sent2: In sequential recommendations, there is a common interest in modelling an ordered input sequence in an auto-regressive manner from left to right.
sent3: Analogous to text sentences,  and Xiao et al. (2022) treated the user's clicked news history as input text and proposed to model user behavior in an auto-regressive manner for next-click prediction.
sent4: However, as the sequential dependency may not always hold strictly in terms of user preference for recommendations (Yuan et al., 2020a), MLM objectives can be modified accordingly.
sent5: Yuan et al. (2020b) randomly masked a certain percentage of historical user records and predicted the masked items during training.
sent6: Autoregressive learning tasks can also be adapted to other types of data.
sent7: Geng et al. (2022b) modeled a series of paths sampled from a knowledge graph in an auto-regressive manner for recommendation by generating the end node from the pretrained model.
sent8: Zhao (2022) proposed pre-training the Rearrange Sequence Prediction task to learn the sequence-level information of the user's entire interaction history by predicting whether the user interaction history had been rearranged, which is similar to Permuted Language Modelling (PerLM) (Yang et al., 2019).MLM, also known as Cloze Prediction, can be adapted to learn graph representations for different recommendation purposes.
sent9: proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.
sent10: Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node.
sent11: Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context.
sent12: Apart from that, MLM can also be adapted to multi-modal data called Masked Multimodal Modelling (MMM) (Wu et al., 2022a).
sent13: MMM was performed by predicting the semantics of masked news and news image regions given the unmasked inputs and indicating whether a news image and news content segment correspond to each other for news recommendation purposes.
sent14: The NSP/SOP can be adapted for CTR prediction as Next K Behaviors Prediction (NBP).
sent15: NBP was proposed to learn user representations in the pre-training stage by inferring whether a candidate behavior is the next i-th behavior of the target user based on their past N behaviors.
sent16: NBP can also capture the relatedness between past and multiple future behaviors.","Question: How have pre-training and fine-tuning objectives inspired by language modeling been adapted for various recommendation tasks?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16",How have pre-training and fine-tuning objectives inspired by language modeling been adapted for various recommendation tasks?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16",6,"Numerous pre-training or fine-tuning objectives draw inspiration from LM objectives and have been effectively applied to specific downstream tasks based on the input data types and recommendation goals.

In sequential recommendations, there is a common interest in modelling an ordered input sequence in an auto-regressive manner from left to right.

Analogous to text sentences,  and Xiao et al. (2022) treated the user's clicked news history as input text and proposed to model user behavior in an auto-regressive manner for next-click prediction.

However, as the sequential dependency may not always hold strictly in terms of user preference for recommendations (Yuan et al., 2020a), MLM objectives can be modified accordingly.

Yuan et al. (2020b) randomly masked a certain percentage of historical user records and predicted the masked items during training.

Autoregressive learning tasks can also be adapted to other types of data.

Geng et al. (2022b) modeled a series of paths sampled from a knowledge graph in an auto-regressive manner for recommendation by generating the end node from the pretrained model.

Zhao (2022) proposed pre-training the Rearrange Sequence Prediction task to learn the sequence-level information of the user's entire interaction history by predicting whether the user interaction history had been rearranged, which is similar to Permuted Language Modelling (PerLM) (Yang et al., 2019).MLM, also known as Cloze Prediction, can be adapted to learn graph representations for different recommendation purposes.

proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.

Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node.

Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context.

Apart from that, MLM can also be adapted to multi-modal data called Masked Multimodal Modelling (MMM) (Wu et al., 2022a).

MMM was performed by predicting the semantics of masked news and news image regions given the unmasked inputs and indicating whether a news image and news content segment correspond to each other for news recommendation purposes.

The NSP/SOP can be adapted for CTR prediction as Next K Behaviors Prediction (NBP).

NBP was proposed to learn user representations in the pre-training stage by inferring whether a candidate behavior is the next i-th behavior of the target user based on their past N behaviors.

NBP can also capture the relatedness between past and multiple future behaviors.",invalid,,"Question:

How have pre-training and fine-tuning objectives inspired by language modeling been adapted for various recommendation tasks?

Answer:

nan"
254877753,Towards Reasoning in Large Language Models: A Survey,https://www.semanticscholar.org/paper/db4ab91d5675c37795e719e997a2827d3d83cd45,Fully Supervised Finetuning,5,"Before discussing reasoning in large language models, it is worth mentioning there is research working on eliciting/improving reasoning in small language models through fully supervised finetuning on specific datasets. For example, Rajani et al.

(2019) finetune a pretrained GPT model (Radford et al., 2018) to generate rationales that explain model predictions with the built CoS-E dataset, and find that models trained with explanations perform better on commonsense question answering tasks (Talmor et al., 2019). Talmor et al. (2020) train RoBERTa (Liu et al., 2019) to perform reasoning/inference based on both implicit pre-trained knowledge and explicit free-text statements. Hendrycks et al. (2021) finetune pretrained 2 It is important to note that the term ""reasoning"" in this paper does not necessarily imply that LLMs are truly capable of reasoning or that they are able to reason in the same way that humans do. We will discuss this issue in more detail in §6. language models to solve competition mathematics problems by generating full step-by-step solutions, though the accuracy is relatively low. Nye et al. (2022) train language models to do multi-step reasoning for program synthesis/execution by generating ""scratchpads"", i.e., intermediate computations, before producing the final answers. We refer the reader to Helwe et al. (2021); Bhargava and Ng (2022)'s survey for more studies in this line.

There are two major limitations of fully supervised finetuning. First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create. Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.","sent1: Before discussing reasoning in large language models, it is worth mentioning there is research working on eliciting/improving reasoning in small language models through fully supervised finetuning on specific datasets.
sent2: For example, Rajani et al.(2019) finetune a pretrained GPT model (Radford et al., 2018) to generate rationales that explain model predictions with the built CoS-E dataset, and find that models trained with explanations perform better on commonsense question answering tasks (Talmor et al., 2019).
sent3: Talmor et al. (2020) train RoBERTa (Liu et al., 2019) to perform reasoning/inference based on both implicit pre-trained knowledge and explicit free-text statements.
sent4: Hendrycks et al. (2021) finetune pretrained 2
sent5: It is important to note that the term ""reasoning"" in this paper does not necessarily imply that LLMs are truly capable of reasoning or that they are able to reason in the same way that humans do.
sent6: We will discuss this issue in more detail in §6.
sent7: language models to solve competition mathematics problems by generating full step-by-step solutions, though the accuracy is relatively low.
sent8: Nye et al. (2022) train language models to do multi-step reasoning for program synthesis/execution by generating ""scratchpads"", i.e., intermediate computations, before producing the final answers.
sent9: We refer the reader to Helwe et al. (2021); Bhargava and Ng (2022)'s survey for more studies in this line.
sent10: There are two major limitations of fully supervised finetuning.
sent11: First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.
sent12: Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.","Question: What are the limitations of fully supervised finetuning for improving reasoning in language models?

Supporting sentence: sent10, sent11, sent12",What are the limitations of fully supervised finetuning for improving reasoning in language models?,"sent10, sent11, sent12",3,"There are two major limitations of fully supervised finetuning.

First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.

Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.",skip,,"Question:

What are the limitations of fully supervised finetuning for improving reasoning in language models?

Answer:

nan"
256231532,Social Influence Dialogue Systems: A Survey of Datasets and Models For Social Influence Tasks,https://www.semanticscholar.org/paper/a1275e92f4830e5bbd53bc1b1fa44a9a2f024f88,Strategy Representation,4,"Implicit: The most obvious way to represent the system strategy is implicitly, without any intended decoupling between system strategy and response realization. This corresponds to the usual sequenceto-sequence framework that has been a standard baseline for the methods developed in this space. An important example is the work by Lewis et al. (2017), who were one of the first works to train endto-end dialogue models that exhibit social influence. The authors employed a neural network based on GRUs, one for encoding the negotiation context, one to encode the dialogue utterances, and two recurrent units to generate the output agreement in a bidirectional manner. Latent vectors: Yarats and Lewis (2018) explored latent vectors to decouple utterance semantics from its linguistic aspects. Their hierarchical approach first constructs a latent vector from the input message, which is then used for response generation and planning. These latent vectors are trained to maximize the likelihood of future dialogue messages and actions, which enables the decoupling between semantics and realization. Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response. The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018). Semantic Strategies: The structural properties ex-  ","sent1: Implicit: The most obvious way to represent the system strategy is implicitly, without any intended decoupling between system strategy and response realization.
sent2: This corresponds to the usual sequenceto-sequence framework that has been a standard baseline for the methods developed in this space.
sent3: An important example is the work by Lewis et al. (2017), who were one of the first works to train endto-end dialogue models that exhibit social influence.
sent4: The authors employed a neural network based on GRUs, one for encoding the negotiation context, one to encode the dialogue utterances, and two recurrent units to generate the output agreement in a bidirectional manner.
sent5: Latent vectors: Yarats and Lewis (2018) explored latent vectors to decouple utterance semantics from its linguistic aspects.
sent6: Their hierarchical approach first constructs a latent vector from the input message, which is then used for response generation and planning.
sent7: These latent vectors are trained to maximize the likelihood of future dialogue messages and actions, which enables the decoupling between semantics and realization.
sent8: Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response.
sent9: The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018).
sent10: Semantic Strategies: The structural properties ex-","Question: What are the different methods for representing system strategies in social influence dialogue systems?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",What are the different methods for representing system strategies in social influence dialogue systems?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9",6,"Implicit: The most obvious way to represent the system strategy is implicitly, without any intended decoupling between system strategy and response realization.

This corresponds to the usual sequenceto-sequence framework that has been a standard baseline for the methods developed in this space.

An important example is the work by Lewis et al. (2017), who were one of the first works to train endto-end dialogue models that exhibit social influence.

The authors employed a neural network based on GRUs, one for encoding the negotiation context, one to encode the dialogue utterances, and two recurrent units to generate the output agreement in a bidirectional manner.

Latent vectors: Yarats and Lewis (2018) explored latent vectors to decouple utterance semantics from its linguistic aspects.

Their hierarchical approach first constructs a latent vector from the input message, which is then used for response generation and planning.

These latent vectors are trained to maximize the likelihood of future dialogue messages and actions, which enables the decoupling between semantics and realization.

Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response.

The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018).",invalid,,"Question:

What are the different methods for representing system strategies in social influence dialogue systems?

Answer:

nan"
254877175,A Survey of Deep Learning for Mathematical Reasoning,https://www.semanticscholar.org/paper/2dbec38fe353ab0e495ad09263389dbc9260824d,High-quality Reasoning Chains,14,"Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt. However, manually creating reasoning chains has two disadvantages. First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks. Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer. To address this limitation, recent studies mainly fo- Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex (175B) Clustering Language Auto-generated -Complexity- CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).

Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks. In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems. Similarly , an alternative solution that uses large language models to express the reasoning process as a program. The computation is then relegated to an external computer, which executes the generated programs to derive the answer. A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.

Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a). Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer. In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.

6 Discussion and Findings

Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt. However, manually creating reasoning chains has two disadvantages. First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks. Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer. To address this limitation, recent studies mainly fo- Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex (175B) Clustering Language Auto-generated -Complexity- CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).

Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks. In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems. Similarly , an alternative solution that uses large language models to express the reasoning process as a program. The computation is then relegated to an external computer, which executes the generated programs to derive the answer. A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.

Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a). Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer. In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.

6 Discussion and Findings","sent1: Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt.
sent2: However, manually creating reasoning chains has two disadvantages.
sent3: First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks.
sent4: Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer.
sent5: To address this limitation, recent studies mainly fo-
sent6: Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex
sent7: (175B) Clustering Language Auto-generated -Complexity-
sent8: CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT
sent9: (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.
sent10: In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.
sent11: Similarly , an alternative solution that uses large language models to express the reasoning process as a program.
sent12: The computation is then relegated to an external computer, which executes the generated programs to derive the answer.
sent13: A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).
sent14: Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.
sent15: In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.
sent16: 6 Discussion and FindingsEarly chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt.
sent17: However, manually creating reasoning chains has two disadvantages.
sent18: First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks.
sent19: Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer.
sent20: To address this limitation, recent studies mainly fo-
sent21: Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex
sent22: (175B) Clustering Language Auto-generated -Complexity-
sent23: CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT
sent24: (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.
sent25: In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.
sent26: Similarly , an alternative solution that uses large language models to express the reasoning process as a program.
sent27: The computation is then relegated to an external computer, which executes the generated programs to derive the answer.
sent28: A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).
sent29: Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.
sent30: In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.
sent31: 6 Discussion and Findings","Question: What are the main approaches to improving chain-of-thought reasoning quality in mathematical reasoning tasks?

Supporting sentence: sent9, sent10, sent11, sent12, sent13, sent14, sent15",What are the main approaches to improving chain-of-thought reasoning quality in mathematical reasoning tasks?,"sent9, sent10, sent11, sent12, sent13, sent14, sent15",3,"(Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.

In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.

Similarly , an alternative solution that uses large language models to express the reasoning process as a program.

The computation is then relegated to an external computer, which executes the generated programs to derive the answer.

A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).

Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.

In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.",skip,,"Question:

What are the main approaches to improving chain-of-thought reasoning quality in mathematical reasoning tasks?

Answer:

nan"
233476148,Explanation-Based Human Debugging of NLP Models: A Survey,https://www.semanticscholar.org/paper/d84ed05ab860b75f9e6b28e717abf4bc12da03d7,Tasks,7,"Most papers in Table 1 focus on text classification with single input (TC) for a variety of specific problems such as e-mail categorization , topic classification (Kulesza et al., 2015;Teso and Kersting, 2019), spam classification (Koh and Liang, 2017), sentiment analysis (Ribeiro et al., 2018b) and auto-coding of transcripts (Kulesza et al., 2010). By contrast, Zylberajch et al. (2021) targeted natural language inference (NLI) which is a type of text-pair classification, predicting whether a given premise entails a given hypothesis. . Ghai et al. (2021) suggested that most researchers work on TC because, for this task, it is much easier for lay participants to understand explanations and give feedback (e.g., which keywords should be added or removed from the list of top features) 4 . Meanwhile, some other NLP tasks require the feedback providers to have linguistic knowledge such as part-of-speech tagging, parsing, and machine translation. The need for linguists or experts renders experiments for these tasks more difficult and costly. However, we suggest that there are several tasks where the trained models are prone to be buggy but the tasks are underexplored in the EBHD setting, though they are not too difficult to experiment on with lay people. NLI, the focus of (Zylberajch et al., 2021), is one of them. Indeed, McCoy et al. (2019) and Gururangan et al. (2018) showed that NLI models can exploit annotation artifacts and fallible syntactic heuristics to make predictions rather than learning the logic of the actual task. Other tasks and their bugs include: QA, where Ribeiro et al. (2019) found that the answers from models are sometimes inconsistent (i.e., contradicting previous answers); and reading comprehension, where Jia and Liang (2017) showed that models, which answer a question by reading a given paragraph, can be fooled by an irrelevant sentence being appended to the paragraph. These non-TC NLP tasks would be worth exploring further in the EBHD setting.","sent1: Most papers in Table 1 focus on text classification with single input (TC) for a variety of specific problems such as e-mail categorization , topic classification (Kulesza et al., 2015;Teso and Kersting, 2019), spam classification (Koh and Liang, 2017), sentiment analysis (Ribeiro et al., 2018b) and auto-coding of transcripts (Kulesza et al., 2010).
sent2: By contrast, Zylberajch et al. (2021) targeted natural language inference (NLI) which is a type of text-pair classification, predicting whether a given premise entails a given hypothesis. .
sent3: Ghai et al. (2021) suggested that most researchers work on TC because, for this task, it is much easier for lay participants to understand explanations and give feedback (e.g., which keywords should be added or removed from the list of top features) 4 .
sent4: Meanwhile, some other NLP tasks require the feedback providers to have linguistic knowledge such as part-of-speech tagging, parsing, and machine translation.
sent5: The need for linguists or experts renders experiments for these tasks more difficult and costly.
sent6: However, we suggest that there are several tasks where the trained models are prone to be buggy but the tasks are underexplored in the EBHD setting, though they are not too difficult to experiment on with lay people.
sent7: NLI, the focus of (Zylberajch et al., 2021), is one of them.
sent8: Indeed, McCoy et al. (2019) and Gururangan et al. (2018) showed that NLI models can exploit annotation artifacts and fallible syntactic heuristics to make predictions rather than learning the logic of the actual task.
sent9: Other tasks and their bugs include: QA, where Ribeiro et al. (2019) found that the answers from models are sometimes inconsistent (i.e., contradicting previous answers); and reading comprehension, where Jia and Liang (2017) showed that models, which answer a question by reading a given paragraph, can be fooled by an irrelevant sentence being appended to the paragraph.
sent10: These non-TC NLP tasks would be worth exploring further in the EBHD setting.","Question: What are the challenges and potential areas for exploration in explanation-based human debugging (EBHD) for non-text classification NLP tasks?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10",What are the challenges and potential areas for exploration in explanation-based human debugging (EBHD) for non-text classification NLP tasks?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10",7,"Meanwhile, some other NLP tasks require the feedback providers to have linguistic knowledge such as part-of-speech tagging, parsing, and machine translation.

The need for linguists or experts renders experiments for these tasks more difficult and costly.

However, we suggest that there are several tasks where the trained models are prone to be buggy but the tasks are underexplored in the EBHD setting, though they are not too difficult to experiment on with lay people.

NLI, the focus of (Zylberajch et al., 2021), is one of them.

Indeed, McCoy et al. (2019) and Gururangan et al. (2018) showed that NLI models can exploit annotation artifacts and fallible syntactic heuristics to make predictions rather than learning the logic of the actual task.

Other tasks and their bugs include: QA, where Ribeiro et al. (2019) found that the answers from models are sometimes inconsistent (i.e., contradicting previous answers); and reading comprehension, where Jia and Liang (2017) showed that models, which answer a question by reading a given paragraph, can be fooled by an irrelevant sentence being appended to the paragraph.

These non-TC NLP tasks would be worth exploring further in the EBHD setting.",invalid,,"Question:

What are the challenges and potential areas for exploration in explanation-based human debugging (EBHD) for non-text classification NLP tasks?

Answer:

nan"
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Data-Level Methods Do Not Change Model,9,"Architecture. This is more friendly to NMT. Some researchers targeted making better usage of the limited training data (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021). They trained an external model on the ZP data to recover the ZP information in the input sequence of the MT model (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021) or correct the errors in the translation outputs (Voita et al., 2019). Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021). They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019). Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data. 4. Multitask and Multi-Lingual Learning. ZPT is a hard task to be done alone, researchers are investigating how to leverage other related NLP tasks to improve ZPT by training models to perform multiple tasks simultaneously (Wang et al., 2018a). Since ZPT is a cross-lingual problem, researchers are exploring techniques for training models that can work across multiple languages, rather than being limited to a single language (Aloraini and Poesio, 2020).

6 Evaluation Methods","sent1: Architecture. This is more friendly to NMT.
sent2: Some researchers targeted making better usage of the limited training data (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021).
sent3: They trained an external model on the ZP data to recover the ZP information in the input sequence of the MT model (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021) or correct the errors in the translation outputs (Voita et al., 2019).
sent4: Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021).
sent5: They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019).
sent6: Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data.
sent7: 4. Multitask and Multi-Lingual Learning.
sent8: ZPT is a hard task to be done alone, researchers are investigating how to leverage other related NLP tasks to improve ZPT by training models to perform multiple tasks simultaneously (Wang et al., 2018a).
sent9: Since ZPT is a cross-lingual problem, researchers are exploring techniques for training models that can work across multiple languages, rather than being limited to a single language (Aloraini and Poesio, 2020).
sent10: 6 Evaluation Methods","Question: What are the data-level methods used to improve Zero Pronoun Translation (ZPT) without changing the model architecture?

Supporting sentence: sent2, sent3, sent4, sent5, sent6",What are the data-level methods used to improve Zero Pronoun Translation (ZPT) without changing the model architecture?,"sent2, sent3, sent4, sent5, sent6",2,"Some researchers targeted making better usage of the limited training data (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021).

They trained an external model on the ZP data to recover the ZP information in the input sequence of the MT model (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021) or correct the errors in the translation outputs (Voita et al., 2019).

Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021).

They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019).

Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data.",skip,,"Question:

What are the data-level methods used to improve Zero Pronoun Translation (ZPT) without changing the model architecture?

Answer:

nan"
259108815,Mapping Brains with Language Models: A Survey,https://www.semanticscholar.org/paper/a92c82231c0ea7027ab20b25fe5f82565047aad7,Performance Metrics,30,"We present the evaluation metrics used in the above studies and discuss how they relate. See Table 2 for a summary of metrics and corresponding studies. Mitchell et al. (2008) introduce pairwise matching accuracy. Because of their small sample size, they use a leave-2-out cross-validation, which later work also adopted. The metric is a binary classification accuracy metric on a balanced dataset, so a random baseline converges toward 0.5. Many studies have relied on this metric, both in encoding and decoding (see Table 2). 4 Pearson correlationPearson correlation is another widely used metric in the studies surveyed above, measuring the linear relationship between variables, and providing insight into the strength and direction of their association. Huth et al. (2016), compute Pearson correlation between predicted and actual brain responses using Gaussian random vectors to test statistical significance. Resulting p-values are corrected for multiple comparisons within each subject using false discovery rate (FDR) (Benjamini and Hochberg, 1995). Others have used Bonferroni correction (Huth et al., 2016) or block-wise permutation test (Adolf et al., 2014) to evaluate the statistical significance of the correlation (Zhang et al., 2020). Some report R 2 (explained variance) instead of or in addition to correlation coefficients (Minnema and Herbelot, 2019;Reddy and Wehbe, 2021). Others have adopted a more elaborate extension of Pearson correlation, namely BrainScore (Schrimpf et al., 2018). Brain-Score is estimated on held-out test data, calculating Pearson's correlation between model predictions and neural recordings divided by the estimated ceiling and averaged across voxels and participants.

Percentile rank was first used for encoding (Mitchell et al., 2008), but can also be used for decoding (Pereira et al., 2018;Gauthier and Levy, 2019;Minnema and Herbelot, 2019). In encoding, the predicted brain image for w is ranked along the predicted images for a set of candidate words w ′ by their similarity to the real (ground truth) image for w. The average rank is then reported. For decoding, they rank word vectors rather than neural response images. Note the similarity metric is unspecified, but typically cosine distance is used.

Mean squared error, the average of the squared differences between word vectors and neural responses, was first used for encoding in Søgaard (2016) on a held-out test split. It was also used by Gauthier and Levy (2019).

Representational similarity analysis (RSA) was introduced in Kriegeskorte et al. (2008) as a non-parametric way to characterize structural alignment between the geometries of representations derived from disparate modalities. RSA abstracts away from activity patterns themselves and instead computes representational similarity matrices (RSMs), which characterize the information carried by a given representation method through global similarity structure. A rank correlation coefficient is computed between RSMs derived from the two spaces, providing a summary statistic indicative of the overall representational alignment between them. Being non-parametric, RSA circumvents many of the various methodological weaknesses (such as over fitting, etc.). Gauthier and Levy (2019), Minnema and Herbelot (2019), and  apply (variations of) RSA to investigate the relations between different model components, and then to study the alignment of these components with brain response.

Cosine similarity was used in Mitchell et al. (2008) to select between the candidate images in pairwise matching accuracy, as well as in percentile rank and RSA, but the raw cosine similarities between predicted and real images or embeddings can also be used as a metric. Minnema and Herbelot (2019) use this metric to quantify how close the predicted word vectors are to the target. Finally, Zou et al. (2022) use precision@k, a standard metric in other mapping problems, e.g., cross-lingual word embeddings (Søgaard et al., 2019).

Comparisons Most metrics are used to evaluate both encoding and decoding models (pairwise matching accuracy, Pearson correlation, percentile rank, MSE, RSA, cosine distance). Results for two of the most widely used metrics -pairwise matching accuracy 5 and percentile rank -tend to be around 0.7-0.8 with generally better results for more recent architectures and larger LMs. To draw conclusions across studies relying on different metrics, we need to investigate which metrics are more conservative, and how different metrics relate.

Pairwise matching accuracy vs. Pearson correlation It seems that pairwise matching accuracy tends to increase monotonically with Pearson correlation. Consider three sets of distances over corresponding point sets, A, B, and C. If A and B are more strongly linearly correlated than A and C, under an optimal linear mapping Ω (minimizing point-wise squared error distance), E[(a − bΩ) 2 ] > E[(a − cΩ) 2 ]. Even in this conservative setting in our synthetic experiments in Appendix A.1, the correlation between matching accuracy and percentile rank was very high,~0.9.

Pairwise matching accuracy vs. percentile rank Both metrics have random baseline scores of 0.5, and they will converge in the limit. If a has a percentile rank of p in a list A, it will be higher than a random member of A p percent of the time. In our experiments in Appendix A.1, the correlation converges toward 1.0, with values consistently higher than 0.8 for N = 100.

Pairwise matching accuracy vs. precision@k are also positively correlated. Perfect score in one entails perfect score in the other, but precision@k can of course be very small for very high values of pairwise matching accuracy (especially if the set of candidate words is big). Conversely, we can have 5 When discriminating averages over 20 images (Wehbe et al., 2014b), scores are naturally lower. saturation for high values of k, because matching accuracies higher than n−k n will mean near-perfect precision@k scores. In practice, precision@k (for low values of k) will be much more conservative, however. The correlation coefficient for N = 100 (see Appendix A.1) tends to lie around 0.7.

Relative strength Pairwise Matching Accuracy is a relatively permissible performance metric. To see this, consider the scenario in which all target words can be divided into two equal-sized buckets based on word length (number of characters). Say the neural responses capture nothing but this binary distinction between long and short words, but do so perfectly. Moreover, our mapping method, e.g., linear regression, learns this from training data. Now, from this alone, the pairwise matching accuracy will converge toward µ = 0.75, since our model will do perfectly (1.0) on half of the data, and exhibit random performance (0.5) on the other half. If the neural responses tracked word length (and not just the distinction between short and long words), performance would be even better. In other words, Pairwise Matching Accuracy scores around 0.7-0.8 (observed in the studies above) may only reflect very shallow processing characteristics. The fact that Minnema and Herbelot (2019) only observed good results with this metric, led them to adopt a rather critical stance, for good reasons.

Other metrics are clearly more conservative. For a set of n candidate words, a random mapping will induce a precision@1-score of 1 n . While hubs may inflate scores for larger values, the metric is extremely conservative for small values of k. However, only Zou et al. (2022) use this metric, and they modify the experimental protocol substantially, making the task much easier by providing additional input to a non-linear model. The small improvement from adding neural response input is interesting, but could potentially be explained by shallow processing characteristics.

They argue that analogy testing would provide a better evaluation protocol: one would ideally use standard metrics such as semantic relatedness judgment tasks, analogy tasks, etc.

[but] this is not possible due to the limited vocabulary sizes of the available brain datasets Such evaluation is possible on small scale, though, and increasingly larger fMRI datasets are becoming available (see above). Zhang et al. (2020) have identified analogical reasoning in fMRI brain activation spaces. The analogies are computed using vector offset and probe the systematicity of how semantic relations are encoded. If a model encodes the capital-of relation systematically, we can retrieve the capital of Germany by subtracting the fMRI vector for 'Paris' from the sum of our the fMRI vectors for Germany and France. This is the same kind of analogical reasoning found in language models (Mikolov et al., 2013). Garneau et al. (2021) show that the more language models satisfy analogies, the more isomorphic they are.

So far, it seems that, with the possible exception of Zhang et al. (2020), there is little evidence for structural similarities, beyond what could be induced by shallow processing characteristics, but what about all the studies that report strong Pearson correlations? Per-voxel correlation coefficients are low on average, but across the above studies, typically only around 4-40% of the voxels exhibit significant correlations (Huth et al., 2016;. Since these correlations have been replicated across different datasets, they are generally not disputed, but could still reflect rather shallow processing characteristics.

On a more positive note, several studies show that larger (and better) language models align better with neural response measurements (Schrimpf et al., 2021;. This suggests that language models in the future may align even better with such measurements, possibly reflecting properties of deep processing. Such correlations with model quality and size are positive, making the results reported above more credible.

Generally, the conclusions we can draw from the above studies are somewhat vague. There are two reasons for this: (i) Past studies have relied on permissible (pairwise matching accuracy) and ambiguous (Pearson correlation) performance metrics; and (ii) past studies have relied on small-sized datasets. We believe that this calls for a meta-analysis of the above studies. To provide grounds for such a meta-analysis, we have in this section taken steps to compare the metrics used in these studies. We leave it for future work to explore various ways effect sizes can be computed across these studies.","sent1: We present the evaluation metrics used in the above studies and discuss how they relate.
sent2: See Table 2 for a summary of metrics and corresponding studies.
sent3: Mitchell et al. (2008) introduce pairwise matching accuracy.
sent4: Because of their small sample size, they use a leave-2-out cross-validation, which later work also adopted.
sent5: The metric is a binary classification accuracy metric on a balanced dataset, so a random baseline converges toward 0.5.
sent6: Many studies have relied on this metric, both in encoding and decoding (see Table 2).
sent7: 4 Pearson correlationPearson correlation is another widely used metric in the studies surveyed above, measuring the linear relationship between variables, and providing insight into the strength and direction of their association.
sent8: Huth et al. (2016), compute Pearson correlation between predicted and actual brain responses using Gaussian random vectors to test statistical significance.
sent9: Resulting p-values are corrected for multiple comparisons within each subject using false discovery rate (FDR) (Benjamini and Hochberg, 1995).
sent10: Others have used Bonferroni correction (Huth et al., 2016) or block-wise permutation test (Adolf et al., 2014) to evaluate the statistical significance of the correlation (Zhang et al., 2020).
sent11: Some report R 2 (explained variance) instead of or in addition to correlation coefficients (Minnema and Herbelot, 2019;Reddy and Wehbe, 2021).
sent12: Others have adopted a more elaborate extension of Pearson correlation, namely BrainScore (Schrimpf et al., 2018).
sent13: Brain-Score is estimated on held-out test data, calculating Pearson's correlation between model predictions and neural recordings divided by the estimated ceiling and averaged across voxels and participants.
sent14: Percentile rank was first used for encoding (Mitchell et al., 2008), but can also be used for decoding (Pereira et al., 2018;Gauthier and Levy, 2019;Minnema and Herbelot, 2019).
sent15: In encoding, the predicted brain image for w is ranked along the predicted images for a set of candidate words w ′ by their similarity to the real (ground truth) image for w.
sent16: The average rank is then reported.
sent17: For decoding, they rank word vectors rather than neural response images.
sent18: Note the similarity metric is unspecified, but typically cosine distance is used.
sent19: Mean squared error, the average of the squared differences between word vectors and neural responses, was first used for encoding in Søgaard (2016) on a held-out test split.
sent20: It was also used by Gauthier and Levy (2019).
sent21: Representational similarity analysis (RSA) was introduced in Kriegeskorte et al. (2008) as a non-parametric way to characterize structural alignment between the geometries of representations derived from disparate modalities.
sent22: RSA abstracts away from activity patterns themselves and instead computes representational similarity matrices (RSMs), which characterize the information carried by a given representation method through global similarity structure.
sent23: A rank correlation coefficient is computed between RSMs derived from the two spaces, providing a summary statistic indicative of the overall representational alignment between them.
sent24: Being non-parametric, RSA circumvents many of the various methodological weaknesses (such as over fitting, etc.).
sent25: Gauthier and Levy (2019), Minnema and Herbelot (2019), and  apply (variations of) RSA to investigate the relations between different model components, and then to study the alignment of these components with brain response.
sent26: Cosine similarity was used in Mitchell et al. (2008) to select between the candidate images in pairwise matching accuracy, as well as in percentile rank and RSA, but the raw cosine similarities between predicted and real images or embeddings can also be used as a metric.
sent27: Minnema and Herbelot (2019) use this metric to quantify how close the predicted word vectors are to the target.
sent28: Finally, Zou et al. (2022) use precision@k, a standard metric in other mapping problems, e.g., cross-lingual word embeddings (Søgaard et al., 2019).
sent29: Comparisons Most metrics are used to evaluate both encoding and decoding models (pairwise matching accuracy, Pearson correlation, percentile rank, MSE, RSA, cosine distance).
sent30: Results for two of the most widely used metrics -pairwise matching accuracy 5 and percentile rank -tend to be around 0.7-0.8 with generally better results for more recent architectures and larger LMs.
sent31: To draw conclusions across studies relying on different metrics, we need to investigate which metrics are more conservative, and how different metrics relate.
sent32: Pairwise matching accuracy vs. Pearson correlation It seems that pairwise matching accuracy tends to increase monotonically with Pearson correlation.
sent33: Consider three sets of distances over corresponding point sets, A, B, and C. If A and B are more strongly linearly correlated than A and C, under an optimal linear mapping Ω (minimizing point-wise squared error distance), E[(a − bΩ) 2 ] > E[(a − cΩ) 2 ].
sent34: Even in this conservative setting in our synthetic experiments in Appendix A.1, the correlation between matching accuracy and percentile rank was very high,~0.9.
sent35: Pairwise matching accuracy vs. percentile rank Both metrics have random baseline scores of 0.5, and they will converge in the limit.
sent36: If a has a percentile rank of p in a list A, it will be higher than a random member of A p percent of the time.
sent37: In our experiments in Appendix A.1, the correlation converges toward 1.0, with values consistently higher than 0.8 for N = 100.
sent38: Pairwise matching accuracy vs. precision@k are also positively correlated.
sent39: Perfect score in one entails perfect score in the other, but precision@k can of course be very small for very high values of pairwise matching accuracy (especially if the set of candidate words is big).
sent40: Conversely, we can have 5 When discriminating averages over 20 images (Wehbe et al., 2014b), scores are naturally lower.
sent41: saturation for high values of k, because matching accuracies higher than n−k n will mean near-perfect precision@k scores.
sent42: In practice, precision@k (for low values of k) will be much more conservative, however.
sent43: The correlation coefficient for N = 100 (see Appendix A.1) tends to lie around 0.7.
sent44: Relative strength Pairwise Matching Accuracy is a relatively permissible performance metric.
sent45: To see this, consider the scenario in which all target words can be divided into two equal-sized buckets based on word length (number of characters).
sent46: Say the neural responses capture nothing but this binary distinction between long and short words, but do so perfectly.
sent47: Moreover, our mapping method, e.g., linear regression, learns this from training data.
sent48: Now, from this alone, the pairwise matching accuracy will converge toward µ = 0.75, since our model will do perfectly (1.0) on half of the data, and exhibit random performance (0.5) on the other half.
sent49: If the neural responses tracked word length (and not just the distinction between short and long words), performance would be even better.
sent50: In other words, Pairwise Matching Accuracy scores around 0.7-0.8 (observed in the studies above) may only reflect very shallow processing characteristics.
sent51: The fact that Minnema and Herbelot (2019) only observed good results with this metric, led them to adopt a rather critical stance, for good reasons.
sent52: Other metrics are clearly more conservative.
sent53: For a set of n candidate words, a random mapping will induce a precision@1-score of 1 n .
sent54: While hubs may inflate scores for larger values, the metric is extremely conservative for small values of k.
sent55: However, only Zou et al. (2022) use this metric, and they modify the experimental protocol substantially, making the task much easier by providing additional input to a non-linear model.
sent56: The small improvement from adding neural response input is interesting, but could potentially be explained by shallow processing characteristics.
sent57: They argue that analogy testing would provide a better evaluation protocol: one would ideally use standard metrics such as semantic relatedness judgment tasks, analogy tasks, etc.
sent58: [but] this is not possible due to the limited vocabulary sizes of the available brain datasets Such evaluation is possible on small scale, though, and increasingly larger fMRI datasets are becoming available (see above).
sent59: Zhang et al. (2020) have identified analogical reasoning in fMRI brain activation spaces.
sent60: The analogies are computed using vector offset and probe the systematicity of how semantic relations are encoded.
sent61: If a model encodes the capital-of relation systematically, we can retrieve the capital of Germany by subtracting the fMRI vector for 'Paris' from the sum of our the fMRI vectors for Germany and France.
sent62: This is the same kind of analogical reasoning found in language models (Mikolov et al., 2013).
sent63: Garneau et al. (2021) show that the more language models satisfy analogies, the more isomorphic they are.
sent64: So far, it seems that, with the possible exception of Zhang et al. (2020), there is little evidence for structural similarities, beyond what could be induced by shallow processing characteristics, but what about all the studies that report strong Pearson correlations?
sent65: Per-voxel correlation coefficients are low on average, but across the above studies, typically only around 4-40% of the voxels exhibit significant correlations (Huth et al., 2016;.
sent66: Since these correlations have been replicated across different datasets, they are generally not disputed, but could still reflect rather shallow processing characteristics.
sent67: On a more positive note, several studies show that larger (and better) language models align better with neural response measurements (Schrimpf et al., 2021;.
sent68: This suggests that language models in the future may align even better with such measurements, possibly reflecting properties of deep processing.
sent69: Such correlations with model quality and size are positive, making the results reported above more credible.
sent70: Generally, the conclusions we can draw from the above studies are somewhat vague.
sent71: There are two reasons for this: (i) Past studies have relied on permissible (pairwise matching accuracy) and ambiguous (Pearson correlation) performance metrics; and (ii) past studies have relied on small-sized datasets.
sent72: We believe that this calls for a meta-analysis of the above studies.
sent73: To provide grounds for such a meta-analysis, we have in this section taken steps to compare the metrics used in these studies.
sent74: We leave it for future work to explore various ways effect sizes can be computed across these studies.","Question: What are the main evaluation metrics used in studies mapping brain activity with language models, and how do they relate to each other?

Supporting sentence: sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44, sent45, sent46, sent47, sent48, sent49, sent50, sent51, sent52, sent53, sent54, sent55, sent56, sent57, sent58, sent59, sent60, sent61, sent62, sent63, sent64, sent65, sent66, sent67, sent68, sent69, sent70, sent71, sent72, sent73","What are the main evaluation metrics used in studies mapping brain activity with language models, and how do they relate to each other?","sent1, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44, sent45, sent46, sent47, sent48, sent49, sent50, sent51, sent52, sent53, sent54, sent55, sent56, sent57, sent58, sent59, sent60, sent61, sent62, sent63, sent64, sent65, sent66, sent67, sent68, sent69, sent70, sent71, sent72, sent73",3,"We present the evaluation metrics used in the above studies and discuss how they relate.

Mitchell et al. (2008) introduce pairwise matching accuracy.

Because of their small sample size, they use a leave-2-out cross-validation, which later work also adopted.

The metric is a binary classification accuracy metric on a balanced dataset, so a random baseline converges toward 0.5.

Many studies have relied on this metric, both in encoding and decoding (see Table 2).

4 Pearson correlationPearson correlation is another widely used metric in the studies surveyed above, measuring the linear relationship between variables, and providing insight into the strength and direction of their association.

Huth et al. (2016), compute Pearson correlation between predicted and actual brain responses using Gaussian random vectors to test statistical significance.

Resulting p-values are corrected for multiple comparisons within each subject using false discovery rate (FDR) (Benjamini and Hochberg, 1995).

Others have used Bonferroni correction (Huth et al., 2016) or block-wise permutation test (Adolf et al., 2014) to evaluate the statistical significance of the correlation (Zhang et al., 2020).

Some report R 2 (explained variance) instead of or in addition to correlation coefficients (Minnema and Herbelot, 2019;Reddy and Wehbe, 2021).

Others have adopted a more elaborate extension of Pearson correlation, namely BrainScore (Schrimpf et al., 2018).

Brain-Score is estimated on held-out test data, calculating Pearson's correlation between model predictions and neural recordings divided by the estimated ceiling and averaged across voxels and participants.

Percentile rank was first used for encoding (Mitchell et al., 2008), but can also be used for decoding (Pereira et al., 2018;Gauthier and Levy, 2019;Minnema and Herbelot, 2019).

In encoding, the predicted brain image for w is ranked along the predicted images for a set of candidate words w ′ by their similarity to the real (ground truth) image for w.

The average rank is then reported.

For decoding, they rank word vectors rather than neural response images.

Note the similarity metric is unspecified, but typically cosine distance is used.

Mean squared error, the average of the squared differences between word vectors and neural responses, was first used for encoding in Søgaard (2016) on a held-out test split.

It was also used by Gauthier and Levy (2019).

Representational similarity analysis (RSA) was introduced in Kriegeskorte et al. (2008) as a non-parametric way to characterize structural alignment between the geometries of representations derived from disparate modalities.

RSA abstracts away from activity patterns themselves and instead computes representational similarity matrices (RSMs), which characterize the information carried by a given representation method through global similarity structure.

A rank correlation coefficient is computed between RSMs derived from the two spaces, providing a summary statistic indicative of the overall representational alignment between them.

Being non-parametric, RSA circumvents many of the various methodological weaknesses (such as over fitting, etc.).

Gauthier and Levy (2019), Minnema and Herbelot (2019), and  apply (variations of) RSA to investigate the relations between different model components, and then to study the alignment of these components with brain response.

Cosine similarity was used in Mitchell et al. (2008) to select between the candidate images in pairwise matching accuracy, as well as in percentile rank and RSA, but the raw cosine similarities between predicted and real images or embeddings can also be used as a metric.

Minnema and Herbelot (2019) use this metric to quantify how close the predicted word vectors are to the target.

Finally, Zou et al. (2022) use precision@k, a standard metric in other mapping problems, e.g., cross-lingual word embeddings (Søgaard et al., 2019).

Comparisons Most metrics are used to evaluate both encoding and decoding models (pairwise matching accuracy, Pearson correlation, percentile rank, MSE, RSA, cosine distance).

Results for two of the most widely used metrics -pairwise matching accuracy 5 and percentile rank -tend to be around 0.7-0.8 with generally better results for more recent architectures and larger LMs.

To draw conclusions across studies relying on different metrics, we need to investigate which metrics are more conservative, and how different metrics relate.

Pairwise matching accuracy vs. Pearson correlation It seems that pairwise matching accuracy tends to increase monotonically with Pearson correlation.

Consider three sets of distances over corresponding point sets, A, B, and C. If A and B are more strongly linearly correlated than A and C, under an optimal linear mapping Ω (minimizing point-wise squared error distance), E[(a − bΩ) 2 ] > E[(a − cΩ) 2 ].

Even in this conservative setting in our synthetic experiments in Appendix A.1, the correlation between matching accuracy and percentile rank was very high,~0.9.

Pairwise matching accuracy vs. percentile rank Both metrics have random baseline scores of 0.5, and they will converge in the limit.

If a has a percentile rank of p in a list A, it will be higher than a random member of A p percent of the time.

In our experiments in Appendix A.1, the correlation converges toward 1.0, with values consistently higher than 0.8 for N = 100.

Pairwise matching accuracy vs. precision@k are also positively correlated.

Perfect score in one entails perfect score in the other, but precision@k can of course be very small for very high values of pairwise matching accuracy (especially if the set of candidate words is big).

Conversely, we can have 5 When discriminating averages over 20 images (Wehbe et al., 2014b), scores are naturally lower.

saturation for high values of k, because matching accuracies higher than n−k n will mean near-perfect precision@k scores.

In practice, precision@k (for low values of k) will be much more conservative, however.

The correlation coefficient for N = 100 (see Appendix A.1) tends to lie around 0.7.

Relative strength Pairwise Matching Accuracy is a relatively permissible performance metric.

To see this, consider the scenario in which all target words can be divided into two equal-sized buckets based on word length (number of characters).

Say the neural responses capture nothing but this binary distinction between long and short words, but do so perfectly.

Moreover, our mapping method, e.g., linear regression, learns this from training data.

Now, from this alone, the pairwise matching accuracy will converge toward µ = 0.75, since our model will do perfectly (1.0) on half of the data, and exhibit random performance (0.5) on the other half.

If the neural responses tracked word length (and not just the distinction between short and long words), performance would be even better.

In other words, Pairwise Matching Accuracy scores around 0.7-0.8 (observed in the studies above) may only reflect very shallow processing characteristics.

The fact that Minnema and Herbelot (2019) only observed good results with this metric, led them to adopt a rather critical stance, for good reasons.

Other metrics are clearly more conservative.

For a set of n candidate words, a random mapping will induce a precision@1-score of 1 n .

While hubs may inflate scores for larger values, the metric is extremely conservative for small values of k.

However, only Zou et al. (2022) use this metric, and they modify the experimental protocol substantially, making the task much easier by providing additional input to a non-linear model.

The small improvement from adding neural response input is interesting, but could potentially be explained by shallow processing characteristics.

They argue that analogy testing would provide a better evaluation protocol: one would ideally use standard metrics such as semantic relatedness judgment tasks, analogy tasks, etc.

[but] this is not possible due to the limited vocabulary sizes of the available brain datasets Such evaluation is possible on small scale, though, and increasingly larger fMRI datasets are becoming available (see above).

Zhang et al. (2020) have identified analogical reasoning in fMRI brain activation spaces.

The analogies are computed using vector offset and probe the systematicity of how semantic relations are encoded.

If a model encodes the capital-of relation systematically, we can retrieve the capital of Germany by subtracting the fMRI vector for 'Paris' from the sum of our the fMRI vectors for Germany and France.

This is the same kind of analogical reasoning found in language models (Mikolov et al., 2013).

Garneau et al. (2021) show that the more language models satisfy analogies, the more isomorphic they are.

So far, it seems that, with the possible exception of Zhang et al. (2020), there is little evidence for structural similarities, beyond what could be induced by shallow processing characteristics, but what about all the studies that report strong Pearson correlations?

Per-voxel correlation coefficients are low on average, but across the above studies, typically only around 4-40% of the voxels exhibit significant correlations (Huth et al., 2016;.

Since these correlations have been replicated across different datasets, they are generally not disputed, but could still reflect rather shallow processing characteristics.

On a more positive note, several studies show that larger (and better) language models align better with neural response measurements (Schrimpf et al., 2021;.

This suggests that language models in the future may align even better with such measurements, possibly reflecting properties of deep processing.

Such correlations with model quality and size are positive, making the results reported above more credible.

Generally, the conclusions we can draw from the above studies are somewhat vague.

There are two reasons for this: (i) Past studies have relied on permissible (pairwise matching accuracy) and ambiguous (Pearson correlation) performance metrics; and (ii) past studies have relied on small-sized datasets.

We believe that this calls for a meta-analysis of the above studies.

To provide grounds for such a meta-analysis, we have in this section taken steps to compare the metrics used in these studies.",skip,,"Question:

What are the main evaluation metrics used in studies mapping brain activity with language models, and how do they relate to each other?

Answer:

nan"
252992688,A Survey of Active Learning for Natural Language Processing,https://www.semanticscholar.org/paper/3cd98a010b36832fc2bd8368cd4f34c72cd0ac6f,Performance Prediction,8,"Predicting performance can be another indicator for querying. Ideally, the selected instances should be the ones that most reduce future errors if labeled and added to the training set. This motivates the expected error reduction strategy (Roy and McCallum, 2001), which chooses instances that lead to the least expected error if added to retrain a model. This strategy can be computationally costly since retraining is needed for each candidate.

Recently, methods have been proposed to learn another model to select instances that lead to the fewest errors, usually measured on a held-out development set. Reinforcement learning and imitation learning have been utilized to train such policy models (Bachman et al., 2017;Fang et al., 2017;Liu et al., 2018a,b). This learning-to-select strategy may have some constraints. First, it requires labeled data (maybe from another domain) to train the policy. To mitigate this reliance, Vu et al. (2019) use the current task model as an imperfect annotator for AL simulations. Moreover, the learning signals may be unstable for complex tasks, as Koshorek et al. (2019) show for semantic tasks.

A similar and simpler idea is to select the most erroneous or ambiguous instances with regard to the current task model, which can also be done with another performance-prediction model. Yoo and Kweon (2019) directly train a smaller model to predict the instance losses for CV tasks, which have been also adopted for NLP (Cai et al., 2021;. In a similar spirit,  employ a neural model to judge the correctness of the model prediction for SRL and Brantley et al. (2020) learn a policy to decide whether expert querying is required for each state in sequence labeling. Inspired by data maps (Swayamdipta et al., 2020), Zhang and Plank (2021) train a model to select ambiguous instances whose average correct-ness over the training iterations is close to a predefined threshold. For machine translation (MT), special techniques can be utilized to seek erroneous instances, such as using a backward translator to check round-trip translations (Haffari et al., 2009; or quality estimation (Logacheva and Specia, 2014a,b).","sent1: Predicting performance can be another indicator for querying.
sent2: Ideally, the selected instances should be the ones that most reduce future errors if labeled and added to the training set.
sent3: This motivates the expected error reduction strategy (Roy and McCallum, 2001), which chooses instances that lead to the least expected error if added to retrain a model.
sent4: This strategy can be computationally costly since retraining is needed for each candidate.
sent5: Recently, methods have been proposed to learn another model to select instances that lead to the fewest errors, usually measured on a held-out development set.
sent6: Reinforcement learning and imitation learning have been utilized to train such policy models (Bachman et al., 2017;Fang et al., 2017;Liu et al., 2018a,b).
sent7: This learning-to-select strategy may have some constraints.
sent8: First, it requires labeled data (maybe from another domain) to train the policy.
sent9: To mitigate this reliance, Vu et al. (2019) use the current task model as an imperfect annotator for AL simulations.
sent10: Moreover, the learning signals may be unstable for complex tasks, as Koshorek et al. (2019) show for semantic tasks.
sent11: A similar and simpler idea is to select the most erroneous or ambiguous instances with regard to the current task model, which can also be done with another performance-prediction model.
sent12: Yoo and Kweon (2019) directly train a smaller model to predict the instance losses for CV tasks, which have been also adopted for NLP (Cai et al., 2021;. In a similar spirit,  employ a neural model to judge the correctness of the model prediction for SRL and Brantley et al. (2020) learn a policy to decide whether expert querying is required for each state in sequence labeling.
sent13: Inspired by data maps (Swayamdipta et al., 2020), Zhang and Plank (2021) train a model to select ambiguous instances whose average correct-ness over the training iterations is close to a predefined threshold.
sent14: For machine translation (MT), special techniques can be utilized to seek erroneous instances, such as using a backward translator to check round-trip translations (Haffari et al., 2009; or quality estimation (Logacheva and Specia, 2014a,b).","Question: What are the strategies and challenges associated with using performance prediction for active learning in NLP?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14",What are the strategies and challenges associated with using performance prediction for active learning in NLP?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14",4,"Predicting performance can be another indicator for querying.

Ideally, the selected instances should be the ones that most reduce future errors if labeled and added to the training set.

This motivates the expected error reduction strategy (Roy and McCallum, 2001), which chooses instances that lead to the least expected error if added to retrain a model.

This strategy can be computationally costly since retraining is needed for each candidate.

Recently, methods have been proposed to learn another model to select instances that lead to the fewest errors, usually measured on a held-out development set.

Reinforcement learning and imitation learning have been utilized to train such policy models (Bachman et al., 2017;Fang et al., 2017;Liu et al., 2018a,b).

This learning-to-select strategy may have some constraints.

First, it requires labeled data (maybe from another domain) to train the policy.

To mitigate this reliance, Vu et al. (2019) use the current task model as an imperfect annotator for AL simulations.

Moreover, the learning signals may be unstable for complex tasks, as Koshorek et al. (2019) show for semantic tasks.

A similar and simpler idea is to select the most erroneous or ambiguous instances with regard to the current task model, which can also be done with another performance-prediction model.

Yoo and Kweon (2019) directly train a smaller model to predict the instance losses for CV tasks, which have been also adopted for NLP (Cai et al., 2021;. In a similar spirit,  employ a neural model to judge the correctness of the model prediction for SRL and Brantley et al. (2020) learn a policy to decide whether expert querying is required for each state in sequence labeling.

Inspired by data maps (Swayamdipta et al., 2020), Zhang and Plank (2021) train a model to select ambiguous instances whose average correct-ness over the training iterations is close to a predefined threshold.

For machine translation (MT), special techniques can be utilized to seek erroneous instances, such as using a backward translator to check round-trip translations (Haffari et al., 2009; or quality estimation (Logacheva and Specia, 2014a,b).",skip,,"Question:

What are the strategies and challenges associated with using performance prediction for active learning in NLP?

Answer:

nan"
259108815,Mapping Brains with Language Models: A Survey,https://www.semanticscholar.org/paper/a92c82231c0ea7027ab20b25fe5f82565047aad7,Datasets,39,"To infer a mapping between language models and brains, researchers rely on datasets in which brain activity is recorded in response to linguistic stimuli. In some studies, the stimuli are single words (Mitchell et al., 2008;Anderson et al., 2017) or sentences displayed on a screen (Pereira et al., 2018). In others, participants read longer stories (Wehbe et al., 2014a;Bhattasali et al., 2020;Nastase et al., 2021) or listened to speech or podcasts (Huth et al., 2016;Antonello et al., 2021). Table 1 lists publicly available datasets that have been used in the context of mapping language models to and from recordings of brain response. Differences between the datasets -the number of participants, the equipment, the experimental setup, pre-processing steps, and probabilistic corrections -should lead us to expect some variation in what researchers have concluded (Hollenstein et al., 2020).

3 How to predict brain activity?

In this section, we survey work in which neural responses are predicted from linguistic representations. Such work typically aims to shed light on how language functions in the brain. One of the earliest studies exploring the mapping between brain and language representations is by Mitchell et al. (2008), who trained a linear regression model on a set of word representations extracted from 60 nouns using 115 semantic features based on cooccurrence statistics, to predict the corresponding fMRI representations of the same nouns. They use pair-wise matching accuracy evaluation, extracting two words w and w ′ for evaluation, and showed that the predicted fMRI for a word w was closer to the real fMRI image for w than to the real fMRI image for w ′ , at above-chance levels. Mitchell et al. (2008) also report percentile rank results, ranking predicted fMRI images by similarity with the real image of w. We discuss how the metrics relate in §6.

The dataset of Mitchell et al. (2008)is also used by Murphy et al. (2012), who extract linguistic features from part-of-speech taggers, stemmers, and dependency parsers, showing that dependency parsers are the most successful in predicting brain activity. They also use leave-2-out pair-matching as their performance metric.

Later on, Wehbe et al. (2014a) moved on to predicting brain activation patterns for entire sentences rather than for isolated words. They recorded fMRI neural response measurements while participants read a chapter from Harry Potter and the Sorcerer's Stone, then extracted a set of 195 features for each word (ranging from semantic, syntactic properties to visual and discourse-level features) to train a comprehensive generative model that would then predict the time series of the fMRI activity observed when the participants read that passage. Leave-2-out pair-matching accuracy is used for evaluation. Huth et al. (2016), in contrast, use fMRI recordings of participants listening to spoken narrative stories, representing each word in the corpus as a 985-dimensional vector encoding semantic information driven by co-occurrence statistics. They train per-voxel linear regression models and evaluate their predicted per-word fMRI images by their per-voxel Pearson correlation with the real fMRI images, showing that 3-4 dimensions explained a significant amount of variance in the FMRI data. Wehbe et al. (2014b) are among the first to use neural language models, using recurrent models to compute contextualized embeddings, hidden state vectors of previous words, and word probabilities.  of participants reading Harry Potter, obtained in a follow-up study to Wehbe et al. (2014a). From the three sets of representations, they then train linear regression models to predict the MEG vectors corresponding to each word, and the regression models are then evaluated by computing pair-matching accuracy.

Similarly, Søgaard (2016) evaluates static word embeddings on the data from Wehbe et al. (2014a), learning linear transformation from word embeddings into an fMRI vector space. The predictions are evaluated through mean squared error (MSE).

Jain and Huth (2018) evaluate recurrent language models against the fMRI dataset from Huth et al. (2016). Their findings show that contextual language model representations align significantly better (to brain response) compared to static word embedding models. Their evaluation metric is the total sum of explained variance 1 Following this, Schwartz et al. (2019) use attention-based transformer language models for brain mapping. They finetune BERT (Devlin et al., 2019)to predict neural response measurements from the Harry Potter dataset, showing that the fine-tuned models have representations that encode more brain-activity-relevant language information than the non-finetuned models. They rely on pair-matching accuracy as their performance metric.

As in Søgaard (2016), Zhang et al. (2020) map static word embeddings into the vector space of the neural response measurements (fMRI). They introduce a new dataset of such measurements from subjects listening to natural stories. They rely on explained variance as their performance metric.

Toneva and Wehbe (2019) evaluate word and sequence embeddings from 4 recurrent and attention-based transformer language models, using the Harry Potter fMRI dataset. They evaluate models across layers, context lengths, and attention types, using pairwise matching accuracy as their performance metric. In a later study, Toneva et al. (2022a) induce compositional semantic representations of ""supra-word meaning"" which they then use to predict neural responses across regions of interest, evaluating their models using Pearson correlation.

Also using the Harry Potter data,  evaluate five models, one static and four contextualized, relying on a variant of representational similarity analysis (Kriegeskorte et al., 2008). The results suggest that models provide representations of local contexts that are well-aligned to neural measurements. However, as information from further away context is integrated by the models, representations become less aligned to neural measurements.

In a large-scale study, Schrimpf et al. (2021) examine the relationships between 43 diverse stateof-the-art neural network models (including embedding models, recurrent models, and transformers) across three datasets (two fMRI, one electrocardiography). They rely on a metric they term Brain Score which involves normalising the Pearson correlation by a noise ceiling. Their results show that transformer-based models perform better than recurrent or static models, and larger models perform better than smaller ones.

Similarly, in , the Schoffelen et al. (2019) fMRI and MEG datasets are used to compare a variety of transformer architectures. They study how architectural details, training settings, and the linguistic performance of these models independently account for the generation of brain correspondent representations. The results suggest that the better language models are at predicting words from context, the better their activations linearly map onto those of the brain. Antonello et al. (2021) evaluate three static and five attention-based transformer models, in combination with four fine-tuning tasks and two machine translation models. They train linear regression models to evaluate their word-level representations against a new fMRI dataset from participants listening to podcast stories. They find a low-dimensional structure in language representations that can predict brain responses. In a similar setting, Antonello and Huth (2022) examine why some features fit the brain data better arguing that the reason is that they capture various linguistic phenomena.

Reddy and Wehbe (2021) evaluate syntactic features in conjunction with BERT representations, finding that syntax explains additional variance in brain activity in various parts of the language system, even while controlling for complexity metrics that capture processing load.

In a series of studies Caucheteux et al. (2021Caucheteux et al. ( , 2022b investigate GPT2's activations in predicting brain signals using the Nastase et al. (2021) dataset. Their evaluation metric is Brain Score (Schrimpf et al., 2018). To determine which factors affect the brain encoding Pasquiou et al. (2022) examine the impact of test loss, training corpus, model architecture, and fine-tuning in various models using the Li et al. (2022) dataset. They evaluate model performance using Pearson Correlation.

Oota et al. (2022a) study the impact of context size in language models on how they align with neural response measurements. They use the Nastase et al. (2021) dataset and evaluate recurrent and attention-based transformer architectures. In a later study, Oota et al. (2022b) use the Pereira et al. (2018) dataset and evaluate BERTbase models (fine-tuned for various NLP tasks). They showed that neural response predictions from ridge regression with BERT-base models fine-tuned for coreference resolution, NER, and shallow syntactic parsing explained more variance for Pereira et al. (2018) response measurements. On the other hand, tasks such as paraphrase generation, summarization, and natural language inference led to better encoding performance for the Nastase et al. (2021) data (audio). Using the same dataset, in Oota et al. (2022c) it is shown that the presence of surface, syntactic, and semantic linguistic information is crucial for the alignment across all layers of the language model. They use pairwise matching accuracy and/or Pearson correlation as their performance metrics in these studies.

Aw and Toneva (2023) extract feature representations from four attention-based transformer models. They evaluate the impact of fine-tuning on the BookSum dataset (Kryscinski et al., 2021). All models are used to predict brain activity on the Harry Potter data. Pairwise matching accuracy and Pearson correlation are their performance metrics. Merlin and Toneva (2022) focus more narrowly on variants of GPT-2, showing that improvements in alignment with brain recordings are probably not because of the next-word prediction task or wordlevel semantics, but due to multi-word semantics. Their reported metric is Pearson correlation.

Intermediate summary The above studies differ in many respects. Several metrics are used: pairwise-matching accuracy, 2 Pearson correlation (or Brain Score), mean squared error, and representational similarity analysis. Even studies that report the same performance metrics are not directly comparable because they often report on results on different datasets and use slightly different protocols, e.g., Murphy et al. (2012) and Wehbe et al. (2014b). Beinborn et al. (2023) compare various encoding experiments and receive very diverse results for different evaluation metrics. The diversity of metrics and data renders a direct comparison difficult. To remedy this, we consider how the metrics compare in §6.","sent1: To infer a mapping between language models and brains, researchers rely on datasets in which brain activity is recorded in response to linguistic stimuli.
sent2: In some studies, the stimuli are single words (Mitchell et al., 2008;Anderson et al., 2017) or sentences displayed on a screen (Pereira et al., 2018).
sent3: In others, participants read longer stories (Wehbe et al., 2014a;Bhattasali et al., 2020;Nastase et al., 2021) or listened to speech or podcasts (Huth et al., 2016;Antonello et al., 2021).
sent4: Table 1 lists publicly available datasets that have been used in the context of mapping language models to and from recordings of brain response.
sent5: Differences between the datasets -the number of participants, the equipment, the experimental setup, pre-processing steps, and probabilistic corrections -should lead us to expect some variation in what researchers have concluded (Hollenstein et al., 2020).
sent6: 3 How to predict brain activity?
sent7: In this section, we survey work in which neural responses are predicted from linguistic representations.
sent8: Such work typically aims to shed light on how language functions in the brain.
sent9: One of the earliest studies exploring the mapping between brain and language representations is by Mitchell et al. (2008), who trained a linear regression model on a set of word representations extracted from 60 nouns using 115 semantic features based on cooccurrence statistics, to predict the corresponding fMRI representations of the same nouns.
sent10: They use pair-wise matching accuracy evaluation, extracting two words w and w ′ for evaluation, and showed that the predicted fMRI for a word w was closer to the real fMRI image for w than to the real fMRI image for w ′ , at above-chance levels.
sent11: Mitchell et al. (2008) also report percentile rank results, ranking predicted fMRI images by similarity with the real image of w. We discuss how the metrics relate in §6.
sent12: The dataset of Mitchell et al. (2008)is also used by Murphy et al. (2012), who extract linguistic features from part-of-speech taggers, stemmers, and dependency parsers, showing that dependency parsers are the most successful in predicting brain activity.
sent13: They also use leave-2-out pair-matching as their performance metric.Later on, Wehbe et al. (2014a) moved on to predicting brain activation patterns for entire sentences rather than for isolated words.
sent14: They recorded fMRI neural response measurements while participants read a chapter from Harry Potter and the Sorcerer's Stone, then extracted a set of 195 features for each word (ranging from semantic, syntactic properties to visual and discourse-level features) to train a comprehensive generative model that would then predict the time series of the fMRI activity observed when the participants read that passage.
sent15: Leave-2-out pair-matching accuracy is used for evaluation.
sent16: Huth et al. (2016), in contrast, use fMRI recordings of participants listening to spoken narrative stories, representing each word in the corpus as a 985-dimensional vector encoding semantic information driven by co-occurrence statistics.
sent17: They train per-voxel linear regression models and evaluate their predicted per-word fMRI images by their per-voxel Pearson correlation with the real fMRI images, showing that 3-4 dimensions explained a significant amount of variance in the FMRI data.
sent18: Wehbe et al. (2014b) are among the first to use neural language models, using recurrent models to compute contextualized embeddings, hidden state vectors of previous words, and word probabilities.
sent19: of participants reading Harry Potter, obtained in a follow-up study to Wehbe et al. (2014a).
sent20: From the three sets of representations, they then train linear regression models to predict the MEG vectors corresponding to each word, and the regression models are then evaluated by computing pair-matching accuracy.
sent21: Similarly, Søgaard (2016) evaluates static word embeddings on the data from Wehbe et al. (2014a), learning linear transformation from word embeddings into an fMRI vector space.
sent22: The predictions are evaluated through mean squared error (MSE).
sent23: Jain and Huth (2018) evaluate recurrent language models against the fMRI dataset from Huth et al. (2016).
sent24: Their findings show that contextual language model representations align significantly better (to brain response) compared to static word embedding models.
sent25: Their evaluation metric is the total sum of explained variance 1
sent26: Following this, Schwartz et al. (2019) use attention-based transformer language models for brain mapping.
sent27: They finetune BERT (Devlin et al., 2019)to predict neural response measurements from the Harry Potter dataset, showing that the fine-tuned models have representations that encode more brain-activity-relevant language information than the non-finetuned models.
sent28: They rely on pair-matching accuracy as their performance metric.
sent29: As in Søgaard (2016), Zhang et al. (2020) map static word embeddings into the vector space of the neural response measurements (fMRI).
sent30: They introduce a new dataset of such measurements from subjects listening to natural stories.
sent31: They rely on explained variance as their performance metric.
sent32: Toneva and Wehbe (2019) evaluate word and sequence embeddings from 4 recurrent and attention-based transformer language models, using the Harry Potter fMRI dataset.
sent33: They evaluate models across layers, context lengths, and attention types, using pairwise matching accuracy as their performance metric.
sent34: In a later study, Toneva et al. (2022a) induce compositional semantic representations of ""supra-word meaning"" which they then use to predict neural responses across regions of interest, evaluating their models using Pearson correlation.
sent35: Also using the Harry Potter data,  evaluate five models, one static and four contextualized, relying on a variant of representational similarity analysis (Kriegeskorte et al., 2008).
sent36: The results suggest that models provide representations of local contexts that are well-aligned to neural measurements.
sent37: However, as information from further away context is integrated by the models, representations become less aligned to neural measurements.
sent38: In a large-scale study, Schrimpf et al. (2021) examine the relationships between 43 diverse stateof-the-art neural network models (including embedding models, recurrent models, and transformers) across three datasets (two fMRI, one electrocardiography).
sent39: They rely on a metric they term Brain Score which involves normalising the Pearson correlation by a noise ceiling.
sent40: Their results show that transformer-based models perform better than recurrent or static models, and larger models perform better than smaller ones.
sent41: Similarly, in , the Schoffelen et al. (2019) fMRI and MEG datasets are used to compare a variety of transformer architectures.
sent42: They study how architectural details, training settings, and the linguistic performance of these models independently account for the generation of brain correspondent representations.
sent43: The results suggest that the better language models are at predicting words from context, the better their activations linearly map onto those of the brain.
sent44: Antonello et al. (2021) evaluate three static and five attention-based transformer models, in combination with four fine-tuning tasks and two machine translation models.
sent45: They train linear regression models to evaluate their word-level representations against a new fMRI dataset from participants listening to podcast stories.
sent46: They find a low-dimensional structure in language representations that can predict brain responses.
sent47: In a similar setting, Antonello and Huth (2022) examine why some features fit the brain data better arguing that the reason is that they capture various linguistic phenomena.
sent48: Reddy and Wehbe (2021) evaluate syntactic features in conjunction with BERT representations, finding that syntax explains additional variance in brain activity in various parts of the language system, even while controlling for complexity metrics that capture processing load.
sent49: In a series of studies Caucheteux et al. (2021Caucheteux et al. ( , 2022b investigate GPT2's activations in predicting brain signals using the Nastase et al. (2021) dataset.
sent50: Their evaluation metric is Brain Score (Schrimpf et al., 2018).
sent51: To determine which factors affect the brain encoding Pasquiou et al. (2022) examine the impact of test loss, training corpus, model architecture, and fine-tuning in various models using the Li et al. (2022) dataset.
sent52: They evaluate model performance using Pearson Correlation.
sent53: Oota et al. (2022a) study the impact of context size in language models on how they align with neural response measurements.
sent54: They use the Nastase et al. (2021) dataset and evaluate recurrent and attention-based transformer architectures.
sent55: In a later study, Oota et al. (2022b) use the Pereira et al. (2018) dataset and evaluate BERTbase models (fine-tuned for various NLP tasks).
sent56: They showed that neural response predictions from ridge regression with BERT-base models fine-tuned for coreference resolution, NER, and shallow syntactic parsing explained more variance for Pereira et al. (2018) response measurements.
sent57: On the other hand, tasks such as paraphrase generation, summarization, and natural language inference led to better encoding performance for the Nastase et al. (2021) data (audio).
sent58: Using the same dataset, in Oota et al. (2022c) it is shown that the presence of surface, syntactic, and semantic linguistic information is crucial for the alignment across all layers of the language model.
sent59: They use pairwise matching accuracy and/or Pearson correlation as their performance metrics in these studies.
sent60: Aw and Toneva (2023) extract feature representations from four attention-based transformer models.
sent61: They evaluate the impact of fine-tuning on the BookSum dataset (Kryscinski et al., 2021).
sent62: All models are used to predict brain activity on the Harry Potter data.
sent63: Pairwise matching accuracy and Pearson correlation are their performance metrics.
sent64: Merlin and Toneva (2022) focus more narrowly on variants of GPT-2, showing that improvements in alignment with brain recordings are probably not because of the next-word prediction task or wordlevel semantics, but due to multi-word semantics.
sent65: Their reported metric is Pearson correlation.
sent66: Intermediate summary The above studies differ in many respects.
sent67: Several metrics are used: pairwise-matching accuracy, 2 Pearson correlation (or Brain Score), mean squared error, and representational similarity analysis.
sent68: Even studies that report the same performance metrics are not directly comparable because they often report on results on different datasets and use slightly different protocols, e.g., Murphy et al. (2012) and Wehbe et al. (2014b).
sent69: Beinborn et al. (2023) compare various encoding experiments and receive very diverse results for different evaluation metrics.
sent70: The diversity of metrics and data renders a direct comparison difficult.
sent71: To remedy this, we consider how the metrics compare in §6.","Question: What are the different types of datasets used to map language models to brain activity, and how do they vary?

Supporting sentence: sent1, sent2, sent3, sent4, sent5","What are the different types of datasets used to map language models to brain activity, and how do they vary?","sent1, sent2, sent3, sent4, sent5",7,"To infer a mapping between language models and brains, researchers rely on datasets in which brain activity is recorded in response to linguistic stimuli.

In some studies, the stimuli are single words (Mitchell et al., 2008;Anderson et al., 2017) or sentences displayed on a screen (Pereira et al., 2018).

In others, participants read longer stories (Wehbe et al., 2014a;Bhattasali et al., 2020;Nastase et al., 2021) or listened to speech or podcasts (Huth et al., 2016;Antonello et al., 2021).

Table 1 lists publicly available datasets that have been used in the context of mapping language models to and from recordings of brain response.

Differences between the datasets -the number of participants, the equipment, the experimental setup, pre-processing steps, and probabilistic corrections -should lead us to expect some variation in what researchers have concluded (Hollenstein et al., 2020).",invalid,,"Question:

What are the different types of datasets used to map language models to brain activity, and how do they vary?

Answer:

nan"
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Evaluation,4,"Metrics Table 4 shows widely used automatic evaluation metrics for the text-to-SQL task. Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold) SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets. Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time. Other splitting methods also exist to help different research topics (Shaw et al., 2021;.","sent1: Metrics Table 4 shows widely used automatic evaluation metrics for the text-to-SQL task.
sent2: Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold)
sent3: SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets.
sent4: Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time.
sent5: Other splitting methods also exist to help different research topics (Shaw et al., 2021;.","Question: What are the different methods used to split datasets for evaluating text-to-SQL models?

Supporting sentence: sent3, sent4, sent5",What are the different methods used to split datasets for evaluating text-to-SQL models?,"sent3, sent4, sent5",3,"SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets.

Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time.

Other splitting methods also exist to help different research topics (Shaw et al., 2021;.",skip,,"Question:

What are the different methods used to split datasets for evaluating text-to-SQL models?

Answer:

nan"
236460206,Towards Argument Mining for Social Good: A Survey,https://www.semanticscholar.org/paper/dcb0b23685c9c116d8d53fe47e5157753659d3bd,Scaling Up Argument Mining,11,"In social media While overtly argumentative text, like those described above, represents the natural domain of application for AM, social media constitute a powerful source of large amounts of data (billions of words) despite facing particular challenges in AM.

Social media plays an increasingly significant role in modern political and social discourse, yet resources built for conducting AM on this type of data structure remain limited for clear reasons. These platforms inherently collect and spread a wide range of content, including personal opinions, facts, fake news, and additional information of interest to users. Distinguishing between personal opinion, fact, and fake news, for example, is not always straightforward, as seen in recent work on fake news detection (Kotonya and Toni, 2020). Further, the language used on such platforms is infamously chaotic and often non-standard in comparison to the language use in more structured environments, like parliamentary debates. The combination of these aspects introduces the unique challenge of implementing AM to particularly heterogeneous, poorly annotated data.

Recent work has aimed to tackle such challenges in social media. Dusmanu et al. (2017) apply a supervised classification approach to identify arguments on Twitter, focusing on the tasks of facts recognition and source identification. They study the feasibility of the approaches proposed to address these tasks on a set of tweets related to the Grexit and Brexitnews topics. Habernal and Gurevych (2017) provide an extensive analysis of the steps and the modeling strategies necessary to analyze social media data (e.g. forum posts) in terms of their argumentative structure, while Simpson and Gurevych (2018) tackle the issue of the scalability of AM algorithms.

Despite the rising attention and developments to AM in social media, one of the major challenges currently facing the field is the lack of consensus on how exactly to analyse argumentative user-generated texts such as online comments (Bauwelinck and Lefever, 2020). On the one hand, the amount of annotations available for the scale of this heterogeneous data remains limited. Recent work by Schaefer and Stede (2020), among others, have aimed to construct large Twitter corpora annotated for argument components, including argumentative spans within tweets. On the other hand, annotation guidelines are not necessarily clear, and the theoretical motivations underlying the proposed guidelines used to generate labelled corpora rarely include motivation for the use of a particular theoretical basis. Bauwelinck and Lefever (2020) introduce a pilot study and aim to provide a clear justification of the theories and definitions underlying the design of a set of guidelines.

The linguistic, structural, and logistic complexity and ""openness"" of such platforms clearly present unique challenges. However, being able to work well with argumentative text from social media and discussion forums is essential considering the continuously growing impact on the political and social framework of modern times.

Multilingual argument mining Multilinguality is an important area of research in NLP that has gained more attention recently because of the crosslingual transfer potentials of Pre-trained Language Models (Devlin et al., 2019;Conneau et al., 2020) and because of the potentials for a societal impact at a global scale. The latter is particularly important when considering AM for Social Good since language should not be a barrier for participation if the goal is to allow any productive contribution.

Various recent studies have investigated multilinguality for AM. Eger et al. (2019) discuss a series of experiments on using machine translation and annotation projection for AM, specifically argument components extraction and classification in German, English, and Chinese. A similar approach to build training data in other languages using machine translation is done in Toledo-Ronen et al. (2020), which use a pre-trained multilingual BERT (Devlin et al., 2019) for modeling. This approach is shown to perform well for classifying argument stance and detecting evidence, but not for predicting argument quality scores. Multilingual stance detection in political social media text (Vamvas and Sennrich, 2020) is also investigated in Lai et al. (2020) using stylistic, structural, affective and contextual features from text and analysing the scenarios in which each of these features is effective.

Other work has also dealt with building non-English datasets (Lindahl, 2020;Bauwelinck and Lefever, 2020;Schaefer and Stede, 2020;Zotova et al., 2020), but there still seems to be a focus on Indo-European languages (and sometimes Chinese) with a lack of datasets and analysis extending to other languages. This is a general issue in NLP research that extends to performance bias in favor of standard dialects for example in English (Blodgett et al., 2016) and bias that could target certain user groups instead of protecting them as was shown for Hate Speech Detection (Davidson et al., 2019). This is an important limitation to address in AM as well for more inclusivity and towards a more positive societal impact.","sent1: In social media While overtly argumentative text, like those described above, represents the natural domain of application for AM, social media constitute a powerful source of large amounts of data (billions of words) despite facing particular challenges in AM.
sent2: Social media plays an increasingly significant role in modern political and social discourse, yet resources built for conducting AM on this type of data structure remain limited for clear reasons.
sent3: These platforms inherently collect and spread a wide range of content, including personal opinions, facts, fake news, and additional information of interest to users.
sent4: Distinguishing between personal opinion, fact, and fake news, for example, is not always straightforward, as seen in recent work on fake news detection (Kotonya and Toni, 2020).
sent5: Further, the language used on such platforms is infamously chaotic and often non-standard in comparison to the language use in more structured environments, like parliamentary debates.
sent6: The combination of these aspects introduces the unique challenge of implementing AM to particularly heterogeneous, poorly annotated data.
sent7: Recent work has aimed to tackle such challenges in social media.
sent8: Dusmanu et al. (2017) apply a supervised classification approach to identify arguments on Twitter, focusing on the tasks of facts recognition and source identification.
sent9: They study the feasibility of the approaches proposed to address these tasks on a set of tweets related to the Grexit and Brexitnews topics.
sent10: Habernal and Gurevych (2017) provide an extensive analysis of the steps and the modeling strategies necessary to analyze social media data (e.g. forum posts) in terms of their argumentative structure, while Simpson and Gurevych (2018) tackle the issue of the scalability of AM algorithms.
sent11: Despite the rising attention and developments to AM in social media, one of the major challenges currently facing the field is the lack of consensus on how exactly to analyse argumentative user-generated texts such as online comments (Bauwelinck and Lefever, 2020).
sent12: On the one hand, the amount of annotations available for the scale of this heterogeneous data remains limited.
sent13: Recent work by Schaefer and Stede (2020), among others, have aimed to construct large Twitter corpora annotated for argument components, including argumentative spans within tweets.
sent14: On the other hand, annotation guidelines are not necessarily clear, and the theoretical motivations underlying the proposed guidelines used to generate labelled corpora rarely include motivation for the use of a particular theoretical basis.
sent15: Bauwelinck and Lefever (2020) introduce a pilot study and aim to provide a clear justification of the theories and definitions underlying the design of a set of guidelines.
sent16: The linguistic, structural, and logistic complexity and ""openness"" of such platforms clearly present unique challenges.
sent17: However, being able to work well with argumentative text from social media and discussion forums is essential considering the continuously growing impact on the political and social framework of modern times.
sent18: Multilingual argument mining Multilinguality is an important area of research in NLP that has gained more attention recently because of the crosslingual transfer potentials of Pre-trained Language Models (Devlin et al., 2019;Conneau et al., 2020) and because of the potentials for a societal impact at a global scale.
sent19: The latter is particularly important when considering AM for Social Good since language should not be a barrier for participation if the goal is to allow any productive contribution.
sent20: Various recent studies have investigated multilinguality for AM.
sent21: Eger et al. (2019) discuss a series of experiments on using machine translation and annotation projection for AM, specifically argument components extraction and classification in German, English, and Chinese.
sent22: A similar approach to build training data in other languages using machine translation is done in Toledo-Ronen et al. (2020), which use a pre-trained multilingual BERT (Devlin et al., 2019) for modeling.
sent23: This approach is shown to perform well for classifying argument stance and detecting evidence, but not for predicting argument quality scores.
sent24: Multilingual stance detection in political social media text (Vamvas and Sennrich, 2020) is also investigated in Lai et al. (2020) using stylistic, structural, affective and contextual features from text and analysing the scenarios in which each of these features is effective.
sent25: Other work has also dealt with building non-English datasets (Lindahl, 2020;Bauwelinck and Lefever, 2020;Schaefer and Stede, 2020;Zotova et al., 2020), but there still seems to be a focus on Indo-European languages (and sometimes Chinese) with a lack of datasets and analysis extending to other languages.
sent26: This is a general issue in NLP research that extends to performance bias in favor of standard dialects for example in English (Blodgett et al., 2016) and bias that could target certain user groups instead of protecting them as was shown for Hate Speech Detection (Davidson et al., 2019).
sent27: This is an important limitation to address in AM as well for more inclusivity and towards a more positive societal impact.","Question: What are the main challenges and recent advancements in applying Argument Mining (AM) to social media data?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17",What are the main challenges and recent advancements in applying Argument Mining (AM) to social media data?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17",6,"In social media While overtly argumentative text, like those described above, represents the natural domain of application for AM, social media constitute a powerful source of large amounts of data (billions of words) despite facing particular challenges in AM.

Social media plays an increasingly significant role in modern political and social discourse, yet resources built for conducting AM on this type of data structure remain limited for clear reasons.

These platforms inherently collect and spread a wide range of content, including personal opinions, facts, fake news, and additional information of interest to users.

Distinguishing between personal opinion, fact, and fake news, for example, is not always straightforward, as seen in recent work on fake news detection (Kotonya and Toni, 2020).

Further, the language used on such platforms is infamously chaotic and often non-standard in comparison to the language use in more structured environments, like parliamentary debates.

The combination of these aspects introduces the unique challenge of implementing AM to particularly heterogeneous, poorly annotated data.

Recent work has aimed to tackle such challenges in social media.

Dusmanu et al. (2017) apply a supervised classification approach to identify arguments on Twitter, focusing on the tasks of facts recognition and source identification.

They study the feasibility of the approaches proposed to address these tasks on a set of tweets related to the Grexit and Brexitnews topics.

Habernal and Gurevych (2017) provide an extensive analysis of the steps and the modeling strategies necessary to analyze social media data (e.g. forum posts) in terms of their argumentative structure, while Simpson and Gurevych (2018) tackle the issue of the scalability of AM algorithms.

Despite the rising attention and developments to AM in social media, one of the major challenges currently facing the field is the lack of consensus on how exactly to analyse argumentative user-generated texts such as online comments (Bauwelinck and Lefever, 2020).

On the one hand, the amount of annotations available for the scale of this heterogeneous data remains limited.

Recent work by Schaefer and Stede (2020), among others, have aimed to construct large Twitter corpora annotated for argument components, including argumentative spans within tweets.

On the other hand, annotation guidelines are not necessarily clear, and the theoretical motivations underlying the proposed guidelines used to generate labelled corpora rarely include motivation for the use of a particular theoretical basis.

Bauwelinck and Lefever (2020) introduce a pilot study and aim to provide a clear justification of the theories and definitions underlying the design of a set of guidelines.

The linguistic, structural, and logistic complexity and ""openness"" of such platforms clearly present unique challenges.

However, being able to work well with argumentative text from social media and discussion forums is essential considering the continuously growing impact on the political and social framework of modern times.",invalid,,"Question:

What are the main challenges and recent advancements in applying Argument Mining (AM) to social media data?

Answer:

nan"
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Inductive-prior-based Approaches,9,"Another thread is to introduce inductive bias (i.e., to regularize the hypothesis space) to force the model to discard some spurious features. This is closely connected to the human-prior-based identification approaches in Section 4.1 as those human-priors can often be used to re-formulate the training objective with additional regularizers. To achieve this goal, one usually needs to first construct a side component to inform the main model about the misaligned features, and then to regularize the main model according to the side component. The construction of this side component usually relies on prior knowledge of what the misaligned features are. Then, methods can be built accordingly to counter the features such as label-associated keywords (He et al., 2019), label-associated text fragments (Mahabadi et al., 2020), and general easy-to-learn patterns of data (Nam et al., 2020). Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases. More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model. Furthermore, additional regularizers have been introduced for robust fine-tuning over pre-trained models, e.g., mutual-information-based regularizers (Wang et al., 2021a) and smoothness-inducing adversarial regularization (Jiang et al., 2020).

In a broader scope, given that one of the main challenges of domain adaptation is to counter the model's tendency in learning domain-specific spurious features (Ganin et al., 2016), some methods contributing to domain adaption may have also progressed along the line of our interest, e.g., domain adversarial neural network (Ganin et al., 2016). This line of work also inspires a family of methods forcing the model to learn auxiliary-annotationinvariant representations with a side component (Ghifary et al., 2016;Wang et al., 2017;Rozantsev et al., 2018;Motiian et al., 2017;Li et al., 2018;Vernikos et al., 2020).

Despite the diverse concrete ideas introduced, the above is mainly training for small empirical loss across different domains or distributions in addition to forcing the model to be invariant to domain-specific spurious features. As an extension along this direction, invariant risk minimization (IRM) (Arjovsky et al., 2019) introduces the idea of invariant predictors across multiple environments, which was later followed and discussed by a variety of extensions (Choe et al., 2020;Ahmed et al., 2020;Rosenfeld et al., 2021). More recently, Dranker et al. (2021) applied IRM in natural language inference and found that a more naturalistic characterization of the problem setup is needed.","sent1: Another thread is to introduce inductive bias (i.e., to regularize the hypothesis space) to force the model to discard some spurious features.
sent2: This is closely connected to the human-prior-based identification approaches in Section 4.1 as those human-priors can often be used to re-formulate the training objective with additional regularizers.
sent3: To achieve this goal, one usually needs to first construct a side component to inform the main model about the misaligned features, and then to regularize the main model according to the side component.
sent4: The construction of this side component usually relies on prior knowledge of what the misaligned features are.
sent5: Then, methods can be built accordingly to counter the features such as label-associated keywords (He et al., 2019), label-associated text fragments (Mahabadi et al., 2020), and general easy-to-learn patterns of data (Nam et al., 2020).
sent6: Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases.
sent7: More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model.
sent8: Furthermore, additional regularizers have been introduced for robust fine-tuning over pre-trained models, e.g., mutual-information-based regularizers (Wang et al., 2021a) and smoothness-inducing adversarial regularization (Jiang et al., 2020).
sent9: In a broader scope, given that one of the main challenges of domain adaptation is to counter the model's tendency in learning domain-specific spurious features (Ganin et al., 2016), some methods contributing to domain adaption may have also progressed along the line of our interest, e.g., domain adversarial neural network (Ganin et al., 2016).
sent10: This line of work also inspires a family of methods forcing the model to learn auxiliary-annotationinvariant representations with a side component (Ghifary et al., 2016;Wang et al., 2017;Rozantsev et al., 2018;Motiian et al., 2017;Li et al., 2018;Vernikos et al., 2020).
sent11: Despite the diverse concrete ideas introduced, the above is mainly training for small empirical loss across different domains or distributions in addition to forcing the model to be invariant to domain-specific spurious features.
sent12: As an extension along this direction, invariant risk minimization (IRM) (Arjovsky et al., 2019) introduces the idea of invariant predictors across multiple environments, which was later followed and discussed by a variety of extensions (Choe et al., 2020;Ahmed et al., 2020;Rosenfeld et al., 2021).
sent13: More recently, Dranker et al. (2021) applied IRM in natural language inference and found that a more naturalistic characterization of the problem setup is needed.","Question: How do inductive-prior-based approaches enhance robustness in NLP models by addressing spurious features?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",How do inductive-prior-based approaches enhance robustness in NLP models by addressing spurious features?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",4,"Another thread is to introduce inductive bias (i.e., to regularize the hypothesis space) to force the model to discard some spurious features.

This is closely connected to the human-prior-based identification approaches in Section 4.1 as those human-priors can often be used to re-formulate the training objective with additional regularizers.

To achieve this goal, one usually needs to first construct a side component to inform the main model about the misaligned features, and then to regularize the main model according to the side component.

The construction of this side component usually relies on prior knowledge of what the misaligned features are.

Then, methods can be built accordingly to counter the features such as label-associated keywords (He et al., 2019), label-associated text fragments (Mahabadi et al., 2020), and general easy-to-learn patterns of data (Nam et al., 2020).

Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases.

More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model.

Furthermore, additional regularizers have been introduced for robust fine-tuning over pre-trained models, e.g., mutual-information-based regularizers (Wang et al., 2021a) and smoothness-inducing adversarial regularization (Jiang et al., 2020).

In a broader scope, given that one of the main challenges of domain adaptation is to counter the model's tendency in learning domain-specific spurious features (Ganin et al., 2016), some methods contributing to domain adaption may have also progressed along the line of our interest, e.g., domain adversarial neural network (Ganin et al., 2016).

This line of work also inspires a family of methods forcing the model to learn auxiliary-annotationinvariant representations with a side component (Ghifary et al., 2016;Wang et al., 2017;Rozantsev et al., 2018;Motiian et al., 2017;Li et al., 2018;Vernikos et al., 2020).

Despite the diverse concrete ideas introduced, the above is mainly training for small empirical loss across different domains or distributions in addition to forcing the model to be invariant to domain-specific spurious features.

As an extension along this direction, invariant risk minimization (IRM) (Arjovsky et al., 2019) introduces the idea of invariant predictors across multiple environments, which was later followed and discussed by a variety of extensions (Choe et al., 2020;Ahmed et al., 2020;Rosenfeld et al., 2021).

More recently, Dranker et al. (2021) applied IRM in natural language inference and found that a more naturalistic characterization of the problem setup is needed.",skip,,"Question:

How do inductive-prior-based approaches enhance robustness in NLP models by addressing spurious features?

Answer:

nan"
236460206,Towards Argument Mining for Social Good: A Survey,https://www.semanticscholar.org/paper/dcb0b23685c9c116d8d53fe47e5157753659d3bd,NLP-Supported Moderation: desiderata and challenges,24,"NLP-supported moderation represents a clear solution to the bottleneck problem affecting facilitation in digital democracy. Automatic tools can take over some of the tasks that human moderators typically perform when monitoring online discussions. For example, in Social Sciences, one of the most discussed issues in crowd-scale deliberation is ""flaming"", i.e., aggressive and disrespectful communicative behavior (Lampe et al., 2014). Here, moderators could benefit from hate-speech and trolling detection methods in NLP. NLP methods to support deliberative decisionmaking have already been applied for the realtime visualisation of argument maps (El-Assady et al., 2017). Deliberation in real-time applications has the clear potential of structured arguments extraction from the news media (Daxenberger and Gurevych, 2020), the identification of the argumentative structure in deliberative contexts (Liebeck et al., 2016), as well as automatic argument summarization (Lawrence et al., 2017).

Beyond the real-time support to users (and moderators) provided by the methods described above, further tasks specific to AM which are part of the role of a human or (semi-)automoated moderator include: detecting fallacies (Habernal et al., 2018b), reasoning and common-sense (Habernal et al., 2018a), relevance estimation (Potthast et al., 2019). In addition, detecting and highlighting parts of an argument that are a good target for attacks (Jo et al., 2020a) can help the moderator to motivate more participation and argumentation from opposing sides of a discussion. Another important source is the detection of implicitly asserted prepositions (Jo et al., 2020b) which has a counterpart in the framing detection task (Card et al., 2015;Akyürek et al., 2020), as framing is a manipulation strategy which highlights specific aspects of an issue under discussion to promote certain interpretations.

Further NLP tasks which can play a crucial role in ensuring a healthy interaction are, for example, Hate Speech Detection (Warner and Hirschberg, 2012;Waseem and Hovy, 2016;Schmidt and Wiegand, 2017), Fact Checking (Vlachos and Riedel, 2014;Kotonya and Toni, 2020), Facts recognition and source identification (Dusmanu et al., 2017).

How to represent discourse? Thus far, we have discussed the main ingredients of a rich NLP-informed approach to deliberative discourse. These components, together with the deliberationaugmented definition of AQ sketched in section 3 are the features that the NLP moderator takes as an input. One question remains open: How to represent the argumentative discourse within a contribution (e.g. a forum post) and across contributions (e.g. an entire online deliberation campaign)? We can approach also this question from an interdisciplinary perspective. Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017). A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim. Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013). Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020). Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim. This type of representation is perfectly compatible with a graph-based approach on argument representation which has already been established as to be preferred to a tree-structure representation both empirically (Niculae et al., 2017) and theoretically (Afantenos and Asher, 2014).

Moderation can thus be modeled as optimization of specific quantitative properties of the discourse network: participant inclusion, can be enforced by ensuring that the contributions of peripheric actor nodes receive the deserved salience; argument mapping and summarization can be modeled by identifying ""hot"" sub-graphs in the network; the impact of a contribution (the grounded notion of AQ we have been advocating thus far) can be quantified as the perturbation introduced in the network, with its long term effects on convergence or polarization.

Who moderates the (NLP) moderators? The problem of biased moderation obviously relates to the issue of bias in NLP (Blodgett et al., 2020;Caliskan et al., 2017;Bolukbasi et al., 2016;Spliethöver and Wachsmuth, 2020) and it has a clear implication in the application of NLP methods to moderation. For example, we would not want our NLP models to infer a negative impact on AQ from cues which just reveal that the user belongs to certain groups. This is a real risk when quality is equated to ""success"", in turn quantified in terms of likes, replies, retweets. The public of a forum may be sensitive to such cues, but the moderator should be unbiased with respect to them. Another source of bias is the degree of literacy of a contribution: while users who express themselves poorly are likely to be less popular with the forum public, their contributions may still be a very good move in the ""cooperation challenge"" -one that moderators (NLP or humans, online or in-person) have to ensure will not be left unexploited.","sent1: NLP-supported moderation represents a clear solution to the bottleneck problem affecting facilitation in digital democracy.
sent2: Automatic tools can take over some of the tasks that human moderators typically perform when monitoring online discussions.
sent3: For example, in Social Sciences, one of the most discussed issues in crowd-scale deliberation is ""flaming"", i.e., aggressive and disrespectful communicative behavior (Lampe et al., 2014).
sent4: Here, moderators could benefit from hate-speech and trolling detection methods in NLP.
sent5: NLP methods to support deliberative decisionmaking have already been applied for the realtime visualisation of argument maps (El-Assady et al., 2017).
sent6: Deliberation in real-time applications has the clear potential of structured arguments extraction from the news media (Daxenberger and Gurevych, 2020), the identification of the argumentative structure in deliberative contexts (Liebeck et al., 2016), as well as automatic argument summarization (Lawrence et al., 2017).
sent7: Beyond the real-time support to users (and moderators) provided by the methods described above, further tasks specific to AM which are part of the role of a human or (semi-)automoated moderator include: detecting fallacies (Habernal et al., 2018b), reasoning and common-sense (Habernal et al., 2018a), relevance estimation (Potthast et al., 2019).
sent8: In addition, detecting and highlighting parts of an argument that are a good target for attacks (Jo et al., 2020a) can help the moderator to motivate more participation and argumentation from opposing sides of a discussion.
sent9: Another important source is the detection of implicitly asserted prepositions (Jo et al., 2020b) which has a counterpart in the framing detection task (Card et al., 2015;Akyürek et al., 2020), as framing is a manipulation strategy which highlights specific aspects of an issue under discussion to promote certain interpretations.
sent10: Further NLP tasks which can play a crucial role in ensuring a healthy interaction are, for example, Hate Speech Detection (Warner and Hirschberg, 2012;Waseem and Hovy, 2016;Schmidt and Wiegand, 2017), Fact Checking (Vlachos and Riedel, 2014;Kotonya and Toni, 2020), Facts recognition and source identification (Dusmanu et al., 2017).How to represent discourse?
sent11: Thus far, we have discussed the main ingredients of a rich NLP-informed approach to deliberative discourse.
sent12: These components, together with the deliberationaugmented definition of AQ sketched in section 3 are the features that the NLP moderator takes as an input.
sent13: One question remains open: How to represent the argumentative discourse within a contribution (e.g. a forum post) and across contributions (e.g. an entire online deliberation campaign)?
sent14: We can approach also this question from an interdisciplinary perspective.
sent15: Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017).
sent16: A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim.
sent17: Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013).
sent18: Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020).
sent19: Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim.
sent20: This type of representation is perfectly compatible with a graph-based approach on argument representation which has already been established as to be preferred to a tree-structure representation both empirically (Niculae et al., 2017) and theoretically (Afantenos and Asher, 2014).
sent21: Moderation can thus be modeled as optimization of specific quantitative properties of the discourse network: participant inclusion, can be enforced by ensuring that the contributions of peripheric actor nodes receive the deserved salience; argument mapping and summarization can be modeled by identifying ""hot"" sub-graphs in the network; the impact of a contribution (the grounded notion of AQ we have been advocating thus far) can be quantified as the perturbation introduced in the network, with its long term effects on convergence or polarization.
sent22: Who moderates the (NLP) moderators?
sent23: The problem of biased moderation obviously relates to the issue of bias in NLP (Blodgett et al., 2020;Caliskan et al., 2017;Bolukbasi et al., 2016;Spliethöver and Wachsmuth, 2020) and it has a clear implication in the application of NLP methods to moderation.
sent24: For example, we would not want our NLP models to infer a negative impact on AQ from cues which just reveal that the user belongs to certain groups.
sent25: This is a real risk when quality is equated to ""success"", in turn quantified in terms of likes, replies, retweets.
sent26: The public of a forum may be sensitive to such cues, but the moderator should be unbiased with respect to them.
sent27: Another source of bias is the degree of literacy of a contribution: while users who express themselves poorly are likely to be less popular with the forum public, their contributions may still be a very good move in the ""cooperation challenge"" -one that moderators (NLP or humans, online or in-person) have to ensure will not be left unexploited.","Question: What are the key NLP tasks that support moderation in digital democracy, and how do they contribute to the process?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10","What are the key NLP tasks that support moderation in digital democracy, and how do they contribute to the process?","sent1, sent2, sent3, sent4, sent5, sent6, sent7, sent8, sent9, sent10",7,"NLP-supported moderation represents a clear solution to the bottleneck problem affecting facilitation in digital democracy.

Automatic tools can take over some of the tasks that human moderators typically perform when monitoring online discussions.

For example, in Social Sciences, one of the most discussed issues in crowd-scale deliberation is ""flaming"", i.e., aggressive and disrespectful communicative behavior (Lampe et al., 2014).

Here, moderators could benefit from hate-speech and trolling detection methods in NLP.

NLP methods to support deliberative decisionmaking have already been applied for the realtime visualisation of argument maps (El-Assady et al., 2017).

Deliberation in real-time applications has the clear potential of structured arguments extraction from the news media (Daxenberger and Gurevych, 2020), the identification of the argumentative structure in deliberative contexts (Liebeck et al., 2016), as well as automatic argument summarization (Lawrence et al., 2017).

Beyond the real-time support to users (and moderators) provided by the methods described above, further tasks specific to AM which are part of the role of a human or (semi-)automoated moderator include: detecting fallacies (Habernal et al., 2018b), reasoning and common-sense (Habernal et al., 2018a), relevance estimation (Potthast et al., 2019).

In addition, detecting and highlighting parts of an argument that are a good target for attacks (Jo et al., 2020a) can help the moderator to motivate more participation and argumentation from opposing sides of a discussion.

Another important source is the detection of implicitly asserted prepositions (Jo et al., 2020b) which has a counterpart in the framing detection task (Card et al., 2015;Akyürek et al., 2020), as framing is a manipulation strategy which highlights specific aspects of an issue under discussion to promote certain interpretations.

Further NLP tasks which can play a crucial role in ensuring a healthy interaction are, for example, Hate Speech Detection (Warner and Hirschberg, 2012;Waseem and Hovy, 2016;Schmidt and Wiegand, 2017), Fact Checking (Vlachos and Riedel, 2014;Kotonya and Toni, 2020), Facts recognition and source identification (Dusmanu et al., 2017).How to represent discourse?",invalid,,"Question:

What are the key NLP tasks that support moderation in digital democracy, and how do they contribute to the process?

Answer:

nan"
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,One-Stage Supervised Keyphrase Extraction Models,7,"A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates. Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task. Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results. Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","sent1: A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.
sent2: Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task.
sent3: Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results.
sent4: Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","Question: How do recent one-stage supervised keyphrase extraction models address the limitations of two-stage approaches?

Supporting sentence: sent1, sent2, sent3, sent4",How do recent one-stage supervised keyphrase extraction models address the limitations of two-stage approaches?,"sent1, sent2, sent3, sent4",2,"A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.

Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task.

Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results.

Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).",skip,,"Question:

How do recent one-stage supervised keyphrase extraction models address the limitations of two-stage approaches?

Answer:

nan"
252762171,"The Lifecycle of ""Facts"": A Survey of Social Bias in Knowledge Graphs",https://www.semanticscholar.org/paper/8d74c7cde3ec806546c09274a968b87620442396,Ontologies: Manual Creation of Rules,4,"Ontologies determine rules regarding allowed types of entities and relations or their usage. They are often hand-made and a source of bias (Janowicz et al., 2018) due to the influence of opinions, motivations, and personal choices (Keet, 2021): Factors like scientific opinions (e.g., historical ideas about race), socio-culture (e.g., how many people a person can be married to), or political and religious views (e.g., classifying a person of type X as a terrorist or a protestor) can proximately lead to an encoding of social bias. Also structural constraints like the ontologies' granularity levels can induce bias (Keet, 2021). Furthermore, issues can arise from the types of information used to characterize a person entity. Whether one attributes the person with their skin color or not could theoretically determine the emergence of racist bias in a downstream application (Paparidis and Kotis, 2021). Geller and Kollapally (2021) give a practical example for detection and alleviation of ontology bias in a real-world scenario. The authors discovered that ontological gaps in the medical context lead to an under-reporting of racespecific incidents. They were able to suggest countermeasures based on a structured analysis of real incidents and external terminological resources.","sent1: Ontologies determine rules regarding allowed types of entities and relations or their usage.
sent2: They are often hand-made and a source of bias (Janowicz et al., 2018) due to the influence of opinions, motivations, and personal choices (Keet, 2021): Factors like scientific opinions (e.g., historical ideas about race), socio-culture (e.g., how many people a person can be married to), or political and religious views (e.g., classifying a person of type X as a terrorist or a protestor) can proximately lead to an encoding of social bias.
sent3: Also structural constraints like the ontologies' granularity levels can induce bias (Keet, 2021).
sent4: Furthermore, issues can arise from the types of information used to characterize a person entity.
sent5: Whether one attributes the person with their skin color or not could theoretically determine the emergence of racist bias in a downstream application (Paparidis and Kotis, 2021).
sent6: Geller and Kollapally (2021) give a practical example for detection and alleviation of ontology bias in a real-world scenario.
sent7: The authors discovered that ontological gaps in the medical context lead to an under-reporting of racespecific incidents.
sent8: They were able to suggest countermeasures based on a structured analysis of real incidents and external terminological resources.","Question: What factors contribute to the introduction of bias in manually created ontologies?

Supporting sentence: sent2, sent3, sent4, sent5",What factors contribute to the introduction of bias in manually created ontologies?,"sent2, sent3, sent4, sent5",6,"They are often hand-made and a source of bias (Janowicz et al., 2018) due to the influence of opinions, motivations, and personal choices (Keet, 2021): Factors like scientific opinions (e.g., historical ideas about race), socio-culture (e.g., how many people a person can be married to), or political and religious views (e.g., classifying a person of type X as a terrorist or a protestor) can proximately lead to an encoding of social bias.

Also structural constraints like the ontologies' granularity levels can induce bias (Keet, 2021).

Furthermore, issues can arise from the types of information used to characterize a person entity.

Whether one attributes the person with their skin color or not could theoretically determine the emergence of racist bias in a downstream application (Paparidis and Kotis, 2021).",invalid,,"Question:

What factors contribute to the introduction of bias in manually created ontologies?

Answer:

nan"
236460241,A Survey of Code-switching: Linguistic and Social Perspectives for Language Technologies,https://www.semanticscholar.org/paper/ee6d66efc86746d42ace14db30fcbaf9d3380e25,C-S across Languages: Indian Context,12,"According to the 2011 Census (Chandramouli, 2011), 26% of the population of India is bilingual, while 7% is trilingual. There are 121 major languages and 1599 other languages in India, out of which 22 (Assamese, Bangla, Bodo, Dogri, Gujarati, Hindi, Kashmiri, Kannada, Konkani, Maithili, Malayalam, Manipuri, Marathi, Nepali, Oriya, Punjabi, Tamil, Telugu, Sanskrit, Santali, Sindhi, Urdu) are scheduled languages with an official recognition (almost 97% of the population speaks one of the scheduled languages). Most of the population ( 93%) speak languages from the Indo-Aryan (Hindi, Bengali, Marathi, Urdu, Gujarati, Punjabi, Kashmiri, Rajasthani, Sindhi, Assamese, Maithili, Odia) and Dravidian (Kannada, Malayalam, Telugu, Tamil) language families. The census excludes languages with a population lower than 10,000 speakers. Given this, it is probably difficult to find monolingual speakers in India considering the linguistic diversity and wide-spread multilingualism. Kachru (1978) provides one of the early studies on the types and functions of C-S in India with a historical understanding of the multilingual context.

In addition to the mutual influences and convergence of Indo-Aryan and Dravidian languages internally, he mentions Persian and English as outside influences on Indian languages. Similarly, Sridhar (1978) provides an excellent comparative overview about the functions of C-S in Kannada in relation to the Perso-Arabic vs. English influences. Kumar (1986) gives examples about the formal (e.g. within NPs, PPs, VPs) and functional (i.e. social and stylistic) aspects of Hindi-English C-S from a theoretical point of view. More recently, Doley (2013) explains how fish mongers in a local fish market in Assam adjust and switch between Assamese, English and local languages strategically to sell their products to multilingual clientele. Another observation about C-S in daily life comes from Boro (2020) who provides examples of English, Assamese and Bodo (another language spoken in the Assam region) C-S and borrowings. In addition to English, Portuguese was also in contact with the local languages as a result colonization in South India. For example, Kapp (1997) explains the Portuguese influence through borrowings in Dravidian languages (i.e. Kannada and Telugu) spoken in India.

Instead of automatic data collection and methods of analyses, the C-S examples for the abovementioned studies are (probably) encountered and collected by the authors themselves in daily life interactions over a period of time with limited means. Nowadays, these small sets of data would be regarded as insignificant in computational areas of research. However, ignoring these studies and data could have serious consequences since crucial information about the social and cultural dynamics in a multilingual setting would also be lost. For example, Nadkarni (1975) proves this point by explaining how social factors influence the C-S between Saraswat Brahmin dialect of Konkani (Indo-Aryan language) and Kannada (Dravidian language) in the South of India. Both languages have been in contact with each other for over four hundred years. Saraswat Brahmins are fluent in both Konkani and Kannada but they do not speak Konkani with Kannada speakers and they also do not C-S between Konkani and Kannada. Nadkarni (1975) attributes this preference to the high prestige associated with Konkani within the given social context. Since Kannada (perceived as less prestigious) is widely spoken in that region, Konkani speakers learn and speak Kannada for functional purposes in daily life which does not involve C-S. However, it is not common for Kannada speakers to learn and speak Konkani (Nadkarni, 1975).

C-S in India has been investigated through written media, advertising and film industry as well. Si (2011) analyzed Hindi-English C-S in the scripts of seven Bollywood movies which were filmed between 1982 and 2004. Her results indicate a change of direction C-S over the years. More specifically, Hindi was the dominant language with occasional switches to English for the early productions but English became the dominant language especially for younger generations in the later productions. A similar trend has been observed for Bengali movie scripts as well. Through analyzing movie scripts (between 1970s and 2010s), Chatterjee (2016) finds a drastic increase in the use of bilingual verbs (e.g. renovate koreche ""renovation do"") over time and attributes this rise to the increasing popularity of English in Indian society. Within the immigrant context, Gardner-Chloros and Charles (2007) focused on the types and functions of C-S between Hindi and English across the TV programs (e.g. highly scripted vs. loosely scripted programs) of a British/Asian cable channel in the UK. Although they have come across C-S in a variety of TV shows, the least amount of C-S was encountered in the news broadcasts (i.e. highly scripted). In general, they have encountered less C-S on TV broadcasts in comparison to the natural speech and attribute this factor to the consciousness of TV personalities about pure language use (instead of C-S). Similarly, Zipp (2017) analyzed Gujarati-English C-S within a radio show targeting British South Asians living in the US and concluded that C-S was part of identity construction among youngsters (group identity). Pratapa and Choudhury (2017) perform a quantitative study of 18 recent Bollywood (Hindi) movies and find that C-S is used for establishing identity, social dynamics between characters and the socio-cultural context of the movie.

From an advertising point of view, Kathpalia and Wee Ong (2015) analyzed C-S in Hinglish (i.e. Hindi, English, Urdu, Sanskrit according to their definition) billboards about the Amul brand in India. After compiling the advertisements on billboards (1191), they classified the structures and functions of C-S. Their results indicate more intrasentential C-S than intersentential ones on the billboards. In terms of function, the advertisers used C-S to indicate figures of speech (e.g. puns, associations, contradictory associations, word-creation and repetitions) to attract the attention of the target group. Mohanty (2006) provides an extended overview of the multilingual education system in India exploring the types and quality of schools across a wide spectrum. In general, high-cost English Medium (EM) education is valued by upper-class and affluent families. Although low-cost EM education is also available for lower income families, he questions its impact in comparison to education in the local languages. Sridhar (2002) explains that C-S is commonly practiced among students in schools across India. In addition, she finds it unrealistic to ask the students to separate the two languages harshly. In immigrant contexts, Martin et al. (2006) investigates how Gujarati-English C-S is used among the South Asian students in educational settings in the UK. Another analysis reveals a shift from Bengali toward English among the younger generations of the immigrant Bengali community in the UK (Al-Azami, 2006). In terms of the C-S patterns, first generation immigrants integrate English words while speaking Bengali whereas English dominates the conversations of younger generations with occasional switches to Bengali. There are also studies about Bengali-English C-S in the UK school settings (Pagett, 2006) and Bangladesh (Obaidullah, 2016) as well. However, a systematic comparison between Bengali-English C-S in India, Bangladesh and immigrant settings are lacking.

In their study about aphasic patients, Shyamala Chengappa and Bhat (2004) report increased frequency of C-S between Malayalam and English for aphasic patients in comparison to the control group. However, there were less differences between the groups in terms of functions of C-S. Deepa and Shyamala (2019) find that amount and types of C-S could be used to differentiate between healthy and mild dementia patients who are bilingual in Kannada and English. Although both studies are carried out with limited subjects, they offer insights about the use of C-S in health settings as well.","sent1: According to the 2011 Census (Chandramouli, 2011), 26% of the population of India is bilingual, while 7% is trilingual.
sent2: There are 121 major languages and 1599 other languages in India, out of which 22 (Assamese, Bangla, Bodo, Dogri, Gujarati, Hindi, Kashmiri, Kannada, Konkani, Maithili, Malayalam, Manipuri, Marathi, Nepali, Oriya, Punjabi, Tamil, Telugu, Sanskrit, Santali, Sindhi, Urdu) are scheduled languages with an official recognition (almost 97% of the population speaks one of the scheduled languages).
sent3: Most of the population ( 93%) speak languages from the Indo-Aryan (Hindi, Bengali, Marathi, Urdu, Gujarati, Punjabi, Kashmiri, Rajasthani, Sindhi, Assamese, Maithili, Odia) and Dravidian (Kannada, Malayalam, Telugu, Tamil) language families.
sent4: The census excludes languages with a population lower than 10,000 speakers.
sent5: Given this, it is probably difficult to find monolingual speakers in India considering the linguistic diversity and wide-spread multilingualism.
sent6: Kachru (1978) provides one of the early studies on the types and functions of C-S in India with a historical understanding of the multilingual context.
sent7: In addition to the mutual influences and convergence of Indo-Aryan and Dravidian languages internally, he mentions Persian and English as outside influences on Indian languages.
sent8: Similarly, Sridhar (1978) provides an excellent comparative overview about the functions of C-S in Kannada in relation to the Perso-Arabic vs. English influences.
sent9: Kumar (1986) gives examples about the formal (e.g. within NPs, PPs, VPs) and functional (i.e. social and stylistic) aspects of Hindi-English C-S from a theoretical point of view.
sent10: More recently, Doley (2013) explains how fish mongers in a local fish market in Assam adjust and switch between Assamese, English and local languages strategically to sell their products to multilingual clientele.
sent11: Another observation about C-S in daily life comes from Boro (2020) who provides examples of English, Assamese and Bodo (another language spoken in the Assam region) C-S and borrowings.
sent12: In addition to English, Portuguese was also in contact with the local languages as a result colonization in South India.
sent13: For example, Kapp (1997) explains the Portuguese influence through borrowings in Dravidian languages (i.e. Kannada and Telugu) spoken in India.
sent14: Instead of automatic data collection and methods of analyses, the C-S examples for the abovementioned studies are (probably) encountered and collected by the authors themselves in daily life interactions over a period of time with limited means.
sent15: Nowadays, these small sets of data would be regarded as insignificant in computational areas of research.
sent16: However, ignoring these studies and data could have serious consequences since crucial information about the social and cultural dynamics in a multilingual setting would also be lost.
sent17: For example, Nadkarni (1975) proves this point by explaining how social factors influence the C-S between Saraswat Brahmin dialect of Konkani (Indo-Aryan language) and Kannada (Dravidian language) in the South of India.
sent18: Both languages have been in contact with each other for over four hundred years.
sent19: Saraswat Brahmins are fluent in both Konkani and Kannada but they do not speak Konkani with Kannada speakers and they also do not C-S between Konkani and Kannada.
sent20: Nadkarni (1975) attributes this preference to the high prestige associated with Konkani within the given social context.
sent21: Since Kannada (perceived as less prestigious) is widely spoken in that region, Konkani speakers learn and speak Kannada for functional purposes in daily life which does not involve C-S.
sent22: However, it is not common for Kannada speakers to learn and speak Konkani (Nadkarni, 1975).C-S in India has been investigated through written media, advertising and film industry as well.
sent23: Si (2011) analyzed Hindi-English C-S in the scripts of seven Bollywood movies which were filmed between 1982 and 2004.
sent24: Her results indicate a change of direction C-S over the years.
sent25: More specifically, Hindi was the dominant language with occasional switches to English for the early productions but English became the dominant language especially for younger generations in the later productions.
sent26: A similar trend has been observed for Bengali movie scripts as well.
sent27: Through analyzing movie scripts (between 1970s and 2010s), Chatterjee (2016) finds a drastic increase in the use of bilingual verbs (e.g. renovate koreche ""renovation do"") over time and attributes this rise to the increasing popularity of English in Indian society.
sent28: Within the immigrant context, Gardner-Chloros and Charles (2007) focused on the types and functions of C-S between Hindi and English across the TV programs (e.g. highly scripted vs. loosely scripted programs) of a British/Asian cable channel in the UK.
sent29: Although they have come across C-S in a variety of TV shows, the least amount of C-S was encountered in the news broadcasts (i.e. highly scripted).
sent30: In general, they have encountered less C-S on TV broadcasts in comparison to the natural speech and attribute this factor to the consciousness of TV personalities about pure language use (instead of C-S).
sent31: Similarly, Zipp (2017) analyzed Gujarati-English C-S within a radio show targeting British South Asians living in the US and concluded that C-S was part of identity construction among youngsters (group identity).
sent32: Pratapa and Choudhury (2017) perform a quantitative study of 18 recent Bollywood (Hindi) movies and find that C-S is used for establishing identity, social dynamics between characters and the socio-cultural context of the movie.
sent33: From an advertising point of view, Kathpalia and Wee Ong (2015) analyzed C-S in Hinglish (i.e. Hindi, English, Urdu, Sanskrit according to their definition) billboards about the Amul brand in India.
sent34: After compiling the advertisements on billboards (1191), they classified the structures and functions of C-S.
sent35: Their results indicate more intrasentential C-S than intersentential ones on the billboards.
sent36: In terms of function, the advertisers used C-S to indicate figures of speech (e.g. puns, associations, contradictory associations, word-creation and repetitions) to attract the attention of the target group.
sent37: Mohanty (2006) provides an extended overview of the multilingual education system in India exploring the types and quality of schools across a wide spectrum.
sent38: In general, high-cost English Medium (EM) education is valued by upper-class and affluent families.
sent39: Although low-cost EM education is also available for lower income families, he questions its impact in comparison to education in the local languages.
sent40: Sridhar (2002) explains that C-S is commonly practiced among students in schools across India.
sent41: In addition, she finds it unrealistic to ask the students to separate the two languages harshly.
sent42: In immigrant contexts, Martin et al. (2006) investigates how Gujarati-English C-S is used among the South Asian students in educational settings in the UK.
sent43: Another analysis reveals a shift from Bengali toward English among the younger generations of the immigrant Bengali community in the UK (Al-Azami, 2006).
sent44: In terms of the C-S patterns, first generation immigrants integrate English words while speaking Bengali whereas English dominates the conversations of younger generations with occasional switches to Bengali.
sent45: There are also studies about Bengali-English C-S in the UK school settings (Pagett, 2006) and Bangladesh (Obaidullah, 2016) as well.
sent46: However, a systematic comparison between Bengali-English C-S in India, Bangladesh and immigrant settings are lacking.
sent47: In their study about aphasic patients, Shyamala Chengappa and Bhat (2004) report increased frequency of C-S between Malayalam and English for aphasic patients in comparison to the control group.
sent48: However, there were less differences between the groups in terms of functions of C-S. Deepa and Shyamala (2019) find that amount and types of C-S could be used to differentiate between healthy and mild dementia patients who are bilingual in Kannada and English.
sent49: Although both studies are carried out with limited subjects, they offer insights about the use of C-S in health settings as well.","Question: How has code-switching (C-S) been studied in the context of Indian media and entertainment?

Supporting sentence: sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36",How has code-switching (C-S) been studied in the context of Indian media and entertainment?,"sent23, sent24, sent25, sent26, sent27, sent28, sent29, sent30, sent31, sent32, sent33, sent34, sent35, sent36",9,"Si (2011) analyzed Hindi-English C-S in the scripts of seven Bollywood movies which were filmed between 1982 and 2004.

Her results indicate a change of direction C-S over the years.

More specifically, Hindi was the dominant language with occasional switches to English for the early productions but English became the dominant language especially for younger generations in the later productions.

A similar trend has been observed for Bengali movie scripts as well.

Through analyzing movie scripts (between 1970s and 2010s), Chatterjee (2016) finds a drastic increase in the use of bilingual verbs (e.g. renovate koreche ""renovation do"") over time and attributes this rise to the increasing popularity of English in Indian society.

Within the immigrant context, Gardner-Chloros and Charles (2007) focused on the types and functions of C-S between Hindi and English across the TV programs (e.g. highly scripted vs. loosely scripted programs) of a British/Asian cable channel in the UK.

Although they have come across C-S in a variety of TV shows, the least amount of C-S was encountered in the news broadcasts (i.e. highly scripted).

In general, they have encountered less C-S on TV broadcasts in comparison to the natural speech and attribute this factor to the consciousness of TV personalities about pure language use (instead of C-S).

Similarly, Zipp (2017) analyzed Gujarati-English C-S within a radio show targeting British South Asians living in the US and concluded that C-S was part of identity construction among youngsters (group identity).

Pratapa and Choudhury (2017) perform a quantitative study of 18 recent Bollywood (Hindi) movies and find that C-S is used for establishing identity, social dynamics between characters and the socio-cultural context of the movie.

From an advertising point of view, Kathpalia and Wee Ong (2015) analyzed C-S in Hinglish (i.e. Hindi, English, Urdu, Sanskrit according to their definition) billboards about the Amul brand in India.

After compiling the advertisements on billboards (1191), they classified the structures and functions of C-S.

Their results indicate more intrasentential C-S than intersentential ones on the billboards.

In terms of function, the advertisers used C-S to indicate figures of speech (e.g. puns, associations, contradictory associations, word-creation and repetitions) to attract the attention of the target group.",invalid,,"Question:

How has code-switching (C-S) been studied in the context of Indian media and entertainment?

Answer:

nan"
253736389,Transformers for Tabular Data Representation: A Survey of Models and Applications,https://www.semanticscholar.org/paper/18ff1542d5a2a4490c7b3f21522bf1343889f700,Downstream Tasks,11,"Using neural representations for tabular data show, improvements in performance in several downstream tasks. In this section, we describe the tasks and define their input and output. While they all consume tables, settings can be quite heterogeneous, with systems exploiting different information, even for the same task. A summary of the covered tasks along their input, output, and some representative systems addressing them is shown in Table 4. We detail next the mandatory input elements and the different contexts.  (Dagan et al., 2013;Korman et al., 2018), checking facts with tables consists of verifying if a textual input claim is true or false against a trusted database (TAPEX, DECO, TABFACT), also provided as input. Some fact-checking systems, such as FEVEROUS, also output the cells used for verification as evidence (Nakov et al., 2021;Karagiannis et al., 2020).

Question Answering (QA): In the free text setting, QA aims at retrieving passages that include the answer to a given question. In the tabular data setting, it consists of returning as output the cells that answer an input consisting of a question and a table. One can distinguish two levels of complexity. Simple QA involves lookup queries on tables (DTR, CLTR), while a more complex QA  Most of the systems in this survey aim at improving accuracy in QA with respect to hand-crafted embeddings.

Semantic Parsing (SP): In the tabular data setting, given a question and a table as input, SP generates a declarative query in SQL over the table's schema to retrieve the answer to the question. While in QA the interest is in directly getting the answer, SP produces the (interpretable) query to obtain it (TABERT, GRAPPA, TAPEX).  table that can be used to answer the question. TR is helpful when trying to reduce the search space for a QA task (GTR, DTR, MMR). It is a challenging task given the limited input size of transformers, that is, their constraint to sequences of 512 tokens.  We observe that most tasks can be seen as traditional NLP problems where structured data replace free text, such as the case of QA where answers are located in tabular data instead of documents (Gupta and Gupta, 2012). TFC involves retrieving cells that entail or refute a given statement, whereas on free text the corresponding objective is to select sentences as evidence (Thorne et al., 2018). SP is the task of converting natural language utterance into a logical form (Berant and Liang, 2014), which in this setting is expressed as a declarative query over a relational table. TR on tabular data corresponds to passage retrieval on free text (Kaszkiel and Zobel, 1997). TCP is analogous to predicting missing words or values in a sentence . Finally, TMP can be related to syntactic parsing in NLP (Van Gompel and Pickering, 2007), where relationships between different tokens are depicted.

We conclude this section with an analysis of the performance of the systems over the different downstream tasks. For every task, we selected datasets for which at least two systems have reported results. All datasets reported in Table 5 (Ghasemi-Gol and Szekely, 2018), which contains web tables annotated with their type (relational, entity, matrix, list, and non-data), and EntiTab (Zhang and Balog, 2017), which contains web tables annotated with possible header labels for the column population task. Table 5 also contains the size, expressed as number of parameters, of the largest model used by every system. As some systems are not comparable on any shared datasets, we report here their size: TABFACT (110M), MMR (87M), TURL (314M), RPT (139M), and CLTR (235M). Larger models do not correlate with better performance across different systems for the same task, but a larger model always brings higher scores for the same system, as expected. Execution times for training and testing depend on the size of the model and the computing architecture.

The results in the table show that some tasks, such as TFC and TMP, can already be handled successfully by the systems, while some tasks, such as TCP, TR, and SP, are harder. QA is the task supported by most systems and the quality of the results vary depending on the dataset at hand. Differences in performance can be explained with different improvements across the systems. For example, MATE has better performance with respect to TAPAS in two tasks because of its mechanism to deal with larger input tables. Similarly, TUTA improves over TABERT because it handles tabular data beyond relational tables. Finally, TABERT and TAPAS are the systems that show most coverage in terms of tasks, with multiple papers using them as baselines in their experiments. For the systems that are not reported in Table 5, we notice that TURL obtains similar F1 results for column type prediction, but on a dataset different from VizNet; TURL, TABBIE, and TABERT also report comparable MAP results for the row population task (not in Table 5) over different datasets.","sent1: Using neural representations for tabular data show, improvements in performance in several downstream tasks.
sent2: In this section, we describe the tasks and define their input and output.
sent3: While they all consume tables, settings can be quite heterogeneous, with systems exploiting different information, even for the same task.
sent4: A summary of the covered tasks along their input, output, and some representative systems addressing them is shown in Table 4.
sent5: We detail next the mandatory input elements and the different contexts.
sent6: (Dagan et al., 2013;Korman et al., 2018), checking facts with tables consists of verifying if a textual input claim is true or false against a trusted database (TAPEX, DECO, TABFACT), also provided as input.
sent7: Some fact-checking systems, such as FEVEROUS, also output the cells used for verification as evidence (Nakov et al., 2021;Karagiannis et al., 2020).
sent8: Question Answering (QA): In the free text setting, QA aims at retrieving passages that include the answer to a given question.
sent9: In the tabular data setting, it consists of returning as output the cells that answer an input consisting of a question and a table.
sent10: One can distinguish two levels of complexity.
sent11: Simple QA involves lookup queries on tables (DTR, CLTR), while a more complex QA  Most of the systems in this survey aim at improving accuracy in QA with respect to hand-crafted embeddings.
sent12: Semantic Parsing (SP): In the tabular data setting, given a question and a table as input, SP generates a declarative query in SQL over the table's schema to retrieve the answer to the question.
sent13: While in QA the interest is in directly getting the answer, SP produces the (interpretable) query to obtain it (TABERT, GRAPPA, TAPEX).  table that can be used to answer the question.
sent14: TR is helpful when trying to reduce the search space for a QA task (GTR, DTR, MMR).
sent15: It is a challenging task given the limited input size of transformers, that is, their constraint to sequences of 512 tokens.
sent16: We observe that most tasks can be seen as traditional NLP problems where structured data replace free text, such as the case of QA where answers are located in tabular data instead of documents (Gupta and Gupta, 2012).
sent17: TFC involves retrieving cells that entail or refute a given statement, whereas on free text the corresponding objective is to select sentences as evidence (Thorne et al., 2018).
sent18: SP is the task of converting natural language utterance into a logical form (Berant and Liang, 2014), which in this setting is expressed as a declarative query over a relational table.
sent19: TR on tabular data corresponds to passage retrieval on free text (Kaszkiel and Zobel, 1997).
sent20: TCP is analogous to predicting missing words or values in a sentence .
sent21: Finally, TMP can be related to syntactic parsing in NLP (Van Gompel and Pickering, 2007), where relationships between different tokens are depicted.
sent22: We conclude this section with an analysis of the performance of the systems over the different downstream tasks.
sent23: For every task, we selected datasets for which at least two systems have reported results.
sent24: All datasets reported in Table 5 (Ghasemi-Gol and Szekely, 2018), which contains web tables annotated with their type (relational, entity, matrix, list, and non-data), and EntiTab (Zhang and Balog, 2017), which contains web tables annotated with possible header labels for the column population task.
sent25: Table 5 also contains the size, expressed as number of parameters, of the largest model used by every system.
sent26: As some systems are not comparable on any shared datasets, we report here their size: TABFACT (110M), MMR (87M), TURL (314M), RPT (139M), and CLTR (235M).
sent27: Larger models do not correlate with better performance across different systems for the same task, but a larger model always brings higher scores for the same system, as expected.
sent28: Execution times for training and testing depend on the size of the model and the computing architecture.
sent29: The results in the table show that some tasks, such as TFC and TMP, can already be handled successfully by the systems, while some tasks, such as TCP, TR, and SP, are harder.
sent30: QA is the task supported by most systems and the quality of the results vary depending on the dataset at hand.
sent31: Differences in performance can be explained with different improvements across the systems.
sent32: For example, MATE has better performance with respect to TAPAS in two tasks because of its mechanism to deal with larger input tables.
sent33: Similarly, TUTA improves over TABERT because it handles tabular data beyond relational tables.
sent34: Finally, TABERT and TAPAS are the systems that show most coverage in terms of tasks, with multiple papers using them as baselines in their experiments.
sent35: For the systems that are not reported in Table 5, we notice that TURL obtains similar F1 results for column type prediction, but on a dataset different from VizNet; TURL, TABBIE, and TABERT also report comparable MAP results for the row population task (not in Table 5) over different datasets.","Question: What are the main downstream tasks for neural representations of tabular data, and how do they differ in terms of input and output?

Supporting sentence: sent1, sent2, sent3, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21","What are the main downstream tasks for neural representations of tabular data, and how do they differ in terms of input and output?","sent1, sent2, sent3, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21",3,"Using neural representations for tabular data show, improvements in performance in several downstream tasks.

In this section, we describe the tasks and define their input and output.

While they all consume tables, settings can be quite heterogeneous, with systems exploiting different information, even for the same task.

(Dagan et al., 2013;Korman et al., 2018), checking facts with tables consists of verifying if a textual input claim is true or false against a trusted database (TAPEX, DECO, TABFACT), also provided as input.

Some fact-checking systems, such as FEVEROUS, also output the cells used for verification as evidence (Nakov et al., 2021;Karagiannis et al., 2020).

Question Answering (QA): In the free text setting, QA aims at retrieving passages that include the answer to a given question.

In the tabular data setting, it consists of returning as output the cells that answer an input consisting of a question and a table.

One can distinguish two levels of complexity.

Simple QA involves lookup queries on tables (DTR, CLTR), while a more complex QA  Most of the systems in this survey aim at improving accuracy in QA with respect to hand-crafted embeddings.

Semantic Parsing (SP): In the tabular data setting, given a question and a table as input, SP generates a declarative query in SQL over the table's schema to retrieve the answer to the question.

While in QA the interest is in directly getting the answer, SP produces the (interpretable) query to obtain it (TABERT, GRAPPA, TAPEX).  table that can be used to answer the question.

TR is helpful when trying to reduce the search space for a QA task (GTR, DTR, MMR).

It is a challenging task given the limited input size of transformers, that is, their constraint to sequences of 512 tokens.

We observe that most tasks can be seen as traditional NLP problems where structured data replace free text, such as the case of QA where answers are located in tabular data instead of documents (Gupta and Gupta, 2012).

TFC involves retrieving cells that entail or refute a given statement, whereas on free text the corresponding objective is to select sentences as evidence (Thorne et al., 2018).

SP is the task of converting natural language utterance into a logical form (Berant and Liang, 2014), which in this setting is expressed as a declarative query over a relational table.

TR on tabular data corresponds to passage retrieval on free text (Kaszkiel and Zobel, 1997).

TCP is analogous to predicting missing words or values in a sentence .

Finally, TMP can be related to syntactic parsing in NLP (Van Gompel and Pickering, 2007), where relationships between different tokens are depicted.",skip,,"Question:

What are the main downstream tasks for neural representations of tabular data, and how do they differ in terms of input and output?

Answer:

nan"
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,Evaluation metrics,4,"As an essential aspect of recommendation design, evaluation can provide insights on recommendation quality from multiple dimensions. Apart from well-known metrics such as RMSE, MAP, AUC, MAE, Recall, Precision, MRR, NDCG, F1-score and HitRate in offline mode, some works define Group AUC  or User Group AUC  to evaluate the utility of group recommendations. JIANG et al. (2022) and  conducted A/B testing to evaluate performance with online users using Conversion rate or CTR.

The integration of generative modules such as GPT and T5 into existing recommender systems offers additional possibilities for recommender systems, such as generating free-form textual explanations for recommendation results or simulating more realistic real-life dialogue scenarios during conversational recommendations to enhance users' experience. In such cases, BLEU and ROUGE are commonly adopted to automatically evaluate the relevance of generated text based on lexicon overlap. Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts. Other evaluation metrics are leveraged with respect to special requests in LMRSs. For instance, Xie et al. (2023) adopted Entailment Ratio and MAUVE to measure if the generated explanations are factually correct and how close the generated contents are to the ground truth corpus, respectively. Geng et al. (2022a) adopted Feature Diversity (DIV) and CLIPScore (CS) to measure the generated explanations and text-image alignment. Besides, to assess the system's capability to provide item recommendations during conversations, Wang et al. (2022a) computed the Item Ratio within the final generated responses. They evaluated the recommendation performance in an end-to-end manner to prevent the inappropriate insertion of recommended items into dialogues.

Human evaluation complements objective evaluation, as automatic metrics may not match sub-jective feedback from users. Liu et al. (2023a) pointed out that human subjective and automatic objective evaluation measurements may yield opposite results, which underscores the limitations of existing automatic metrics for evaluating generated explanations and dialogues in LMRSs. Figure  3 displays usage frequency statistics for different evaluation metrics in their respective tasks.","sent1: As an essential aspect of recommendation design, evaluation can provide insights on recommendation quality from multiple dimensions.
sent2: Apart from well-known metrics such as RMSE, MAP, AUC, MAE, Recall, Precision, MRR, NDCG, F1-score and HitRate in offline mode, some works define Group AUC  or User Group AUC  to evaluate the utility of group recommendations.
sent3: JIANG et al. (2022) and  conducted A/B testing to evaluate performance with online users using Conversion rate or CTR.
sent4: The integration of generative modules such as GPT and T5 into existing recommender systems offers additional possibilities for recommender systems, such as generating free-form textual explanations for recommendation results or simulating more realistic real-life dialogue scenarios during conversational recommendations to enhance users' experience.
sent5: In such cases, BLEU and ROUGE are commonly adopted to automatically evaluate the relevance of generated text based on lexicon overlap.
sent6: Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts.
sent7: Other evaluation metrics are leveraged with respect to special requests in LMRSs.
sent8: For instance, Xie et al. (2023) adopted Entailment Ratio and MAUVE to measure if the generated explanations are factually correct and how close the generated contents are to the ground truth corpus, respectively.
sent9: Geng et al. (2022a) adopted Feature Diversity (DIV) and CLIPScore (CS) to measure the generated explanations and text-image alignment.
sent10: Besides, to assess the system's capability to provide item recommendations during conversations, Wang et al. (2022a) computed the Item Ratio within the final generated responses.
sent11: They evaluated the recommendation performance in an end-to-end manner to prevent the inappropriate insertion of recommended items into dialogues.
sent12: Human evaluation complements objective evaluation, as automatic metrics may not match sub-jective feedback from users.
sent13: Liu et al. (2023a) pointed out that human subjective and automatic objective evaluation measurements may yield opposite results, which underscores the limitations of existing automatic metrics for evaluating generated explanations and dialogues in LMRSs.
sent14: Figure  3 displays usage frequency statistics for different evaluation metrics in their respective tasks.","Question: What are the various evaluation metrics used to assess the quality of generated text in language model-based recommender systems?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",What are the various evaluation metrics used to assess the quality of generated text in language model-based recommender systems?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13",7,"The integration of generative modules such as GPT and T5 into existing recommender systems offers additional possibilities for recommender systems, such as generating free-form textual explanations for recommendation results or simulating more realistic real-life dialogue scenarios during conversational recommendations to enhance users' experience.

In such cases, BLEU and ROUGE are commonly adopted to automatically evaluate the relevance of generated text based on lexicon overlap.

Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts.

Other evaluation metrics are leveraged with respect to special requests in LMRSs.

For instance, Xie et al. (2023) adopted Entailment Ratio and MAUVE to measure if the generated explanations are factually correct and how close the generated contents are to the ground truth corpus, respectively.

Geng et al. (2022a) adopted Feature Diversity (DIV) and CLIPScore (CS) to measure the generated explanations and text-image alignment.

Besides, to assess the system's capability to provide item recommendations during conversations, Wang et al. (2022a) computed the Item Ratio within the final generated responses.

They evaluated the recommendation performance in an end-to-end manner to prevent the inappropriate insertion of recommended items into dialogues.

Human evaluation complements objective evaluation, as automatic metrics may not match sub-jective feedback from users.

Liu et al. (2023a) pointed out that human subjective and automatic objective evaluation measurements may yield opposite results, which underscores the limitations of existing automatic metrics for evaluating generated explanations and dialogues in LMRSs.",invalid,,"Question:

What are the various evaluation metrics used to assess the quality of generated text in language model-based recommender systems?

Answer:

nan"
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Factors Affecting Knowledge Retention,20,"PLMs are diverse with respect to their architectures, pre-training objectives and their pre-training data.A compelling question is: how do all these factors affect knowledge retention in PLMs?

Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.

A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.

Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.","sent1: PLMs are diverse with respect to their architectures, pre-training objectives and their pre-training data.
sent2: A compelling question is: how do all these factors affect knowledge retention in PLMs?
sent3: Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.
sent4: More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.
sent5: A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.
sent6: Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.","Question: What factors influence knowledge retention in pre-trained language models (PLMs)?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6",What factors influence knowledge retention in pre-trained language models (PLMs)?,"sent1, sent2, sent3, sent4, sent5, sent6",6,"PLMs are diverse with respect to their architectures, pre-training objectives and their pre-training data.

A compelling question is: how do all these factors affect knowledge retention in PLMs?

Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.

More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.

A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.

Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.",invalid,,"Question:

What factors influence knowledge retention in pre-trained language models (PLMs)?

Answer:

nan"
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,Pre-trained Language Models,6,"Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021). State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ). Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019). Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks. Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.","sent1: Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021).
sent2: State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ).
sent3: Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019).
sent4: Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks.
sent5: Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.","Question: How have pre-trained language models improved the performance of various NLP tasks?

Supporting sentence: sent1, sent2, sent3, sent4, sent5",How have pre-trained language models improved the performance of various NLP tasks?,"sent1, sent2, sent3, sent4, sent5",7,"Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021).

State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ).

Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019).

Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks.

Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.",invalid,,"Question:

How have pre-trained language models improved the performance of various NLP tasks?

Answer:

nan"
234093015,A Survey of Data Augmentation Approaches for NLP,https://www.semanticscholar.org/paper/63d8426ba1f51a8525dd19fd8ec92934ec71aea5,Background,6,"What is data augmentation? Data augmentation (DA) encompasses methods of increasing training data diversity without directly collecting more data. Most strategies either add slightly modified copies of existing data or create synthetic data, aiming for the augmented data to act as a regularizer and reduce overfitting when training ML models (Shorten and Khoshgoftaar, 2019;Hernández-García and König, 2020). DA has been commonly used in CV, where techniques like cropping, flipping, and color jittering are a standard component of model training. In NLP, where the input space is discrete, how to generate effective augmented examples that capture the desired invariances is less obvious.

What are the goals and trade-offs? Despite challenges associated with text, many DA techniques for NLP have been proposed, ranging from rule-based manipulations (Zhang et al., 2015) to more complicated generative approaches (Liu et al., 2020b). As DA aims to provide an alternative to collecting more data, an ideal DA technique should be both easy-to-implement and improve model performance. Most offer trade-offs between these two.

Rule-based techniques are easy-to-implement but usually offer incremental performance improvements (Li et al., 2017;Wei and Zou, 2019;Wei et al., 2021b). Techniques leveraging trained models may be more costly to implement but introduce more data variation, leading to better performance boosts. Model-based techniques customized for downstream tasks can have strong effects on performance but be difficult to develop and utilize.

Further, the distribution of augmented data should neither be too similar nor too different from the original. This may lead to greater overfitting or poor performance through training on examples not representative of the given domain, respectively. Effective DA approaches should aim for a balance.

Kashefi and Hwa (2020) devise a KL-Divergence-based unsupervised procedure to preemptively choose among DA heuristics, rather than a typical ""run-all-heuristics"" comparison, which can be very time and cost intensive.

Interpretation of DA Dao et al. (2019) note that ""data augmentation is typically performed in an adhoc manner with little understanding of the underlying theoretical principles"", and claim the typical explanation of DA as regularization to be insufficient. Overall, there indeed appears to be a lack of research on why exactly DA works. Existing work on this topic is mainly surface-level, and rarely investigates the theoretical underpinnings and principles. We discuss this challenge more in §6, and highlight some of the existing work below. Bishop (1995) show training with noised examples is reducible to Tikhonov regularization (subsumes L2). Rajput et al. (2019) show that DA can increase the positive margin for classifiers, but only when augmenting exponentially many examples for common DA methods. Dao et al. (2019) think of DA transformations as kernels, and find two ways DA helps: averaging of features and variance regularization. Chen et al. (2020d) show that DA leads to variance reduction by averaging over orbits of the group that keep the data distribution approximately invariant.","sent1: What is data augmentation? Data augmentation (DA) encompasses methods of increasing training data diversity without directly collecting more data.
sent2: Most strategies either add slightly modified copies of existing data or create synthetic data, aiming for the augmented data to act as a regularizer and reduce overfitting when training ML models (Shorten and Khoshgoftaar, 2019;Hernández-García and König, 2020).
sent3: DA has been commonly used in CV, where techniques like cropping, flipping, and color jittering are a standard component of model training.
sent4: In NLP, where the input space is discrete, how to generate effective augmented examples that capture the desired invariances is less obvious.
sent5: What are the goals and trade-offs?
sent6: Despite challenges associated with text, many DA techniques for NLP have been proposed, ranging from rule-based manipulations (Zhang et al., 2015) to more complicated generative approaches (Liu et al., 2020b).
sent7: As DA aims to provide an alternative to collecting more data, an ideal DA technique should be both easy-to-implement and improve model performance.
sent8: Most offer trade-offs between these two.Rule-based techniques are easy-to-implement but usually offer incremental performance improvements (Li et al., 2017;Wei and Zou, 2019;Wei et al., 2021b).
sent9: Techniques leveraging trained models may be more costly to implement but introduce more data variation, leading to better performance boosts.
sent10: Model-based techniques customized for downstream tasks can have strong effects on performance but be difficult to develop and utilize.
sent11: Further, the distribution of augmented data should neither be too similar nor too different from the original.
sent12: This may lead to greater overfitting or poor performance through training on examples not representative of the given domain, respectively.
sent13: Effective DA approaches should aim for a balance.
sent14: Kashefi and Hwa (2020) devise a KL-Divergence-based unsupervised procedure to preemptively choose among DA heuristics, rather than a typical ""run-all-heuristics"" comparison, which can be very time and cost intensive.
sent15: Interpretation of DA Dao et al. (2019) note that ""data augmentation is typically performed in an adhoc manner with little understanding of the underlying theoretical principles"", and claim the typical explanation of DA as regularization to be insufficient.
sent16: Overall, there indeed appears to be a lack of research on why exactly DA works.
sent17: Existing work on this topic is mainly surface-level, and rarely investigates the theoretical underpinnings and principles.
sent18: We discuss this challenge more in §6, and highlight some of the existing work below.
sent19: Bishop (1995) show training with noised examples is reducible to Tikhonov regularization (subsumes L2).
sent20: Rajput et al. (2019) show that DA can increase the positive margin for classifiers, but only when augmenting exponentially many examples for common DA methods.
sent21: Dao et al. (2019) think of DA transformations as kernels, and find two ways DA helps: averaging of features and variance regularization.
sent22: Chen et al. (2020d) show that DA leads to variance reduction by averaging over orbits of the group that keep the data distribution approximately invariant.","Question: What are the main goals and trade-offs associated with data augmentation techniques in NLP?

Supporting sentence: sent7, sent8, sent9, sent10, sent11, sent12, sent13",What are the main goals and trade-offs associated with data augmentation techniques in NLP?,"sent7, sent8, sent9, sent10, sent11, sent12, sent13",4,"As DA aims to provide an alternative to collecting more data, an ideal DA technique should be both easy-to-implement and improve model performance.

Most offer trade-offs between these two.Rule-based techniques are easy-to-implement but usually offer incremental performance improvements (Li et al., 2017;Wei and Zou, 2019;Wei et al., 2021b).

Techniques leveraging trained models may be more costly to implement but introduce more data variation, leading to better performance boosts.

Model-based techniques customized for downstream tasks can have strong effects on performance but be difficult to develop and utilize.

Further, the distribution of augmented data should neither be too similar nor too different from the original.

This may lead to greater overfitting or poor performance through training on examples not representative of the given domain, respectively.

Effective DA approaches should aim for a balance.",skip,,"Question:

What are the main goals and trade-offs associated with data augmentation techniques in NLP?

Answer:

nan"
