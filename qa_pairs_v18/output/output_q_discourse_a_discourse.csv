corpusid,title,url,section_title,num_reference,section,section_sentence_prefixed,qud_analysis,question_with_indexes,question,sentence_indexes,judge_ansvar,qa_status,sentences,answer_rephrased,QA_pair,QA_pair_without_rephrase
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Discussion,6,"The three WS signals listed above work directly on actual questions instead of pseudo pairs as in §3 so that the NR model can adapt better to the target-domain question distribution. The bottleneck is the quality of the WS signals. SRs and PLMs are unsupervised, which could be more robust when we face a completely different domain (Dai et al., 2022). Otherwise, if we already have certain amounts relevance annotations from the target or similar domains, usually using a supervised teacher model is preferred. Nevertheless, these WS signals inevitably contain noise, and can harm the downstream performance if the noise is significant. There are two main strategies to reduce the noise effects: (1) Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2) Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022). Another potential issue is that the amount of training data in this section relies on the amount of questions we have. Unlike the document set which we can obtain for free, the question set takes time to collect and are often orders of magnitudes smaller. If no sufficient questions are available, we can use synthetic questions from question generation, then apply same WS signals in this section, which has been shown to perform on par with using real questions in certain domains Thakur et al., 2022).","sent1: The three WS signals listed above work directly on actual questions instead of pseudo pairs as in §3 so that the NR model can adapt better to the target-domain question distribution.
sent2: The bottleneck is the quality of the WS signals.
sent3: SRs and PLMs are unsupervised, which could be more robust when we face a completely different domain (Dai et al., 2022).
sent4: Otherwise, if we already have certain amounts relevance annotations from the target or similar domains, usually using a supervised teacher model is preferred.
sent5: Nevertheless, these WS signals inevitably contain noise, and can harm the downstream performance if the noise is significant.
sent6: There are two main strategies to reduce the noise effects: (1)
sent7: Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2)
sent8: Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022).
sent9: Another potential issue is that the amount of training data in this section relies on the amount of questions we have.
sent10: Unlike the document set which we can obtain for free, the question set takes time to collect and are often orders of magnitudes smaller.
sent11: If no sufficient questions are available, we can use synthetic questions from question generation, then apply same WS signals in this section, which has been shown to perform on par with using real questions in certain domains Thakur et al., 2022).","1. How do the three WS signals work in relation to actual questions? sent1
2. What is the bottleneck in using WS signals? sent2
3. How do SRs and PLMs perform in different domains? sent3
4. When is using a supervised teacher model preferred? sent4
5. What is a potential downside of WS signals? sent5
6. What are the two main strategies to reduce the noise effects in WS signals? sent6
    6.1. What is the first strategy to reduce noise effects? sent7
    6.2. What is the second strategy to reduce noise effects? sent8
7. What is another potential issue related to the amount of training data? sent9
    7.1. How does the availability of question sets compare to document sets? sent10
    7.2. What can be done if there are not enough questions available? sent11","Question: What strategies can be employed to mitigate noise effects in weak supervision signals for neural ranking models?

Supporting sentence: sent6, sent7, sent8",What strategies can be employed to mitigate noise effects in weak supervision signals for neural ranking models?,"sent6, sent7, sent8",4,implement,"There are two main strategies to reduce the noise effects: (1)

Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2)

Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022).","Two main strategies can be employed to reduce the noise effects in weak supervision signals for neural ranking models.

One strategy is to apply less strict margin-based loss functions, such as the hinge loss (Dehghani et al., 2017; Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020), which reduce the chances of models overfitting to the exact labels.

Another strategy is to apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020; Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018; Zhu et al., 2022).","Question:

What strategies can be employed to mitigate noise effects in weak supervision signals for neural ranking models?

Answer:

Two main strategies can be employed to reduce the noise effects in weak supervision signals for neural ranking models.

One strategy is to apply less strict margin-based loss functions, such as the hinge loss (Dehghani et al., 2017; Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020), which reduce the chances of models overfitting to the exact labels.

Another strategy is to apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020; Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018; Zhu et al., 2022).","Question:

What strategies can be employed to mitigate noise effects in weak supervision signals for neural ranking models?

Answer:

There are two main strategies to reduce the noise effects: (1)Apply less strict margin-based loss such as the hinge loss (Dehghani et al., 2017;Xu et al., 2019) and MarginMSE loss (Hofstätter et al., 2020;, then models have fewer chances of overfitting to the exact labels, and (2)Apply noise-resistant training methods such as confidence-based filtering (Mukherjee and Awadallah, 2020;Yu et al., 2021b) and metalearning-based refinement (Ren et al., 2018;Zhu et al., 2022)."
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Internal classifier training Exit criterion,21,"DeeBERT (Xin et al., 2020b) two-stage; sum of CE loss entropy < θ RightTool (Schwartz et al., 2020) joint; sum of CE loss calibrated max class probability > θ FastBERT  two-stage; self-distillation entropy < θ RomeBERT (Geng et al., 2021) joint; self-distillation + GR entropy < θ SkipBERT (2022) joint; weighted sum of CE + KD max class probability > θ PABEE (Zhou et al., 2020a) joint; weighted sum of CE loss patience (#consistent prediction > θ ) Voting  joint; sum of CE + diversity loss accumulated votes > θ LeeBERT (Zhu, 2021) joint; auto-weighted sum of CE + KD loss patience (#consistent prediction > θ ) Past-Future (Liao et al., 2021) joint; weighted sum of CE + imitation learning entropy < θ PCEE-BERT (2022a) joint; weighted sum of CE patience (#consistent IC confidence > θ)

BERxiT (Xin et al., 2021) alternate; sum of CE loss estimated confidence > θ CAT (Schuster et al., 2021) joint; avg. of CE loss estimated conformity > θ

CascadeBERT (Li et al., 2021a) standard model FT with confidence calibration calibrated max class probability > θ place lower BERT layers and uses confidencebased early exit for higher layers to achieve maximum acceleration.

Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation. That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded. Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions. Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training. They first jointly train the internal classifiers with BERT by a weighted sum of cross-entropy losses that assigns larger weights for upper classifiers. For inference, the model exits when k consecutive internal classifiers make the same prediction. Other than improvement on performance and efficiency, they find that PABEE can improve adversarial robustness, which they attribute to the ensemble effect.  further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution. They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold. Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy: they promote consistency across internal classifiers by distilling them to each other. However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair. They optimize these weights by a cross-level optimization algorithm.

They adopt PABEE's patience-based strategy for exiting. Liao et al. (2021) train linear transformation layers called ""imitation learners"", to approximate the hidden states of future layers based on current hidden states. For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners. Entropy is used as the exit criterion. PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidencebased methods. The inference is terminated when multiple layers are confident.

Learning-based Early Exit Another stream of research is to learn a criterion for early exiting.

BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations. They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction. It takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit. CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.

Cascading Cascading can be seen as a special form of early exit, performed at the model level. Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers. Therefore, they propose to use a suite of complete models with different numbers of layers for cascading. CascadeBERT executes models one by one, from the smallest to the largest. It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.

Applications Although early exit is originally developed for classification, there have been works extending it to more tasks and settings. Li et al. (2021b) propose Token-Level Early-Exit that targets early exiting for sequence labeling. They use the maximum class probability as confidence on a per-token basis. Once the confidence hits the threshold, the hidden states of the corresponding tokens will be frozen and directly copied to upper layers. These exited tokens will not attend to other tokens at upper layers but can still be attended by other tokens. The model completely exits when every token exits. A similar idea is also presented in Elbayad et al. (2020) and Liu et al. (2021b) where hidden states of some positions can be frozen and directly copied to upper layers, although the former is focused on generation and the latter is for classification. Xin et al. (2020a) apply DeeBERT (Xin et al., 2020b) to document ranking and set different thresholds to the negative and positive classes for early exiting, to accommodate the imbalanced class distribution in document ranking. ELUE (Liu et al., 2021a) is a benchmark which evaluates the Pareto Front of early exit models on the FLOPs-performance plane. They provide a BERT-like baseline with jointly pretrained internal classifiers, to mitigate the gap between pretraining and fine-tuning.","sent1: DeeBERT (Xin et al., 2020b) two-stage; sum of CE loss entropy < θ RightTool (Schwartz et al., 2020) joint; sum of CE loss calibrated max class probability > θ FastBERT  two-stage; self-distillation entropy <
sent2: θ RomeBERT (Geng et al., 2021) joint; self-distillation + GR entropy < θ SkipBERT (2022) joint; weighted sum of CE + KD max class probability > θ PABEE (Zhou et al., 2020a) joint; weighted sum of CE loss patience (#consistent prediction > θ )
sent3: Voting  joint; sum of CE + diversity loss accumulated votes >
sent4: θ LeeBERT (Zhu, 2021) joint; auto-weighted sum of CE + KD loss patience (#consistent prediction > θ )
sent5: Past-Future (Liao et al., 2021) joint; weighted sum of CE + imitation learning entropy < θ PCEE-BERT (2022a) joint; weighted sum of CE patience (#consistent IC confidence > θ)BERxiT (Xin et al., 2021) alternate; sum of CE loss estimated confidence > θ CAT (Schuster et al., 2021) joint; avg. of CE loss estimated conformity > θCascadeBERT (Li et al., 2021a) standard model FT with confidence calibration calibrated max class probability > θ place lower BERT layers and uses confidencebased early exit for higher layers to achieve maximum acceleration.
sent6: Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation.
sent7: That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.
sent8: Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.
sent9: Based on the similarity between overfitting and overthinking, PABEE (Zhou et al., 2020a) borrows early stopping from model training.
sent10: They first jointly train the internal classifiers with BERT by a weighted sum of cross-entropy losses that assigns larger weights for upper classifiers.
sent11: For inference, the model exits when k consecutive internal classifiers make the same prediction.
sent12: Other than improvement on performance and efficiency, they find that PABEE can improve adversarial robustness, which they attribute to the ensemble effect.
sent13: further introduce a diversity loss that encourages internal classifiers to have a diverse predicted probability distribution.
sent14: They propose a voting mechanism to ensemble the internal classifiers by exiting early when a class has accumulated more votes than the threshold.
sent15: Interestingly, LeeBERT (Zhu, 2021) adopts the opposite strategy: they promote consistency across internal classifiers by distilling them to each other.
sent16: However, they introduce a learnable weight for the cross-entropy loss of each classifier and the distillation loss between each pair.
sent17: They optimize these weights by a cross-level optimization algorithm.
sent18: They adopt PABEE's patience-based strategy for exiting.
sent19: Liao et al. (2021) train linear transformation layers called ""imitation learners"", to approximate the hidden states of future layers based on current hidden states.
sent20: For inference, the prediction after each layer is calculated by mixing the past predictions and the future predictions of the imitation learners.
sent21: Entropy is used as the exit criterion.
sent22: PCEE-BERT (Zhang et al., 2022a) borrows from both ensemble-based exit and confidencebased methods.
sent23: The inference is terminated when multiple layers are confident.
sent24: Learning-based Early Exit Another stream of research is to learn a criterion for early exiting.
sent25: BERxiT (Xin et al., 2021) alternates between joint fine-tuning and two-stage fine-tuning by freezing parameters of Transformer and the final classifier for even-numbered iterations and unfreezing them for odd-numbered iterations.
sent26: They also train a linear layer called a learning-to-exit (LTE) module to predict whether the current internal classifier makes the correct prediction.
sent27: It takes the hidden states as input and outputs a confidence score, which is used to decide whether to exit.
sent28: CAT (Schuster et al., 2021) introduces a ""meta consistency classifier"" to predict whether the output of an internal classifier conforms to the final classifier and exits when the consistency classifier predicts a certain level of conformity.
sent29: Cascading Cascading can be seen as a special form of early exit, performed at the model level.
sent30: Li et al. (2021a) find that shallow features and internal classifiers in the first few layers of BERT utilized by early exit methods like DeeBERT (Xin et al., 2020b) are not sufficient and reliable, underperforming a fine-tuned BERT with the same number of layers.
sent31: Therefore, they propose to use a suite of complete models with different numbers of layers for cascading.
sent32: CascadeBERT executes models one by one, from the smallest to the largest.
sent33: It stops when a model outputs a confidence score (calibrated maximum class probability) that reaches the threshold.
sent34: Applications Although early exit is originally developed for classification, there have been works extending it to more tasks and settings.
sent35: Li et al. (2021b) propose Token-Level Early-Exit that targets early exiting for sequence labeling.
sent36: They use the maximum class probability as confidence on a per-token basis.
sent37: Once the confidence hits the threshold, the hidden states of the corresponding tokens will be frozen and directly copied to upper layers.
sent38: These exited tokens will not attend to other tokens at upper layers but can still be attended by other tokens.
sent39: The model completely exits when every token exits.
sent40: A similar idea is also presented in Elbayad et al. (2020) and Liu et al. (2021b) where hidden states of some positions can be frozen and directly copied to upper layers, although the former is focused on generation and the latter is for classification.
sent41: Xin et al. (2020a) apply DeeBERT (Xin et al., 2020b) to document ranking and set different thresholds to the negative and positive classes for early exiting, to accommodate the imbalanced class distribution in document ranking.
sent42: ELUE (Liu et al., 2021a) is a benchmark which evaluates the Pareto Front of early exit models on the FLOPs-performance plane.
sent43: They provide a BERT-like baseline with jointly pretrained internal classifiers, to mitigate the gap between pretraining and fine-tuning.","1. What is the focus of the section on internal classifier training exit criterion? sent1
    1.1. What are some methods mentioned for internal classifier training exit criteria? sent1, sent2, sent3, sent4, sent5
2. What is a drawback of confidence-based early exit? sent6
    2.1. How does ensemble-based early exit address this drawback? sent7, sent8
    2.2. What is PABEE's approach to early exit? sent9, sent10, sent11
        2.2.1. What additional benefits does PABEE provide? sent12
        2.2.2. What mechanism does PABEE use to encourage diversity? sent13, sent14
    2.3. How does LeeBERT differ in its approach to internal classifier consistency? sent15, sent16, sent17
    2.4. What strategy does Liao et al. (2021) use for early exit? sent18, sent19, sent20, sent21
3. What is PCEE-BERT's approach to early exit? sent22, sent23
4. What is the focus of learning-based early exit research? sent24
    4.1. How does BERxiT implement learning-based early exit? sent25, sent26, sent27
    4.2. What is CAT's approach to early exit? sent28
5. What is cascading in the context of early exit? sent29
    5.1. What did Li et al. (2021a) find about early exit methods like DeeBERT? sent30
    5.2. What is the proposed solution by Li et al. (2021a) for cascading? sent31, sent32, sent33
6. What are some applications of early exit beyond classification? sent34
    6.1. What is Token-Level Early-Exit and how does it work? sent35, sent36, sent37, sent38, sent39
    6.2. How is the idea of early exit applied in Elbayad et al. (2020) and Liu et al. (2021b)? sent40
    6.3. How is DeeBERT applied to document ranking? sent41
    6.4. What is ELUE and what does it evaluate? sent42, sent43","Question: How does ensemble-based early exit improve upon confidence-based early exit in dynamic neural networks?

Supporting sentence: sent6, sent7, sent8",How does ensemble-based early exit improve upon confidence-based early exit in dynamic neural networks?,"sent6, sent7, sent8",2,implement,"Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation.

That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.","Ensemble-based early exit addresses the drawback of wasted computation found in confidence-based early exit.

If the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.","Question:

How does ensemble-based early exit improve upon confidence-based early exit in dynamic neural networks?

Answer:

Ensemble-based early exit addresses the drawback of wasted computation found in confidence-based early exit.

If the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions.","Question:

How does ensemble-based early exit improve upon confidence-based early exit in dynamic neural networks?

Answer:

Ensemble-based Early Exit One drawback in confidence-based early exit is wasted computation.

That is to say, if the confidence of an internal classifier does not satisfy the exit criterion, it will be disregarded.

Ensemble-based early exit recycles these predictions and considers output from multiple internal classifiers to make better predictions."
248426721,What Do You Mean by Relation Extraction? A Survey on Datasets and Study on Scientific Relation Classification,https://www.semanticscholar.org/paper/29a369d83a7d6a49f6a3259bee23bd4d95db0b16,The Relation Extraction Task,11,"Conceptually, RE involves a pipeline of steps (see Figure 2). Starting from the raw text, the first step consists in identifying the entities and eventually assigning them a type. Entities involve either nominals or named entities, and hence it is either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD). 5 After entities are identified, approaches start to be more blurry as studies have approached RE via different angles.

One way is to take two steps, Relation Identification (RI) and subsequent Relation Classification (RC) , as illustrated in Figure 2. This means to first identify from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI). As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations (e.g., entity pairs involving distant entities, or entity type pairs not licensed by the relations are not even considered). The last step (RC) is usually a multi-class classification to assign a relation type r to the positive samples from the previous step. Some studies merge RI and RC (Seganti et al., 2021) into one step, by adding a no-relation (no-rel) label. Other studies instead reduce the task to RC, and assume there exists a relation between two entities and the task is to determine the type (without a no-rel label). Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase. Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019). Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set. 6 What Do You Mean by Relation Extraction? RE studies rarely address the whole pipeline. We 5 Some studies divide the entity extraction into two substeps: identification (often called MD), and subsequent classification into entity types. 6 Some studies name such relation Other (Hendrickx et al., 2010). analyze all the ACL papers published in the last five years which contain the Relation Extraction keyword in the title and determine which sub-task is performed (NER/MD, RI, RC). Table 2 shows such investigation. We leave out from this analysis (a) papers which make use of distant supervision or which somehow involve knowledge bases, (b) shared task papers, (c) the bioNLP field, (d) temporal RE, and (e) Open RE. The result shows that gold entities are usually assumed for RE, presumably given the complexity of the NER/MD task on its own. Most importantly, for end-to-end models, recent work has shown that ablations for steps like NER are lacking (Taillé et al., 2020). Our analysis further shows that it is difficult to determine the RI setup. While RC is always performed, the situation is different for RI (or no-rel). Sometimes RI is clearly not done (i.e., the paper assumes a scenario in which every instance contains at least one relation), but most of the times it is either not clear from the paper, or done in a simplified scenario (e.g., datasets which already clear out most of the no-rel entity pair instances). As this blurriness hampers fair evaluation, we propose that studies clearly state which step they include, i.e., whether the work focus is on RC, RI+RC or the full RE pipeline and how special cases (no-rel and NOTA) are handled. These details are utterly important as they impact both model estimation and evaluation.

Pipeline or Joint Model? The traditional RE pipeline is, by definition of pipeline, prone to error propagation by sub-tasks. Joint entity and relation extraction approaches have been proposed in order to alleviate this problem (Miwa and Bansal, 2016;Zhang et al., 2017a;Bekoulis et al., 2018a,b;Wang and Lu, 2020;Wang et al., 2021). However, Taillé et al. (2020) recently discussed the challenge of properly evaluating such complex models. They surveyed the evaluation metrics of recently published works on end-to-end RE referring to the Strict, Boundaries, Relaxed evaluation setting pro-  posed by Bekoulis et al. (2018a). They observe unfair comparisons and overestimations of end-toend models, and claim the need for more rigorous reports of evaluation settings, including detailed datasets statistics. While some recent work shifts to joint models, it is still an open question which approach (joint or pipeline) is the most robust. Zhong and Chen (2021) found that when incorporating modern pretrained language models (e.g., BERT) using separate encoders can surpass existing joint models. Since the output label space is different, separate encoders could better capture distinct contextual information. At the moment it is not clear if one approach is more suitable than the other for RE. For this reason and because of our final goal, which is a closer look to sub-domains in the scientific field, we follow the pipeline approach and, following most work from Table 2, we here restrict the setup by focusing on the RC task.","sent1: Conceptually, RE involves a pipeline of steps (see Figure 2).
sent2: Starting from the raw text, the first step consists in identifying the entities and eventually assigning them a type.
sent3: Entities involve either nominals or named entities, and hence it is either Named Entity Recognition (NER) or, more broadly, Mention Detection (MD).
sent4: 5 After entities are identified, approaches start to be more blurry as studies have approached RE via different angles.
sent5: One way is to take two steps, Relation Identification (RI) and subsequent Relation Classification (RC) , as illustrated in Figure 2.
sent6: This means to first identify from all the possible entity pairs the ones which are in some kind of relation via a binary classification task (RI).
sent7: As the proportion of positive samples over the negative is usually extremely unbalanced towards the latter (Gormley et al., 2015), a priori heuristics are generally applied to reduce the possible combinations (e.g., entity pairs involving distant entities, or entity type pairs not licensed by the relations are not even considered).
sent8: The last step (RC) is usually a multi-class classification to assign a relation type r to the positive samples from the previous step.
sent9: Some studies merge RI and RC (Seganti et al., 2021) into one step, by adding a no-relation (no-rel) label.
sent10: Other studies instead reduce the task to RC, and assume there exists a relation between two entities and the task is to determine the type (without a no-rel label).
sent11: Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase.
sent12: Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).
sent13: Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set.
sent14: 6 What Do You Mean by Relation Extraction?
sent15: RE studies rarely address the whole pipeline.
sent16: We 5 Some studies divide the entity extraction into two substeps: identification (often called MD), and subsequent classification into entity types.
sent17: 6 Some studies name such relation Other (Hendrickx et al., 2010). analyze all the ACL papers published in the last five years which contain the Relation Extraction keyword in the title and determine which sub-task is performed (NER/MD, RI, RC).
sent18: Table 2 shows such investigation.
sent19: We leave out from this analysis (a) papers which make use of distant supervision or which somehow involve knowledge bases, (b) shared task papers, (c) the bioNLP field, (d) temporal RE, and (e) Open RE.
sent20: The result shows that gold entities are usually assumed for RE, presumably given the complexity of the NER/MD task on its own.
sent21: Most importantly, for end-to-end models, recent work has shown that ablations for steps like NER are lacking (Taillé et al., 2020).
sent22: Our analysis further shows that it is difficult to determine the RI setup.
sent23: While RC is always performed, the situation is different for RI (or no-rel).
sent24: Sometimes RI is clearly not done (i.e., the paper assumes a scenario in which every instance contains at least one relation), but most of the times it is either not clear from the paper, or done in a simplified scenario (e.g., datasets which already clear out most of the no-rel entity pair instances).
sent25: As this blurriness hampers fair evaluation, we propose that studies clearly state which step they include, i.e., whether the work focus is on RC, RI+RC or the full RE pipeline and how special cases (no-rel and NOTA) are handled.
sent26: These details are utterly important as they impact both model estimation and evaluation.
sent27: Pipeline or Joint Model? The traditional RE pipeline is, by definition of pipeline, prone to error propagation by sub-tasks.
sent28: Joint entity and relation extraction approaches have been proposed in order to alleviate this problem (Miwa and Bansal, 2016;Zhang et al., 2017a;Bekoulis et al., 2018a,b;Wang and Lu, 2020;Wang et al., 2021).
sent29: However, Taillé et al. (2020) recently discussed the challenge of properly evaluating such complex models.
sent30: They surveyed the evaluation metrics of recently published works on end-to-end RE referring to the Strict, Boundaries, Relaxed evaluation setting pro-  posed by Bekoulis et al. (2018a).
sent31: They observe unfair comparisons and overestimations of end-toend models, and claim the need for more rigorous reports of evaluation settings, including detailed datasets statistics.
sent32: While some recent work shifts to joint models, it is still an open question which approach (joint or pipeline) is the most robust.
sent33: Zhong and Chen (2021) found that when incorporating modern pretrained language models (e.g., BERT) using separate encoders can surpass existing joint models.
sent34: Since the output label space is different, separate encoders could better capture distinct contextual information.
sent35: At the moment it is not clear if one approach is more suitable than the other for RE.
sent36: For this reason and because of our final goal, which is a closer look to sub-domains in the scientific field, we follow the pipeline approach and, following most work from Table 2, we here restrict the setup by focusing on the RC task.","1. What does the Relation Extraction (RE) task involve conceptually? sent1
    1.1. What is the first step in the RE pipeline? sent2
        1.1.1. What types of entities are involved in the first step of RE? sent3
    1.2. How do approaches to RE become more varied after entity identification? sent4
        1.2.1. What is one way to approach RE after entity identification? sent5
            1.2.1.1. What does Relation Identification (RI) involve? sent6
            1.2.1.2. Why are a priori heuristics applied in RI? sent7
            1.2.1.3. What is the last step in the RE pipeline? sent8
        1.2.2. How do some studies merge RI and RC? sent9
        1.2.3. How do other studies simplify the RE task? sent10
    1.3. How is RI influenced by the RC setup? sent11
        1.3.1. How do some studies address the approximation in RI? sent12
            1.3.1.1. How does the NOTA label differ from no-rel? sent13
2. How often do RE studies address the entire pipeline? sent15
    2.1. What does the analysis of ACL papers reveal about the RE sub-tasks? sent17
        2.1.1. What is excluded from the analysis of RE papers? sent19
        2.1.2. What assumption is commonly made about entities in RE studies? sent20
        2.1.3. What is lacking in end-to-end RE models according to recent work? sent21
    2.2. What challenges are associated with determining the RI setup? sent22
        2.2.1. How is the situation different for RI compared to RC? sent23
        2.2.2. What proposal is made to address the blurriness in RE evaluation? sent25
3. What are the implications of the traditional RE pipeline? sent27
    3.1. What approaches have been proposed to alleviate error propagation in RE? sent28
    3.2. What challenges are associated with evaluating joint entity and relation extraction models? sent29
        3.2.1. What did Taillé et al. (2020) observe about end-to-end model evaluations? sent31
    3.3. What is still an open question regarding RE approaches? sent32
        3.3.1. What did Zhong and Chen (2021) find about using separate encoders in RE? sent33
        3.3.2. Why might separate encoders be beneficial in RE? sent34
    3.4. What is the current understanding of the suitability of RE approaches? sent35
    3.5. What approach does the paper follow for RE and why? sent36","Question: How do studies address the approximation in Relation Identification (RI) within the Relation Extraction (RE) task?

Supporting sentence: sent11, sent12, sent13",How do studies address the approximation in Relation Identification (RI) within the Relation Extraction (RE) task?,"sent11, sent12, sent13",2,implement,"Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set.","RI is influenced by the RC setup, where relations not in the RC label set are considered as negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

In this context, the NOTA label differs from no-rel because a relation exists between the two entities, but its type is not included in the considered RC label set.","Question:

How do studies address the approximation in Relation Identification (RI) within the Relation Extraction (RE) task?

Answer:

RI is influenced by the RC setup, where relations not in the RC label set are considered as negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

In this context, the NOTA label differs from no-rel because a relation exists between the two entities, but its type is not included in the considered RC label set.","Question:

How do studies address the approximation in Relation Identification (RI) within the Relation Extraction (RE) task?

Answer:

Regardless, RI is influenced by the RC setup: Relations which are not in the RC label set are considered as negative samples in the RI phase.

Some studies address this approximation by distinguishing between the no-rel and the None-Of-The-Above (NOTA) relation (Gao et al., 2019).

Note that, in our definition, the NOTA label differs from no-rel in the sense that a relation holds between the two entities, but its type is not in the considered RC label set."
254854317,The Decades Progress on Code-Switching Research in NLP: A Systematic Survey on Trends and Challenges,https://www.semanticscholar.org/paper/44ebfdb670007b3949507be0d1a1fca93bc3d5d5,Utilizing Neural Networks,7,"Following general NLP trends, we see the adoption of neural methods and pre-trained models growing in popularity over time. In contrast, the statistical and rule-based approaches are diminishing. Compared to ISCA, we see more adaptation of the pre-training model. This is because ACL work is more text-based focused, where pre-trained LMs are more widely available.

Neural-Based Models Figure 5 shows that the trend of using neural-based models started in 2013, and the usage of rule/linguistic constraint and statistical methods diminished gradually through time, but they are still used even with a low percentage. RNN and LSTM architectures are commonly used in sequence modeling, such as language modeling (Adel et al., 2013;Vu and Schultz, 2014;Adel et al., 2014c;Winata et al., 2018a;Garg et al., 2018a;Winata et al., 2019c) and CSW identification (Samih et al., 2016a). DNN-based and hybrid HMM-DNN models are used in speech recognition models .

Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer. Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017). A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018). A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b). Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021). Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b). In the speech domain, Lovenia et al. (2022) utilize wav2vec 2.0 (Baevski et al., 2020) as a starting model before fine-tuning.

Language Models Many pre-trained model approaches utilize multilingual LMs, such as mBERT or XLM-R to deal with CSW data (Khanuja et al., 2020b;Aguilar and Solorio, 2020;Pant and Dadu, 2020;Patwa et al., 2020;Winata et al., 2021a). These models are often fine-tuned with the downstream task or with CSW text to better adapt to the languages. Some downstream fine-tuning approaches use synthetic CSW data due to a lack of available datasets. Aguilar et al. (2021) propose a character-based subword module (char2subword) of the mBERT that learns the subword embedding that is suitable for modeling the noisy CSW text. Winata et al. (2021a) compare the performance of the multilingual LM versus the language-specific LM for CSW context. While XLM-R provides the best result, it is also computationally heavy. There needed to be more exploration of larger models. We see that pre-trained LMs provide better empirical results on current benchmark tasks and enables an end-to-end approach. Therefore, one can theoretically work on CSW tasks without any linguistic understanding of the language, assuming the dataset for model finetuning is available. However, the downside is that there is little understanding of how and when the LMs would fail, thus we encourage more interpretability work on these LMs in CSW setting.  et al., 2023), especially on different CSW variations. CSW style can vary in different regions of the world, and it would be interesting to gather more datasets on unexplored and unknown styles, which can be useful for further research and investigation on linguistics and NLP. Therefore, one future direction is to broaden the language scope of CSW research.","sent1: Following general NLP trends, we see the adoption of neural methods and pre-trained models growing in popularity over time.
sent2: In contrast, the statistical and rule-based approaches are diminishing.
sent3: Compared to ISCA, we see more adaptation of the pre-training model.
sent4: This is because ACL work is more text-based focused, where pre-trained LMs are more widely available.
sent5: Neural-Based Models Figure 5 shows that the trend of using neural-based models started in 2013, and the usage of rule/linguistic constraint and statistical methods diminished gradually through time, but they are still used even with a low percentage.
sent6: RNN and LSTM architectures are commonly used in sequence modeling, such as language modeling (Adel et al., 2013;Vu and Schultz, 2014;Adel et al., 2014c;Winata et al., 2018a;Garg et al., 2018a;Winata et al., 2019c) and CSW identification (Samih et al., 2016a).
sent7: DNN-based and hybrid HMM-DNN models are used in speech recognition models .
sent8: Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.
sent9: Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).
sent10: A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).
sent11: A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).
sent12: Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021).
sent13: Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b).
sent14: In the speech domain, Lovenia et al. (2022) utilize wav2vec 2.0 (Baevski et al., 2020) as a starting model before fine-tuning.
sent15: Language Models Many pre-trained model approaches utilize multilingual LMs, such as mBERT or XLM-R to deal with CSW data (Khanuja et al., 2020b;Aguilar and Solorio, 2020;Pant and Dadu, 2020;Patwa et al., 2020;Winata et al., 2021a).
sent16: These models are often fine-tuned with the downstream task or with CSW text to better adapt to the languages.
sent17: Some downstream fine-tuning approaches use synthetic CSW data due to a lack of available datasets.
sent18: Aguilar et al. (2021) propose a character-based subword module (char2subword) of the mBERT that learns the subword embedding that is suitable for modeling the noisy CSW text.
sent19: Winata et al. (2021a) compare the performance of the multilingual LM versus the language-specific LM for CSW context.
sent20: While XLM-R provides the best result, it is also computationally heavy.
sent21: There needed to be more exploration of larger models.
sent22: We see that pre-trained LMs provide better empirical results on current benchmark tasks and enables an end-to-end approach.
sent23: Therefore, one can theoretically work on CSW tasks without any linguistic understanding of the language, assuming the dataset for model finetuning is available.
sent24: However, the downside is that there is little understanding of how and when the LMs would fail, thus we encourage more interpretability work on these LMs in CSW setting.  et al., 2023), especially on different CSW variations.
sent25: CSW style can vary in different regions of the world, and it would be interesting to gather more datasets on unexplored and unknown styles, which can be useful for further research and investigation on linguistics and NLP.
sent26: Therefore, one future direction is to broaden the language scope of CSW research.","1. What trend is observed in the adoption of neural methods and pre-trained models in NLP? sent1
    1.1. How do statistical and rule-based approaches compare to neural methods in terms of popularity? sent2
    1.2. How does the adaptation of pre-training models differ between ISCA and ACL work? sent3
        1.2.1. Why is there more adaptation of pre-training models in ACL work? sent4
    1.3. When did the trend of using neural-based models start, and how has the usage of rule/linguistic constraint and statistical methods changed over time? sent5
2. What architectures are commonly used in sequence modeling and CSW identification? sent6
3. What models are used in speech recognition? sent7
4. How are pre-trained embeddings used in neural-based approaches? sent8
    4.1. What are some common pre-trained embeddings used in the literature? sent9
    4.2. What is a standard method to utilize monolingual embeddings? sent10
    4.3. What recent approach is used to merge embeddings and form metaembeddings? sent11
    4.4. How have character-based embeddings been explored in the literature? sent12
    4.5. What approach is used to train bilingual embeddings? sent13
5. How is wav2vec 2.0 utilized in the speech domain? sent14
6. What multilingual LMs are used to deal with CSW data? sent15
    6.1. How are these models often fine-tuned? sent16
    6.2. Why do some downstream fine-tuning approaches use synthetic CSW data? sent17
    6.3. What does Aguilar et al. (2021) propose for modeling noisy CSW text? sent18
    6.4. What comparison is made by Winata et al. (2021a) regarding multilingual and language-specific LMs? sent19
        6.4.1. What is noted about XLM-R's performance and computational requirements? sent20
7. What is noted about the exploration of larger models? sent21
8. What benefits do pre-trained LMs provide on current benchmark tasks? sent22
    8.1. What theoretical possibility do pre-trained LMs offer for CSW tasks? sent23
    8.2. What is a downside of using pre-trained LMs, and what is encouraged to address this? sent24
9. How can CSW style vary, and what is suggested for future research? sent25
    9.1. What is a proposed future direction for CSW research? sent26","Question: How are pre-trained embeddings utilized in neural-based approaches for code-switching tasks?

Supporting sentence: sent8, sent9, sent10, sent11, sent12, sent13",How are pre-trained embeddings utilized in neural-based approaches for code-switching tasks?,"sent8, sent9, sent10, sent11, sent12, sent13",2,implement,"Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.

Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).

A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).

A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).

Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021).

Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b).","Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.

Common pre-trained embeddings used in the literature include monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).

A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).

A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).

Character-based embeddings have also been explored to address out-of-vocabulary issues in word embeddings (Winata et al., 2018b; Attia et al., 2018; Aguilar et al., 2021).

Another approach is to train bilingual embeddings using real and synthetic code-switching data (Pratapa et al., 2018b).","Question:

How are pre-trained embeddings utilized in neural-based approaches for code-switching tasks?

Answer:

Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.

Common pre-trained embeddings used in the literature include monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).

A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).

A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).

Character-based embeddings have also been explored to address out-of-vocabulary issues in word embeddings (Winata et al., 2018b; Attia et al., 2018; Aguilar et al., 2021).

Another approach is to train bilingual embeddings using real and synthetic code-switching data (Pratapa et al., 2018b).","Question:

How are pre-trained embeddings utilized in neural-based approaches for code-switching tasks?

Answer:

Pre-trained Embeddings Pre-trained embeddings are used to complement neural-based approaches by initializing the embedding layer.

Common pre-trained embeddings used in the literature are monolingual subword-based embeddings, Fast-Text (Joulin et al., 2016), and aligned-embeddings MUSE (Conneau et al., 2017).

A standard method to utilize monolingual embeddings is to concatenate or sum two or more embeddings from different languages (Trivedi et al., 2018).

A more recent approach is to apply an attention mechanism to merge embeddings and form metaembeddings (Winata et al., 2019a,b).

Characterbased embeddings have also been explored in the literature to address the out-of-vocabulary issues on word-embeddings (Winata et al., 2018b;Attia et al., 2018;Aguilar et al., 2021).

Another approach is to train bilingual embeddings using real and synthetic CSW data (Pratapa et al., 2018b)."
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,Self-attention heads,7,"Attention is widely considered to be useful for understanding Transformer models, and several studies proposed classification of attention head types:

• attending to the word itself, to previous/next words and to the end of the sentence (Raganato and Tiedemann, 2018);

• attending to previous/next tokens,    (Kovaleva et al., 2019) According to Clark et al. (2019), ""attention weight has a clear meaning: how much a particular word will be weighted when computing the next representation for the current word"". However, Kovaleva et al. (2019) showed that most selfattention heads do not directly encode any nontrivial linguistic information, since less than half of them had the ""heterogeneous"" pattern 2 . Much of the model encoded the vertical pattern (attention to [CLS], [SEP], and punctuation tokens), consistent with the observations by Clark et al. (2019). This apparent redundancy must be related to the overparametrization issue (see section 7).

Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends a lot to [SEP] and punctuation. Clark et al. (2019) hypothesize that periods and commas are simply almost as frequent as [CLS] and [SEP], and the model learns to rely on them. They suggest also that the function of [SEP] might be one of ""no-op"", a signal to ignore the head if its pattern is not applicable to the current case.

[SEP] gets increased attention starting in layer 5, but its importance for prediction drops. If this hypothesis is correct, attention probing studies that excluded the [SEP] and [CLS] tokens (as e.g.  and Htut et al. (2019)) should perhaps be revisited.

Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.

Some BERT heads seem to specialize in certain types of syntactic relations. Htut et al.

(2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions. The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in obj role more than the positional baseline. The evidence for nsubj, advmod, and amod has some variation between these two studies. The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in machine translation context. Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.

Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax (see subsection 4.1).  present evidence that attention weights are weak indicators of subjectverb agreement and reflexive anafora. Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.

Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system,. Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks. Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998). Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","sent1: Attention is widely considered to be useful for understanding Transformer models, and several studies proposed classification of attention head types:• attending to the word itself, to previous/next words and to the end of the sentence (Raganato and Tiedemann, 2018);• attending to previous/next tokens,    (Kovaleva et al., 2019)
sent2: According to Clark et al. (2019), ""attention weight has a clear meaning: how much a particular word will be weighted when computing the next representation for the current word"".
sent3: However, Kovaleva et al. (2019) showed that most selfattention heads do not directly encode any nontrivial linguistic information, since less than half of them had the ""heterogeneous"" pattern 2 .
sent4: Much of the model encoded the vertical pattern (attention to [CLS], [SEP], and punctuation tokens), consistent with the observations by Clark et al. (2019).
sent5: This apparent redundancy must be related to the overparametrization issue (see section 7).
sent6: Attention to [CLS] is easy to interpret as attention to an aggregated sentence-level representation, but BERT also attends a lot to [SEP] and punctuation.
sent7: Clark et al. (2019) hypothesize that periods and commas are simply almost as frequent as [CLS] and [SEP], and the model learns to rely on them.
sent8: They suggest also that the function of [SEP] might be one of ""no-op"", a signal to ignore the head if its pattern is not applicable to the current case.
sent9: [SEP] gets increased attention starting in layer 5, but its importance for prediction drops.
sent10: If this hypothesis is correct, attention probing studies that excluded the [SEP] and [CLS] tokens (as e.g.  and Htut et al. (2019)) should perhaps be revisited.
sent11: Proceeding to the analysis of the ""heterogeneous"" self-attention pattern, a number of studies looked for specific BERT heads with linguistically interpretable functions.
sent12: Some BERT heads seem to specialize in certain types of syntactic relations.
sent13: Htut et al.(2019) and Clark et al. (2019) report that there are BERT heads that attended significantly more than a random baseline to words in certain syntactic positions.
sent14: The datasets and methods used in these studies differ, but they both find that there are heads that attend to words in obj role more than the positional baseline.
sent15: The evidence for nsubj, advmod, and amod has some variation between these two studies.
sent16: The overall conclusion is also supported by Voita et al. (2019)'s data for the base Transformer in machine translation context.
sent17: Hoover et al. (2019) hypothesize that even complex dependencies like dobj are encoded by a combination of heads rather than a single head, but this work is limited to qualitative analysis.Both Clark et al. (2019) and Htut et al. (2019) conclude that no single head has the complete syntactic tree information, in line with evidence of partial knowledge of syntax (see subsection 4.1).
sent18: present evidence that attention weights are weak indicators of subjectverb agreement and reflexive anafora.
sent19: Instead of serving as strong pointers between tokens that should be related, BERT's self-attention weights were close to a uniform attention baseline, but there was some sensitivity to different types of distractors coherent with psycholinguistic data.
sent20: Clark et al. (2019) identify a BERT head that can be directly used as a classifier to perform coreference resolution on par with a rule-based system,.
sent21: Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.
sent22: Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).
sent23: Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","1. Why is attention considered useful for understanding Transformer models? sent1
    1.1. What are some proposed classifications of attention head types? sent1
2. What does Clark et al. (2019) say about the meaning of attention weight? sent2
3. What did Kovaleva et al. (2019) find about most self-attention heads? sent3
4. What pattern did much of the model encode, according to Clark et al. (2019)? sent4
5. What issue is related to the apparent redundancy in attention patterns? sent5
6. How is attention to [CLS] interpreted, and what other tokens does BERT attend to? sent6
7. What hypothesis do Clark et al. (2019) propose about periods and commas? sent7
8. What is suggested about the function of [SEP]? sent8
9. How does attention to [SEP] change across layers, and what implication does this have for attention probing studies? sent9, sent10
10. What have studies found about the ""heterogeneous"" self-attention pattern? sent11
    10.1. What do some BERT heads specialize in? sent12
    10.2. What did Htut et al. (2019) and Clark et al. (2019) report about BERT heads and syntactic positions? sent13
        10.2.1. What variation exists in evidence for different syntactic roles? sent14, sent15
    10.3. What overall conclusion is supported by Voita et al. (2019)? sent16
11. What hypothesis does Hoover et al. (2019) propose about complex dependencies? sent17
12. What evidence is presented about attention weights and linguistic indicators? sent18
13. How do BERT's self-attention weights compare to a uniform attention baseline? sent19
14. What did Clark et al. (2019) identify about a BERT head's use in coreference resolution? sent20
15. What did Kovaleva et al. (2019) show about attention heads and BERT's performance? sent21
16. What did Kovaleva et al. (2019) identify about self-attention maps and semantic relations? sent22
17. What did a head ablation study reveal about the importance of certain heads for BERT's success on GLUE tasks? sent23","Question: How do self-attention heads in BERT relate to semantic relations and task performance?

Supporting sentence: sent21, sent22, sent23",How do self-attention heads in BERT relate to semantic relations and task performance?,"sent21, sent22, sent23",2,implement,"Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads in base BERT where self-attention maps closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","Question:

How do self-attention heads in BERT relate to semantic relations and task performance?

Answer:

Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads in base BERT where self-attention maps closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks.","Question:

How do self-attention heads in BERT relate to semantic relations and task performance?

Answer:

Kovaleva et al. (2019) showed that even when attention heads specialize in tracking semantic relations, they do not necessarily contribute to BERT's performance on relevant tasks.

Kovaleva et al. (2019) identified two heads of base BERT, in which self-attention maps were closely aligned with annotations of core frame semantic relations (Baker et al., 1998).

Although such relations should have been instrumental to tasks such as inference, a head ablation study showed that these heads were not essential for BERT's success on GLUE tasks."
234093015,A Survey of Data Augmentation Approaches for NLP,https://www.semanticscholar.org/paper/63d8426ba1f51a8525dd19fd8ec92934ec71aea5,Example Interpolation Techniques,5,"Another class of DA techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples. This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA). Ensuing work has explored interpolating inner components (Verma et al., 2019;Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).

Another class of extensions of MIXUP which has been growing in the vision community attempts to fuse raw input image pairs together into a single 2 Table 1 compares several DA methods by various aspects relating to their applicability, dependencies, and requirements. Figure 2: Dependency tree morphing DA applied to a Turkish sentence, Şahin and Steedman (2018) input image, rather than improve the continuous interpolation mechanism. Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017) and COPY-PASTE (Ghiasi et al., 2020). For instance, CUTMIX replaces a small sub-region of Image A with a patch sampled from Image B, with the labels mixed in proportion to sub-region sizes. There is potential to borrow ideas and inspiration from these works for NLP, e.g. for multimodal work involving both images and text (see ""Multimodal challenges"" in §6).

A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs. This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c). Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others. SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α). The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).","sent1: Another class of DA techniques, pioneered by MIXUP (Zhang et al., 2017), interpolates the inputs and labels of two or more real examples.
sent2: This class of techniques is also sometimes referred to as Mixed Sample Data Augmentation (MSDA).
sent3: Ensuing work has explored interpolating inner components (Verma et al., 2019;Faramarzi et al., 2020), more general mixing schemes (Guo, 2020), and adding adversaries (Beckham et al., 2019).
sent4: Another class of extensions of MIXUP which has been growing in the vision community attempts to fuse raw input image pairs together into a single 2 Table 1 compares several DA methods by various aspects relating to their applicability, dependencies, and requirements.
sent5: Figure 2: Dependency tree morphing DA applied to a Turkish sentence, Şahin and Steedman (2018) input image, rather than improve the continuous interpolation mechanism.
sent6: Examples of this paradigm include CUTMIX (Yun et al., 2019), CUTOUT (De-Vries and Taylor, 2017) and COPY-PASTE (Ghiasi et al., 2020).
sent7: For instance, CUTMIX replaces a small sub-region of Image A with a patch sampled from Image B, with the labels mixed in proportion to sub-region sizes.
sent8: There is potential to borrow ideas and inspiration from these works for NLP, e.g. for multimodal work involving both images and text (see ""Multimodal challenges"" in §6).
sent9: A bottleneck to using MIXUP for NLP tasks was the requirement of continuous inputs.
sent10: This has been overcome by mixing embeddings or higher hidden layers (Chen et al., 2020c).
sent11: Later variants propose speech-tailored mixing schemes (Jindal et al., 2020b) and interpolation with adversarial examples (Cheng et al., 2020), among others.
sent12: SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α).
sent13: The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).","1. What is another class of data augmentation techniques pioneered by MIXUP? sent1
    1.1. What is this class of techniques sometimes referred to as? sent2
    1.2. What have ensuing works explored in relation to MIXUP? sent3
    1.3. What is another class of MIXUP extensions growing in the vision community? sent4
        1.3.1. Can you provide examples of this paradigm? sent6
            1.3.1.1. How does CUTMIX work as an example of this paradigm? sent7
    1.4. What potential does this paradigm have for NLP? sent8
2. What was a bottleneck to using MIXUP for NLP tasks, and how was it overcome? sent9, sent10
3. What later variants of MIXUP have been proposed? sent11
4. How does SEQ2MIXUP generalize MIXUP for sequence transduction tasks? sent12
    4.1. Which version of SEQ2MIXUP is found to outperform the other? sent13","Question: How has SEQ2MIXUP been adapted for sequence transduction tasks, and which version performs better?

Supporting sentence: sent12, sent13","How has SEQ2MIXUP been adapted for sequence transduction tasks, and which version performs better?","sent12, sent13",2,implement,"SEQ2MIXUP (Guo et al., 2020) generalizes MIXUP for sequence transduction tasks in two ways -the ""hard"" version samples a binary mask (from a Bernoulli with a β(α, α) prior) and picks from one of two sequences at each token position, while the ""soft"" version softly interpolates between sequences based on a coefficient sampled from β(α, α).

The ""soft"" version is found to outperform the ""hard"" version and earlier interpolation-based techniques like SWITCHOUT (Wang et al., 2018a).",N/A,"Question:

How has SEQ2MIXUP been adapted for sequence transduction tasks, and which version performs better?

Answer:

N/A","Question:

How has SEQ2MIXUP been adapted for sequence transduction tasks, and which version performs better?

Answer:

N/A"
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Benchmarks and Metrics,7,"To evaluate the NL2Code task, high-quality benchmarks and reliable metrics are fundamental and essential. In this section, we provide a brief overview of current benchmarks and metrics, as well as our observations and the open challenges.

We summarize 17 well-studied NL2Code benchmarks in Table 3, where we can find that each of these benchmarks has its own characteristics regarding size, language, complexity, and scenario. We observe that most benchmarks contain a limited number of instances. For example, the widely used HumanEval and MBPP have 164 and 974 instances, respectively. This is because these benchmarks are typically hand-written to ensure that LLMs have not seen them during training. In the era of large language models, it is crucial to avoid data leak-age when creating new benchmarks. Additionally, most current benchmarks have their problem descriptions in English and code solutions in Python.

Recently, several multi-lingual benchmarks have been proposed, such as MBXP (Athiwaratkun et al., 2022), HumanEvalX (Zheng et al., 2023), and Mul-tiPL (Cassano et al., 2022), which cover multiple programming languages, and ODEX (Wang et al., 2022c), which covers multiple natural languages. Details of multi-lingual benchmarks are listed in Appendix Table 7. Furthermore, benchmarks have been proposed for other practical scenarios, such as data science (Lai et al., 2022), public library (Zan et al., 2022b), private library (Zan et al., 2022a), multi-turn program synthesis (Nijkamp et al., 2023), and code security (Siddiq and msiddiq, 2022). For execution-based benchmarks, comprehensive test cases with complete coverage of the generated program can ensure the trustworthiness of evaluation results. As a reference, the average number of test cases for each benchmark, as well as the length statistics of the problem descriptions and solutions are also provided in Table 3.

Manually evaluating the generated code is impractical, which calls for the need for automatic metrics. The above mentioned benchmarks all provide test cases for execution-based evaluation, where metrics such as pass@k (Chen et al., 2021), n@k (Li et al., 2022b), test case aver-age (Hendrycks et al., 2021), and execution accuracy (Rajkumar et al., 2022) can be used. However, this approach has stringent requirements for the quality of test cases and can only evaluate executable code. For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code. So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.","sent1: To evaluate the NL2Code task, high-quality benchmarks and reliable metrics are fundamental and essential.
sent2: In this section, we provide a brief overview of current benchmarks and metrics, as well as our observations and the open challenges.
sent3: We summarize 17 well-studied NL2Code benchmarks in Table 3, where we can find that each of these benchmarks has its own characteristics regarding size, language, complexity, and scenario.
sent4: We observe that most benchmarks contain a limited number of instances.
sent5: For example, the widely used HumanEval and MBPP have 164 and 974 instances, respectively.
sent6: This is because these benchmarks are typically hand-written to ensure that LLMs have not seen them during training.
sent7: In the era of large language models, it is crucial to avoid data leak-age when creating new benchmarks.
sent8: Additionally, most current benchmarks have their problem descriptions in English and code solutions in Python.
sent9: Recently, several multi-lingual benchmarks have been proposed, such as MBXP (Athiwaratkun et al., 2022), HumanEvalX (Zheng et al., 2023), and Mul-tiPL (Cassano et al., 2022), which cover multiple programming languages, and ODEX (Wang et al., 2022c), which covers multiple natural languages.
sent10: Details of multi-lingual benchmarks are listed in Appendix Table 7.
sent11: Furthermore, benchmarks have been proposed for other practical scenarios, such as data science (Lai et al., 2022), public library (Zan et al., 2022b), private library (Zan et al., 2022a), multi-turn program synthesis (Nijkamp et al., 2023), and code security (Siddiq and msiddiq, 2022).
sent12: For execution-based benchmarks, comprehensive test cases with complete coverage of the generated program can ensure the trustworthiness of evaluation results.
sent13: As a reference, the average number of test cases for each benchmark, as well as the length statistics of the problem descriptions and solutions are also provided in Table 3.
sent14: Manually evaluating the generated code is impractical, which calls for the need for automatic metrics.
sent15: The above mentioned benchmarks all provide test cases for execution-based evaluation, where metrics such as pass@k (Chen et al., 2021), n@k (Li et al., 2022b), test case aver-age (Hendrycks et al., 2021), and execution accuracy (Rajkumar et al., 2022) can be used.
sent16: However, this approach has stringent requirements for the quality of test cases and can only evaluate executable code.
sent17: For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code.
sent18: So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.","1. Why are high-quality benchmarks and reliable metrics essential for evaluating the NL2Code task? sent1
2. What does the section provide an overview of? sent2
3. How many NL2Code benchmarks are summarized, and what characteristics do they have? sent3
    3.1. What is observed about most benchmarks in terms of the number of instances? sent4
        3.1.1. Can you provide examples of benchmarks with a limited number of instances? sent5
        3.1.2. Why do these benchmarks typically have a limited number of instances? sent6
    3.2. Why is it crucial to avoid data leakage when creating new benchmarks? sent7
    3.3. What is the common language used for problem descriptions and code solutions in most current benchmarks? sent8
    3.4. What are some examples of recently proposed multi-lingual benchmarks? sent9
        3.4.1. Where can details of multi-lingual benchmarks be found? sent10
    3.5. What other practical scenarios have benchmarks been proposed for? sent11
4. What ensures the trustworthiness of evaluation results in execution-based benchmarks? sent12
    4.1. What additional information is provided in Table 3 regarding benchmarks? sent13
5. Why is there a need for automatic metrics in evaluating generated code? sent14
    5.1. What metrics are used for execution-based evaluation? sent15
    5.2. What are the limitations of execution-based evaluation? sent16
    5.3. What metrics are used for non-executable code, and what is their limitation? sent17
6. What are some open challenges in designing metrics for code evaluation? sent18","Question: What are the limitations of current metrics used for evaluating non-executable code in NL2Code tasks?

Supporting sentence: sent17, sent18",What are the limitations of current metrics used for evaluating non-executable code in NL2Code tasks?,"sent17, sent18",4,implement,"For non-executable code, metrics like BLEU (Papineni et al., 2002), ROUGE (Lin, 2004), andCodeBLEU (Ren et al., 2020) are used, while they can not precisely evaluate the correctness of the code.

So far, there are many open challenges in designing metrics to evaluate various aspects of code, such as vulnerability, maintainability, clarity, execution complexity, and stability.",N/A,"Question:

What are the limitations of current metrics used for evaluating non-executable code in NL2Code tasks?

Answer:

N/A","Question:

What are the limitations of current metrics used for evaluating non-executable code in NL2Code tasks?

Answer:

N/A"
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Single-Domain Datasets,14,"Single-domain text-to-SQL datasets typically collect question-SQL pairs for a single database in some real-world tasks, including early ones such as Academic (Li and Jagadish, 2014), Advising (Finegan-Dollak et al., 2018), ATIS (Price, 1990;Dahl et al., 1994), GeoQuery (Zelle and Mooney, 1996), Yelp and IMDB (Yaghmazadeh et al., 2017), Scholar (Iyer et al., 2017) and Restaurants (Tang and Mooney, 2000;Popescu et al., 2003), as well as recent ones such as SEDE (Hazoom et al., 2021), ESQL (Chen et al., 2021a) and MIMICSQL (Wang et al., 2020d). These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples. Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.

domains (Finegan-Dollak et al., 2018;Yu et al., 2018c). However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020). Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.

Appendix B gives a detailed discussion on domain knowledge and dataset convention, and concrete text-to-SQL examples.

Large Scale Cross-domain Datasets Large cross-domain datasets such as WikiSQL (Zhong et al., 2017) and Spider (Yu et al., 2018c) are proposed to better evaluate deep neural models. Wik-iSQL uses tables extracted from Wikipedia and lets annotators paraphrase questions generated for the tables. Compared to other datasets, WikiSQL is an order of magnitude larger, containing 80,654 natural utterances in total (Zhong et al., 2017). However, WikiSQL contains only simple SQL queries, and only a single table is queried within each SQL query (Yu et al., 2018c). Yu et al. (2018c) propose Spider, which contains 200 databases with an average of 5 tables for each database, to test models' performance on complicated unseen SQL queries and their ability to generalize to new domains. Furthermore, researchers expand Spider to study various issues of their inter-est (Lei et al., 2020;Zeng et al., 2020;Gan et al., 2021b;Taniguchi et al., 2021;Gan et al., 2021a).

Besides, researchers build several large-scale text-to-SQL datasets in different languages such as CSpider (Min et al., 2019a), TableQA (Sun et al., 2020), DuSQL (Wang et al., 2020c) in Chinese, ViText2SQL (Tuan Nguyen et al., 2020) in Vietnamese, and PortugueseSpider (José and Cozman, 2021) in Portuguese. Given that human translation has shown to be more accurate than machine translation (Min et al., 2019a), these datasets are annotated mainly by human experts based on the English Spider dataset. These Spider-based datasets can serve as potential resources for multi-lingual text-to-SQL research.

Other Datasets Several context-dependent textto-SQL datasets have been proposed, which involve user interactions with the text-to-SQL system in English (Price, 1990;Dahl et al., 1994;Yu et al., 2019a,b) and Chinese (Guo et al., 2021). In addition, researchers collect datasets to study questions in text-to-SQL being answerable or not (Zhang et al., 2020), lexicon-level mapping (Shi et al., 2020b) and cross-domain evaluation for real Web databases (Lee et al., 2021).

Appendix C.1 discusses more details about datasets mentioned in § 2.","sent1: Single-domain text-to-SQL datasets typically collect question-SQL pairs for a single database in some real-world tasks, including early ones such as Academic (Li and Jagadish, 2014), Advising (Finegan-Dollak et al., 2018), ATIS (Price, 1990;Dahl et al., 1994), GeoQuery (Zelle and Mooney, 1996), Yelp and IMDB (Yaghmazadeh et al., 2017), Scholar (Iyer et al., 2017) and Restaurants (Tang and Mooney, 2000;Popescu et al., 2003), as well as recent ones such as SEDE (Hazoom et al., 2021), ESQL (Chen et al., 2021a) and MIMICSQL (Wang et al., 2020d).
sent2: These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.
sent3: Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.domains (Finegan-Dollak et al., 2018;Yu et al., 2018c).
sent4: However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).
sent5: Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.
sent6: Appendix B gives a detailed discussion on domain knowledge and dataset convention, and concrete text-to-SQL examples.
sent7: Large Scale Cross-domain Datasets Large cross-domain datasets such as WikiSQL (Zhong et al., 2017) and Spider (Yu et al., 2018c) are proposed to better evaluate deep neural models.
sent8: Wik-iSQL uses tables extracted from Wikipedia and lets annotators paraphrase questions generated for the tables.
sent9: Compared to other datasets, WikiSQL is an order of magnitude larger, containing 80,654 natural utterances in total (Zhong et al., 2017).
sent10: However, WikiSQL contains only simple SQL queries, and only a single table is queried within each SQL query (Yu et al., 2018c).
sent11: Yu et al. (2018c) propose Spider, which contains 200 databases with an average of 5 tables for each database, to test models' performance on complicated unseen SQL queries and their ability to generalize to new domains.
sent12: Furthermore, researchers expand Spider to study various issues of their inter-est (Lei et al., 2020;Zeng et al., 2020;Gan et al., 2021b;Taniguchi et al., 2021;Gan et al., 2021a).
sent13: Besides, researchers build several large-scale text-to-SQL datasets in different languages such as CSpider (Min et al., 2019a), TableQA (Sun et al., 2020), DuSQL (Wang et al., 2020c) in Chinese, ViText2SQL (Tuan Nguyen et al., 2020) in Vietnamese, and PortugueseSpider (José and Cozman, 2021) in Portuguese.
sent14: Given that human translation has shown to be more accurate than machine translation (Min et al., 2019a), these datasets are annotated mainly by human experts based on the English Spider dataset.
sent15: These Spider-based datasets can serve as potential resources for multi-lingual text-to-SQL research.
sent16: Other Datasets Several context-dependent textto-SQL datasets have been proposed, which involve user interactions with the text-to-SQL system in English (Price, 1990;Dahl et al., 1994;Yu et al., 2019a,b) and Chinese (Guo et al., 2021).
sent17: In addition, researchers collect datasets to study questions in text-to-SQL being answerable or not (Zhang et al., 2020), lexicon-level mapping (Shi et al., 2020b) and cross-domain evaluation for real Web databases (Lee et al., 2021).
sent18: Appendix C.1 discusses more details about datasets mentioned in § 2.","1. What do single-domain text-to-SQL datasets typically collect? sent1
    1.1. What is a characteristic of early single-domain datasets? sent2
    1.2. Why might text-to-SQL models trained on single-domain datasets fail to generalize? sent3
    1.3. What valuable aspects do single-domain datasets contain despite their limitations? sent4
        1.3.1. Why are single-domain datasets still valuable for evaluating models? sent5
        1.3.2. Where can a detailed discussion on domain knowledge and dataset convention be found? sent6
2. What are large-scale cross-domain datasets proposed for? sent7
    2.1. How is WikiSQL constructed and what is its size? sent8, sent9
        2.1.1. What limitation does WikiSQL have? sent10
    2.2. What is the purpose of the Spider dataset? sent11
        2.2.1. How have researchers expanded the Spider dataset? sent12
    2.3. What are some examples of large-scale text-to-SQL datasets in different languages? sent13
        2.3.1. Why are these datasets mainly annotated by human experts? sent14
        2.3.2. What potential do Spider-based datasets have? sent15
3. What are some other types of text-to-SQL datasets mentioned? sent16
    3.1. What additional research topics do other datasets focus on? sent17
    3.2. Where can more details about the datasets be found? sent18","Question: What are the limitations of early single-domain text-to-SQL datasets, and why are they still valuable?

Supporting sentence: sent2, sent3, sent4, sent5","What are the limitations of early single-domain text-to-SQL datasets, and why are they still valuable?","sent2, sent3, sent4, sent5",3,implement,"These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.

Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.domains (Finegan-Dollak et al., 2018;Yu et al., 2018c).

However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions.","Early single-domain text-to-SQL datasets are usually limited in size, containing only a few hundred to a few thousand examples.

Due to the limited size and similar SQL patterns in both training and testing phases, text-to-SQL models trained on these single-domain datasets can achieve decent performance by memorizing the SQL patterns, but they fail to generalize to unseen SQL queries or queries from other domains (Finegan-Dollak et al., 2018; Yu et al., 2018c).

However, these datasets are still valuable because they are adapted from real-life applications and contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

They remain valuable for evaluating models' ability to generalize to new domains and for exploring how to incorporate domain knowledge and dataset conventions into model predictions.","Question:

What are the limitations of early single-domain text-to-SQL datasets, and why are they still valuable?

Answer:

Early single-domain text-to-SQL datasets are usually limited in size, containing only a few hundred to a few thousand examples.

Due to the limited size and similar SQL patterns in both training and testing phases, text-to-SQL models trained on these single-domain datasets can achieve decent performance by memorizing the SQL patterns, but they fail to generalize to unseen SQL queries or queries from other domains (Finegan-Dollak et al., 2018; Yu et al., 2018c).

However, these datasets are still valuable because they are adapted from real-life applications and contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

They remain valuable for evaluating models' ability to generalize to new domains and for exploring how to incorporate domain knowledge and dataset conventions into model predictions.","Question:

What are the limitations of early single-domain text-to-SQL datasets, and why are they still valuable?

Answer:

These single-domain datasets, particularly the early ones, are usually limited in size, containing only a few hundred to a few thousand examples.

Because of the limited size and similar SQL patterns in training and testing phases, text-to-SQL models that are trained on these single-domain datasets can achieve decent performance by simply memorizing the SQL patterns and fail to generalize to unseen SQL queries or SQL queries from other unless otherwise specified.domains (Finegan-Dollak et al., 2018;Yu et al., 2018c).

However, since these datasets are adapted from real-life applications, most of them contain domain knowledge (Gan et al., 2021b) and dataset conventions (Suhr et al., 2020).

Thus, they are still valuable to evaluate models' ability to generalize to new domains and explore how to incorporate domain knowledge and dataset convention to model predictions."
225062337,A Survey on Recent Approaches for Natural Language Processing in Low-Resource Scenarios,https://www.semanticscholar.org/paper/455cdafd55a5b5ddefa029bf97801327e142646d,Learning with Noisy Labels,12,"The above-presented methods allow obtaining labeled data quicker and cheaper than manual annotations. These labels tend, however, to contain more errors. Even though more training data is available, training directly on this noisily-labeled data can actually hurt the performance. Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision. We categorize these into two ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled. This often includes training a classifier to make the filtering decision. The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019). Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled. A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b). The classifier is no longer trained directly on the noisily-labeled data. Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution. This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels. In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing. In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances. Rehbein and Ruppenhofer (2017), Lison et al. (2020) and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.

In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method. Partial annotation learning Nooralahzadeh et al., 2019;Cao et al., 2019) takes this into account explicitly. Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019) or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).","sent1: The above-presented methods allow obtaining labeled data quicker and cheaper than manual annotations.
sent2: These labels tend, however, to contain more errors.
sent3: Even though more training data is available, training directly on this noisily-labeled data can actually hurt the performance.
sent4: Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision.
sent5: We categorize these into two ideas: noise filtering and noise modeling.
sent6: Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.
sent7: This often includes training a classifier to make the filtering decision.
sent8: The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019).
sent9: Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).
sent10: The noise in the labels can also be modeled.
sent11: A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b).
sent12: The classifier is no longer trained directly on the noisily-labeled data.
sent13: Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.
sent14: This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.
sent15: In Ye et al. (2019), the prediction is shifted from the noisy to the clean distribution during testing.
sent16: In Chen et al. (2020a), a group of reinforcement agents relabels noisy instances.
sent17: Rehbein and Ruppenhofer (2017), Lison et al. (2020) and Ren et al. (2020) leverage several sources of distant supervision and learn how to combine them.
sent18: In NER, the noise in distantly supervised labels tends to be false negatives, i.e., mentions of entities that have been missed by the automatic method.
sent19: Partial annotation learning Nooralahzadeh et al., 2019;Cao et al., 2019) takes this into account explicitly.
sent20: Related approaches learn latent variables (Jie et al., 2019), use constrained binary learning (Mayhew et al., 2019) or construct a loss assuming that only unlabeled positive instances exist (Peng et al., 2019).","1. What is the advantage of the above-presented methods for obtaining labeled data? sent1
    1.1. What is a downside of these labels? sent2
    1.2. How can training on noisily-labeled data affect performance? sent3
2. What approaches are used to handle noise in distant supervision? sent4
    2.1. How are these approaches categorized? sent5
        2.1.1. What do noise filtering methods do? sent6
            2.1.1.1. How is the filtering decision often made? sent7
            2.1.1.2. How can instances be removed from the training data? sent8
            2.1.1.3. What is an alternative to completely removing instances? sent9
        2.1.2. How can noise in the labels be modeled? sent10
            2.1.2.1. What is a common model used for noise modeling? sent11
            2.1.2.2. How does the training process change with noise modeling? sent12
            2.1.2.3. What is the role of the noise model in training? sent13
            2.1.2.4. How can the original classifier be interpreted in this context? sent14
            2.1.2.5. How is the prediction adjusted during testing according to Ye et al. (2019)? sent15
            2.1.2.6. How do reinforcement agents contribute to noise handling in Chen et al. (2020a)? sent16
3. How do Rehbein and Ruppenhofer (2017), Lison et al. (2020), and Ren et al. (2020) handle distant supervision? sent17
4. What is a common type of noise in NER with distantly supervised labels? sent18
    4.1. How is this type of noise addressed in partial annotation learning? sent19
5. What are some related approaches to handling noise in labels? sent20","Question: What methods are used to handle noise in distantly supervised NLP tasks, and how are they categorized?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14","What methods are used to handle noise in distantly supervised NLP tasks, and how are they categorized?","sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14",2,implement,"Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision.

We categorize these into two ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often includes training a classifier to make the filtering decision.

The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019).

Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b).

The classifier is no longer trained directly on the noisily-labeled data.

Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.

This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.","Many recent approaches for distant supervision in NLP tasks use noise handling methods to diminish the negative effects of distant supervision.

These methods can be categorized into two main ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often involves training a classifier to make the filtering decision.

The filtering can remove instances completely from the training data using methods such as a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or a reinforcement-based agent (Nooralahzadeh et al., 2019).

Alternatively, a soft filtering approach might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or based on an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common approach involves using a confusion matrix to estimate the relationship between clean and noisy labels (Fang and Cohn, 2016; Luo et al., 2017; Hedderich and Klakow, 2018; Paul et al., 2019; Lange et al., 2019a,c; Chen et al., 2019; Wang et al., 2019; Hedderich et al., 2021b).

Instead, the classifier is trained on data that has been adjusted to account for noise.

Instead, a noise model is appended to shift the noisy label distribution to the clean label distribution.

This approach can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.","Question:

What methods are used to handle noise in distantly supervised NLP tasks, and how are they categorized?

Answer:

Many recent approaches for distant supervision in NLP tasks use noise handling methods to diminish the negative effects of distant supervision.

These methods can be categorized into two main ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often involves training a classifier to make the filtering decision.

The filtering can remove instances completely from the training data using methods such as a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or a reinforcement-based agent (Nooralahzadeh et al., 2019).

Alternatively, a soft filtering approach might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or based on an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common approach involves using a confusion matrix to estimate the relationship between clean and noisy labels (Fang and Cohn, 2016; Luo et al., 2017; Hedderich and Klakow, 2018; Paul et al., 2019; Lange et al., 2019a,c; Chen et al., 2019; Wang et al., 2019; Hedderich et al., 2021b).

Instead, the classifier is trained on data that has been adjusted to account for noise.

Instead, a noise model is appended to shift the noisy label distribution to the clean label distribution.

This approach can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels.","Question:

What methods are used to handle noise in distantly supervised NLP tasks, and how are they categorized?

Answer:

Therefore, many recent approaches for distant supervision use a noise handling method to diminish the negative effects of distant supervision.

We categorize these into two ideas: noise filtering and noise modeling.

Noise filtering methods remove instances from the training data that have a high probability of being incorrectly labeled.

This often includes training a classifier to make the filtering decision.

The filtering can remove the instances completely from the training data, e.g., through a probability threshold (Jia et al., 2019), a binary classifier (Adel and Schütze, 2015; Onoe and Durrett, 2019; Huang and Du, 2019), or the use of a reinforcement-based agent Nooralahzadeh et al., 2019).

Alternatively, a soft filtering might be applied that re-weights instances according to their probability of being correctly labeled (Le and Titov, 2019) or an attention measure (Hu et al., 2019).

The noise in the labels can also be modeled.

A common model is a confusion matrix estimating the relationship between clean and noisy labels (Fang and Cohn, 2016;Luo et al., 2017;Hedderich and Klakow, 2018;Paul et al., 2019;Lange et al., 2019a,c;Chen et al., 2019;Wang et al., 2019;Hedderich et al., 2021b).

The classifier is no longer trained directly on the noisily-labeled data.

Instead, a noise model is appended which shifts the noisy to the (unseen) clean label distribution.

This can be interpreted as the original classifier being trained on a ""cleaned"" version of the noisy labels."
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Model and Training-based Approaches,6,"Pre-training Recent work has demonstrated pretraining as an effective way to improve NLP models' out-of-distribution robustness (Hendrycks et al., 2020a;Tu et al., 2020), potentially due to its self-supervised objective and the use of large amounts of diverse pre-training data that encourages generalization from a small number of examples that counter the spurious correlations. Tu et al. (2020) showed a few other factors can also contribute to robust accuracy, including larger model size, more fine-tuning data, and longer fine-tuning. A similar observation is made by Taori et al. (2020) in the vision domain, where the authors found training with larger and more diverse datasets offer better robustness consistently in multiple cases, compared to various robustness interventions proposed in the existing literature. In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021). Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.

When to Use Data-driven or Model-based Approaches? In many cases both the data and the model can contribute to a model's lack of robustness, hence data-driven and model-based approaches could be combined to further improve a model's robustness. One interesting phenomenon observed by (Liu et al., 2019) is to attribute models' robustness failures to blind spots in the training data, or the intrinsic learning ability of the model. The authors found that both patterns are possible: in some cases models can be inoculated via being exposed to a small amount of challenging data, similar to the data augmentation approaches mentioned in Section 5.1; on the other hand, some challenging patterns remain difficult which connects to the larger question around generalizability to unseen adversarial and counterfactual patterns (Huang et al., 2020;Jha et al., 2020;Joshi and He, 2021), which is relatively under-explored but deserves much attention.","sent1: Pre-training Recent work has demonstrated pretraining as an effective way to improve NLP models' out-of-distribution robustness (Hendrycks et al., 2020a;Tu et al., 2020), potentially due to its self-supervised objective and the use of large amounts of diverse pre-training data that encourages generalization from a small number of examples that counter the spurious correlations.
sent2: Tu et al. (2020) showed a few other factors can also contribute to robust accuracy, including larger model size, more fine-tuning data, and longer fine-tuning.
sent3: A similar observation is made by Taori et al. (2020) in the vision domain, where the authors found training with larger and more diverse datasets offer better robustness consistently in multiple cases, compared to various robustness interventions proposed in the existing literature.
sent4: In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021).
sent5: Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.
sent6: When to Use Data-driven or Model-based Approaches?
sent7: In many cases both the data and the model can contribute to a model's lack of robustness, hence data-driven and model-based approaches could be combined to further improve a model's robustness.
sent8: One interesting phenomenon observed by (Liu et al., 2019) is to attribute models' robustness failures to blind spots in the training data, or the intrinsic learning ability of the model.
sent9: The authors found that both patterns are possible: in some cases models can be inoculated via being exposed to a small amount of challenging data, similar to the data augmentation approaches mentioned in Section 5.1; on the other hand, some challenging patterns remain difficult which connects to the larger question around generalizability to unseen adversarial and counterfactual patterns (Huang et al., 2020;Jha et al., 2020;Joshi and He, 2021), which is relatively under-explored but deserves much attention.","1. How has pre-training been demonstrated to improve NLP models' out-of-distribution robustness? sent1
    1.1. What other factors can contribute to robust accuracy according to Tu et al. (2020)? sent2
    1.2. What similar observation was made by Taori et al. (2020) in the vision domain? sent3
2. What is group DRO and how does it relate to training strategies? sent4
    2.1. What are some strategies discussed in the extensions of DRO? sent5
3. When should data-driven or model-based approaches be used to improve model robustness? sent6
    3.1. How can data-driven and model-based approaches be combined to improve robustness? sent7
4. What phenomenon regarding models' robustness failures was observed by Liu et al. (2019)? sent8
    4.1. What did the authors find about patterns of robustness failures? sent9","Question: How do extensions of distributional robust optimization (DRO) identify minority samples to improve model robustness?

Supporting sentence: sent4, sent5",How do extensions of distributional robust optimization (DRO) identify minority samples to improve model robustness?,"sent4, sent5",2,implement,"In general, the training strategy with an emphasis on a subset of samples that are particularly hard for the model to learn is sometimes also referred to as group DRO (Sagawa et al., 2020a), as an extension of vanilla distributional robust optimization (DRO) (Ben-Tal et al., 2013;Duchi et al., 2021).

Extensions of DRO are mostly discussing the strategies on how to identify the samples considered as minority: Nam et al. (2020) trained two models in parallel, where the ""debiased"" model focuses on examples not learned by the ""biased"" model; Lahoti et al. (2020) used an adversary model to identify samples that are challenging to the main model; Liu et al. (2021) proposed to train the model a second time via up-weighting examples that have high training losses during the first time.",N/A,"Question:

How do extensions of distributional robust optimization (DRO) identify minority samples to improve model robustness?

Answer:

N/A","Question:

How do extensions of distributional robust optimization (DRO) identify minority samples to improve model robustness?

Answer:

N/A"
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Evaluation methods,8,"As noted in Section 2, the subjectivity of meeting summaries, stemming in part from the preference for abstractive summarization, complicates the evaluation task. Evaluation requires both verifying that the content in a system-based summary follows from the original transcript and measuring the overlap with a gold-standard summary. However, given the expressive freedom encouraged by abstractive approaches, checking for semantic entailment and overlap of summary-worthy content requires deep semantic understanding, not just recognition that the same words are used.

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries. If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap. Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text. Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results. Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate. Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.

Clearly, evaluation is itself a very challenging task. And we note that none of these metrics even touches on another central challenge for summary evaluation, namely that of factual consistency. When we summarize a meeting or detail decisions and actions items in our own words, it is important to get the facts straight. Otherwise, the resulting summaries are not reliable for an end user. While we do not know of current work that focuses on evaluation of factuality explicitly for the meeting domain, the study of factual consistency in summarization more generally is a budding research area that we discuss in Section 6.

In the absence of a clear winner for summary evaluation metrics, none of the alternatives has yet to be widely adopted. In our comparison of different summarization systems in Section 5, we therefore stick with ROUGE, which offers the additional advantage of conceptual simplicity and lower computational cost compared to metrics based on contextual embeddings and pretrained language models.","sent1: As noted in Section 2, the subjectivity of meeting summaries, stemming in part from the preference for abstractive summarization, complicates the evaluation task.
sent2: Evaluation requires both verifying that the content in a system-based summary follows from the original transcript and measuring the overlap with a gold-standard summary.
sent3: However, given the expressive freedom encouraged by abstractive approaches, checking for semantic entailment and overlap of summary-worthy content requires deep semantic understanding, not just recognition that the same words are used.
sent4: Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.
sent5: If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).
sent6: A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.
sent7: Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.
sent8: Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.
sent9: Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.
sent10: Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.
sent11: Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.
sent12: Clearly, evaluation is itself a very challenging task.
sent13: And we note that none of these metrics even touches on another central challenge for summary evaluation, namely that of factual consistency.
sent14: When we summarize a meeting or detail decisions and actions items in our own words, it is important to get the facts straight.
sent15: Otherwise, the resulting summaries are not reliable for an end user.
sent16: While we do not know of current work that focuses on evaluation of factuality explicitly for the meeting domain, the study of factual consistency in summarization more generally is a budding research area that we discuss in Section 6.
sent17: In the absence of a clear winner for summary evaluation metrics, none of the alternatives has yet to be widely adopted.
sent18: In our comparison of different summarization systems in Section 5, we therefore stick with ROUGE, which offers the additional advantage of conceptual simplicity and lower computational cost compared to metrics based on contextual embeddings and pretrained language models.","1. What complicates the evaluation task of meeting summaries? sent1
2. What are the requirements for evaluating system-based summaries? sent2
3. Why does evaluating abstractive summaries require deep semantic understanding? sent3
4. Why is the ROUGE metric considered unideal for assessing abstractive summaries? sent4
    4.1. Can you provide an example illustrating the limitations of the ROUGE metric? sent5
5. What is a reasonable way to improve over the ROUGE metric? sent6
    5.1. What are some recent efforts that pursue improvements over ROUGE? sent7
    5.2. How do DATScore and FrugalScore aim to improve performance? sent8
6. What do recent studies on meta-evaluation of these metrics show? sent9
    6.1. What do Peyrard (2019) and Bhandari et al. (2020a) find about the performance of these metrics? sent10
    6.2. What argument does Bhandari et al. (2020b) make regarding summary evaluation metrics? sent11
7. What is another central challenge for summary evaluation? sent13
    7.1. Why is factual consistency important in meeting summaries? sent14, sent15
    7.2. Is there current work focusing on the evaluation of factuality in the meeting domain? sent16
8. Why has none of the alternative summary evaluation metrics been widely adopted? sent17
9. Why does the paper stick with ROUGE for comparing different summarization systems? sent18","Question: What are the challenges and limitations of using ROUGE for evaluating abstractive meeting summaries?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11",What are the challenges and limitations of using ROUGE for evaluating abstractive meeting summaries?,"sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11",4,implement,"Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.

Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets.","The ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores system-produced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

For instance, ROUGE might assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than to one that outputs ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former conveys a different and incorrect meaning.

A reasonable approach to improving ROUGE would involve utilizing massive, pretrained, contextual word embeddings and focusing on lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference. Additionally, BARTScore (Yuan et al., 2021) calculates the log-likelihood of a summary being generated, based on the premise that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022; Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and address their limitations.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) found that metrics strongly disagree in ranking summaries from narrow scoring ranges, indicating a lack of consensus among metrics on which summary is superior, especially in the high scoring range where modern systems operate.

Bhandari et al. (2020b) argue that no single metric consistently correlates better with human judgment across all datasets, suggesting that a one-size-fits-all solution does not exist.","Question:

What are the challenges and limitations of using ROUGE for evaluating abstractive meeting summaries?

Answer:

The ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores system-produced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

For instance, ROUGE might assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than to one that outputs ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former conveys a different and incorrect meaning.

A reasonable approach to improving ROUGE would involve utilizing massive, pretrained, contextual word embeddings and focusing on lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference. Additionally, BARTScore (Yuan et al., 2021) calculates the log-likelihood of a summary being generated, based on the premise that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022; Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and address their limitations.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) found that metrics strongly disagree in ranking summaries from narrow scoring ranges, indicating a lack of consensus among metrics on which summary is superior, especially in the high scoring range where modern systems operate.

Bhandari et al. (2020b) argue that no single metric consistently correlates better with human judgment across all datasets, suggesting that a one-size-fits-all solution does not exist.","Question:

What are the challenges and limitations of using ROUGE for evaluating abstractive meeting summaries?

Answer:

Unfortunately, the ROUGE metric (Lin, 2004), which remains the standard for both meeting and general text summarization, scores systemproduced summaries based purely on surface lexicographic matches with a (usually single) gold summary, making it unideal for assessing abstractive summaries.

If we take the abstractive summary from Figure 1 (""Some part of the casing will be made of a spongy material"") as a gold example, ROUGE would assign a higher score to a system that produces ""Some part of the casing will be made of broccoli"" than one that output ""A portion of the outer layer will be constructed from a sponge-like material,"" even though the latter is a perfect reformulation of the gold summary, while the former says something very different (and false).

A reasonable way to try to improve over ROUGE would be to take advantage of massive, pretrained, contextual word embeddings and a notion of lexical similarity rather than strict lexical overlap.

Some recent efforts pursue this direction (Sai et al., 2022), including BERTScore (Zhang et al., 2020a) and MoverScore (Zhao et al., 2019a), which aim to measure the semantic distance between the contextualized mapping of a generated summary and the reference, or BARTScore (Yuan et al., 2021), which calculates the log-likelihood of a summary to have been generated, motivated by the fact that a good summary should have a high probability of being generated from a source text.

Building upon these methods, DATScore and FrugalScore (Eddine et al., 2022;Kamal Eddine et al., 2022) incorporate data augmentation and knowledge distillation techniques to further improve performance and overcome their drawbacks.

Despite their rapid development, recent studies on meta-evaluation of these metrics show mixed results.

Peyrard (2019) and Bhandari et al. (2020a) compare their performance in the context of document summarization and show that metrics strongly disagree in ranking summaries from any narrow scoring range, e.g., there is no consensus among metrics regarding which summary is better than another in the high scoring range in which modern systems now operate.

Bhandari et al. (2020b) argue that there is no one-size-fitsall metric that correlates better with human judgement than the others, and that can outperform others on all datasets."
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,BERT embeddings,4,"Unlike the conventional static embeddings (Mikolov et al., 2013a;Pennington et al., 2014), BERT's representations are contextualized, i.e., every input token is represented by a vector dependent on the particular context of occurrence.

In the current studies of BERT's representation space, the term 'embedding' refers to the output vector of a given (typically final) Transformer layer. Wiedemann et al. (2019) find that BERT's contextualized embeddings form distinct and clear clusters corresponding to word senses, which confirms that the basic distributional hypothesis holds for these representations. However, Mickus et al. (2019) note that representations of the same word varies depending on position of the sentence in which it occurs, likely due to NSP objective. Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations. They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers. That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","sent1: Unlike the conventional static embeddings (Mikolov et al., 2013a;Pennington et al., 2014), BERT's representations are contextualized, i.e., every input token is represented by a vector dependent on the particular context of occurrence.
sent2: In the current studies of BERT's representation space, the term 'embedding' refers to the output vector of a given (typically final) Transformer layer.
sent3: Wiedemann et al. (2019) find that BERT's contextualized embeddings form distinct and clear clusters corresponding to word senses, which confirms that the basic distributional hypothesis holds for these representations.
sent4: However, Mickus et al. (2019) note that representations of the same word varies depending on position of the sentence in which it occurs, likely due to NSP objective.
sent5: Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations.
sent6: They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.
sent7: That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","1. How do BERT's representations differ from conventional static embeddings? sent1
2. What does the term 'embedding' refer to in the context of BERT's representation space? sent2
3. What did Wiedemann et al. (2019) find about BERT's contextualized embeddings? sent3
4. What observation did Mickus et al. (2019) make about the variability of BERT's word representations? sent4
5. What did Ethayarajh (2019) discover about the similarity of embeddings for identical words across BERT layers? sent5
6. What additional finding did Ethayarajh (2019) report regarding the distribution of BERT embeddings in vector space? sent6
7. What does the narrow cone effect in BERT embeddings imply about the average cosine similarity between random words? sent7","Question: How do BERT embeddings vary across layers and what implications does this have for their distribution in vector space?

Supporting sentence: sent5, sent6, sent7",How do BERT embeddings vary across layers and what implications does this have for their distribution in vector space?,"sent5, sent6, sent7",2,implement,"Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations.

They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.

That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","Ethayarajh (2019) found that later BERT layers produce more context-specific representations by measuring how similar the embeddings for identical words are in every layer.

They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.

This means that two random words will, on average, have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","Question:

How do BERT embeddings vary across layers and what implications does this have for their distribution in vector space?

Answer:

Ethayarajh (2019) found that later BERT layers produce more context-specific representations by measuring how similar the embeddings for identical words are in every layer.

They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.

This means that two random words will, on average, have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic).","Question:

How do BERT embeddings vary across layers and what implications does this have for their distribution in vector space?

Answer:

Ethayarajh (2019) measure how similar the embeddings for identical words are in every layer and find that later BERT layers produce more contextspecific representations.

They also find that BERT embeddings occupy a narrow cone in the vector space, and this effect increases from lower to higher layers.

That is, two random words will on average have a much higher cosine similarity than expected if embeddings were directionally uniform (isotropic)."
219177284,Conversational Machine Comprehension: a Literature Review,https://www.semanticscholar.org/paper/daadce35dc3694ae02dae07da7a3285daf3eab32,Generic Framework of a CMC Model,4,"(2) reasoning in the neural space to identify the answer vector and (3) decoding the answer vector into a natural language output. Huang et al. (2018a) adapted these steps in CMC by adding conversational history modeling. Qu et al. (2019c) proposed a ConvQA model with separate modules for history selection and modeling. Based on these prior works, we synthesize a generic framework for a CMC model. A typical CMC model is provided with context C, current question Q i and the conversation history

, and needs to generate an output set O i . The CMC framework is provided in Fig. 1. There are four major components of the framework, based on their contribution to the overall CMC flow.

1. History Selection module: With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well. A history selection module, therefore, chooses a subset H i of the history turns H i based on a policy (dynamic or static) that is expected to be more helpful than the others. If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.","sent1: (2) reasoning in the neural space to identify the answer vector and (3) decoding the answer vector into a natural language output.
sent2: Huang et al. (2018a) adapted these steps in CMC by adding conversational history modeling.
sent3: Qu et al. (2019c) proposed a ConvQA model with separate modules for history selection and modeling.
sent4: Based on these prior works, we synthesize a generic framework for a CMC model.
sent5: A typical CMC model is provided with context C, current question Q i and the conversation history, and needs to generate an output set
sent6: O i . The CMC framework is provided in Fig. 1.
sent7: There are four major components of the framework, based on their contribution to the overall CMC flow.
sent8: 1. History Selection module: With complicated dialog behaviors like topic shift or topic return (Yatskar, 2019), simply selecting immediate turns may not work well.
sent9: A history selection module, therefore, chooses a subset H i of the history turns H
sent10: i based on a policy (dynamic or static)
sent11: that is expected to be more helpful than the others.
sent12: If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.","1. What are the steps involved in reasoning and decoding in a CMC model? sent1
2. How did Huang et al. (2018a) adapt the steps in CMC? sent2
3. What did Qu et al. (2019c) propose for ConvQA models? sent3
4. What is synthesized based on prior works in the context of CMC models? sent4
5. What is a typical CMC model provided with, and what does it need to generate? sent5
6. How many major components are there in the CMC framework, and what is their purpose? sent7
7. What is the role of the History Selection module in the CMC framework? sent8
8. How does the history selection module choose a subset of history turns? sent9, sent10
9. How can feedback from other modules influence the history selection module? sent11, sent12","Question: How does the history selection module function within a CMC model, and how is it influenced by feedback?

Supporting sentence: sent9, sent10, sent11, sent12","How does the history selection module function within a CMC model, and how is it influenced by feedback?","sent9, sent10, sent11, sent12",2,implement,"A history selection module, therefore, chooses a subset H i of the history turns H

i based on a policy (dynamic or static)

that is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update.","A history selection module chooses a subset of the history turns.

It does so based on a policy, which can be either dynamic or static.

This subset is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy, such as the one proposed by Qu et al. (2019b), then feedback from the other modules can guide its update.","Question:

How does the history selection module function within a CMC model, and how is it influenced by feedback?

Answer:

A history selection module chooses a subset of the history turns.

It does so based on a policy, which can be either dynamic or static.

This subset is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy, such as the one proposed by Qu et al. (2019b), then feedback from the other modules can guide its update.","Question:

How does the history selection module function within a CMC model, and how is it influenced by feedback?

Answer:

A history selection module, therefore, chooses a subset H i of the history turns Hi based on a policy (dynamic or static)that is expected to be more helpful than the others.

If the history selection module is based on a dynamic learned policy (e.g. Qu et al. (2019b)), then feedback from the other modules can guide its update."
219177284,Conversational Machine Comprehension: a Literature Review,https://www.semanticscholar.org/paper/daadce35dc3694ae02dae07da7a3285daf3eab32,Encoder:,5,"The lexical tokens of the context passage C, selected conversational turns H i , and the current question Q i need to be transformed into input embeddings for the reasoning module. Encoder facilitates this transition. The encoder steps may vary with every approach and reasoning inputs, at a high level, encoding involves transformation and combination of context-independent word embeddings called lexical embeddings such as GloVE (Pennington et al., 2014), intra-sequence contextual  Figure 1: Generic framework of a CMC model. A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history H i relevant to the current question Q i ;

(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings. embeddings e.g. ELMo (Peters et al., 2018), BERT (Devlin et al., 2019) or RNN, question-aware embeddings, and additional feature embeddings like POS tags , history embedding (Qu et al., 2019c) or conversation count. Conversational history H i is generally integrated with this module into any or all of the contextual input embeddings. This process is called History modeling and is the most significant aspect of a CMC encoder.

3. Contextual Integration layer: Contextual information accumulated in the passage, query, and/or history embeddings individually must be fused to generate query-aware and/or history-aware contextualized output embeddings. This process may involve a single layer (single-step reasoning) or repetition across multiple layers (multi-step reasoning). Input for this module generally consists of two (or more) sequence sets for every history turn, or aggregated across all turns, which are then fused in each layer and often inter-weaved (Huang et al., 2018b) with attention.","sent1: The lexical tokens of the context passage C, selected conversational turns H i , and the current question Q i need to be transformed into input embeddings for the reasoning module.
sent2: Encoder facilitates this transition.
sent3: The encoder steps may vary with every approach and reasoning inputs, at a high level, encoding involves transformation and combination of context-independent word embeddings called lexical embeddings such as GloVE (Pennington et al., 2014), intra-sequence contextual  Figure 1: Generic framework of a CMC model.
sent4: A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history
sent5: H i relevant to the current question Q i ;(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings.
sent6: embeddings e.g. ELMo (Peters et al., 2018), BERT (Devlin et al., 2019) or RNN, question-aware embeddings, and additional feature embeddings like POS tags , history embedding (Qu et al., 2019c) or conversation count.
sent7: Conversational history H i is generally integrated with this module into any or all of the contextual input embeddings.
sent8: This process is called History modeling and is the most significant aspect of a CMC encoder.
sent9: 3. Contextual Integration layer: Contextual information accumulated in the passage, query, and/or history embeddings individually must be fused to generate query-aware and/or history-aware contextualized output embeddings.
sent10: This process may involve a single layer (single-step reasoning) or repetition across multiple layers (multi-step reasoning).
sent11: Input for this module generally consists of two (or more) sequence sets for every history turn, or aggregated across all turns, which are then fused in each layer and often inter-weaved (Huang et al., 2018b) with attention.","1. What needs to be transformed into input embeddings for the reasoning module in a CMC model? sent1
2. What role does the encoder play in a CMC model? sent2
3. How do encoder steps vary, and what does encoding involve at a high level? sent3
4. What are the components of a typical CMC model? sent4, sent5
5. What types of embeddings are used in the encoding process? sent6
6. How is conversational history integrated into the encoder module? sent7
7. What is history modeling, and why is it significant in a CMC encoder? sent8
8. What is the purpose of the Contextual Integration layer in a CMC model? sent9
9. How is the process of contextual integration carried out? sent10
10. What does the input for the Contextual Integration layer generally consist of? sent11","Question: What are the components and functions of a typical Conversational Machine Comprehension (CMC) model?

Supporting sentence: sent4, sent5",What are the components and functions of a typical Conversational Machine Comprehension (CMC) model?,"sent4, sent5",2,implement,"A typical CMC model would consist of (1) History selection module, that selects a subset H i of conversational history

H i relevant to the current question Q i ;(2) Encoder, that encodes the lexical tokens of context C, Q i and H i into input embeddings for contextual integration layer; (3) Reasoning module, that performs contextual integration of input embeddings into contextualized embeddings; and finally, (4) Output predictor, that predicts the output set O i based on contextualized embeddings.",N/A,"Question:

What are the components and functions of a typical Conversational Machine Comprehension (CMC) model?

Answer:

N/A","Question:

What are the components and functions of a typical Conversational Machine Comprehension (CMC) model?

Answer:

N/A"
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Standalone GNNs,8,"We will start our discussion of standalone GNN models with HeterSumGraph (HSG), a model proposed by . We will do so due to the fact that this model illustrates concepts and ideas seen throughout GNNs models used for ATS. An illustration of the general concepts presented here can be seen in Figure 3.

The HSG model encodes each text into a graph with three node types, sentence nodes, word nodes and document nodes. The connection between these nodes is decided by inclusion i.e. if the word represented by a word node occurs in a sentence then their respective nodes are connected by an edge. The same principle applies to document nodes which are connected depending on whether a word, represented by a word node, occurs within the document. This is a flexible structure, as it can be used in a single-document but also multidocument setting.  Figure 3: General architecture of standalone GNNs with word nodes and sentence nodes, encoders for both node types and a sentence selection mechanism. Inspired by HSG.

The feature vectors for all nodes are obtained by encoders and the edge weights are obtained by computing the TF-IDF score for each word. The neural network consists of a modified GAT layer. The GAT is modified to consider the TF-IDF value of the connecting edge. Additionally a positionwise feed-forward (FFN) layer consisting of two linear transformations is applied to the hidden state after the convolution. In total three convolution layers are used, word-sentence, sentence-word and word-document. The model is then trained on a node-based binary classification task that is predicting whether a sentence node is to be included for the summary or not.

The classification itself is done by a single linear layer. The model then does not directly use the predicted nodes to produce the summary. Instead trigram blocking (Paulus et al., 2018) is used during sentence selection in order to ensure sparsity of the generated summary.

The results for this model are quite impressive as it outperforms non-BERT based models on both single-document and multi-document summarization for the CNN/DailyMail dataset. One should especially note the flexibility and ability to use this model for two tasks.

An older model by Muratore et al. (2010) can be considered a precursor to this architecture. A simple extension to the HSG model is proposed by Ya et al. (2021). In their extension they modify the model for query constraints for the summary. This is achieved by adding a query node to the graph structure. Additionally, they introduce a mu-tual information maximization mechanism during training.

A model which further follows this structure is the one by Linmei et al. (2019). The authors there extend the attention mechanism by adding another layer of attention, allowing it to include information about the type of the node during convolution. The GNN model by Jing et al. (2021) encodes even more information into the graph by considering the relation between sentences on a number of different levels. In particular, they encode the semantic and syntactical relationship between sentences within the graph.

This idea of encoding additional information into the graph is also followed by Antognini and Faltings (2019). They introduce an additional universal feature vector which is added to each sentence node embedding. This universal feature vector is learned from a large unrelated and general corpus. This model is also unique in that it focuses on the summarization of very small texts, on average less than 100 words.

Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a). The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities. The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens. The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence. Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram. Additionally, sequentially occurring words and entities are connected with a directed edge. This setup shows how one can encode a substantial amount of implicit information in an explicit manner.

HAHSum uses a GAT for each of the five node type combinations found within the graph. Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum show that GNNs can perform very well. The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset. The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS . The results of an Amazon Mechanical Turk experiment corroborate these results and show that for human readers HAHSum produce summaries with superior fluency and conciseness. Another recent GNN model which has achieved great performance in the task of multi-document summarization is the SgSum model by . Different to the approaches outlined above, the SgSum model uses graph pooling to extract sub-graphs from encoded documents. That is, it first transforms the documents into a large graph, then generates a number of sub-graphs via pooling and convolution. These sub-graphs are then ranked and thereby selected for a summary. This is quite an innovative approach as it casts the problem of multi-document summarization as a simple subgraph selection problem. Additionally, it outputs an integral summary, that is the entire summary is output by the model in the form of the sub-graph of sentences.","sent1: We will start our discussion of standalone GNN models with HeterSumGraph (HSG), a model proposed by .
sent2: We will do so due to the fact that this model illustrates concepts and ideas seen throughout GNNs models used for ATS.
sent3: An illustration of the general concepts presented here can be seen in Figure 3.
sent4: The HSG model encodes each text into a graph with three node types, sentence nodes, word nodes and document nodes.
sent5: The connection between these nodes is decided by inclusion i.e. if the word represented by a word node occurs in a sentence then their respective nodes are connected by an edge.
sent6: The same principle applies to document nodes which are connected depending on whether a word, represented by a word node, occurs within the document.
sent7: This is a flexible structure, as it can be used in a single-document but also multidocument setting.
sent8: Figure 3: General architecture of standalone GNNs with word nodes and sentence nodes, encoders for both node types and a sentence selection mechanism.
sent9: Inspired by HSG. The feature vectors for all nodes are obtained by encoders and the edge weights are obtained by computing the TF-IDF score for each word.
sent10: The neural network consists of a modified GAT layer.
sent11: The GAT is modified to consider the TF-IDF value of the connecting edge.
sent12: Additionally a positionwise feed-forward (FFN) layer consisting of two linear transformations is applied to the hidden state after the convolution.
sent13: In total three convolution layers are used, word-sentence, sentence-word and word-document.
sent14: The model is then trained on a node-based binary classification task that is predicting whether a sentence node is to be included for the summary or not.
sent15: The classification itself is done by a single linear layer.
sent16: The model then does not directly use the predicted nodes to produce the summary.
sent17: Instead trigram blocking (Paulus et al., 2018) is used during sentence selection in order to ensure sparsity of the generated summary.
sent18: The results for this model are quite impressive as it outperforms non-BERT based models on both single-document and multi-document summarization for the CNN/DailyMail dataset.
sent19: One should especially note the flexibility and ability to use this model for two tasks.
sent20: An older model by Muratore et al. (2010) can be considered a precursor to this architecture.
sent21: A simple extension to the HSG model is proposed by Ya et al. (2021).
sent22: In their extension they modify the model for query constraints for the summary.
sent23: This is achieved by adding a query node to the graph structure.
sent24: Additionally, they introduce a mu-tual information maximization mechanism during training.
sent25: A model which further follows this structure is the one by Linmei et al. (2019).
sent26: The authors there extend the attention mechanism by adding another layer of attention, allowing it to include information about the type of the node during convolution.
sent27: The GNN model by Jing et al. (2021) encodes even more information into the graph by considering the relation between sentences on a number of different levels.
sent28: In particular, they encode the semantic and syntactical relationship between sentences within the graph.
sent29: This idea of encoding additional information into the graph is also followed by Antognini and Faltings (2019).
sent30: They introduce an additional universal feature vector which is added to each sentence node embedding.
sent31: This universal feature vector is learned from a large unrelated and general corpus.
sent32: This model is also unique in that it focuses on the summarization of very small texts, on average less than 100 words.
sent33: Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a).
sent34: The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities.
sent35: The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens.
sent36: The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence.
sent37: Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram.
sent38: Additionally, sequentially occurring words and entities are connected with a directed edge.
sent39: This setup shows how one can encode a substantial amount of implicit information in an explicit manner.
sent40: HAHSum uses a GAT for each of the five node type combinations found within the graph.
sent41: Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.
sent42: The results for HAHSum show that GNNs can perform very well.
sent43: The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset.
sent44: The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS .
sent45: The results of an Amazon Mechanical Turk experiment corroborate these results and show that for human readers HAHSum produce summaries with superior fluency and conciseness.
sent46: Another recent GNN model which has achieved great performance in the task of multi-document summarization is the SgSum model by .
sent47: Different to the approaches outlined above, the SgSum model uses graph pooling to extract sub-graphs from encoded documents.
sent48: That is, it first transforms the documents into a large graph, then generates a number of sub-graphs via pooling and convolution.
sent49: These sub-graphs are then ranked and thereby selected for a summary.
sent50: This is quite an innovative approach as it casts the problem of multi-document summarization as a simple subgraph selection problem.
sent51: Additionally, it outputs an integral summary, that is the entire summary is output by the model in the form of the sub-graph of sentences.","1. What is the focus of the discussion on standalone GNN models in this section? sent1
    1.1. Why is the HeterSumGraph (HSG) model used as an example? sent2
    1.2. How does the HSG model encode text into a graph? sent4
        1.2.1. How are connections between nodes in the HSG model determined? sent5, sent6
        1.2.2. What flexibility does the HSG model's structure offer? sent7
    1.3. What does Figure 3 illustrate? sent3, sent8
    1.4. How are feature vectors and edge weights obtained in the HSG model? sent9
    1.5. What modifications are made to the GAT layer in the HSG model? sent10, sent11
    1.6. What additional layer is applied in the HSG model, and how many convolution layers are used? sent12, sent13
    1.7. What is the training task for the HSG model? sent14
        1.7.1. How is the classification task performed in the HSG model? sent15
    1.8. How does the HSG model ensure sparsity in the generated summary? sent16, sent17
    1.9. How does the HSG model perform compared to other models? sent18
        1.9.1. What is notable about the HSG model's flexibility? sent19
    1.10. What is considered a precursor to the HSG model? sent20
    1.11. What extension to the HSG model is proposed by Ya et al. (2021)? sent21, sent22
        1.11.1. How is the query constraint achieved in the extension? sent23
        1.11.2. What mechanism is introduced during training in the extension? sent24
    1.12. What further development follows the HSG structure by Linmei et al. (2019)? sent25, sent26
    1.13. How does the GNN model by Jing et al. (2021) encode additional information? sent27, sent28
    1.14. What additional feature is introduced by Antognini and Faltings (2019)? sent29, sent30
        1.14.1. How is the universal feature vector learned? sent31
        1.14.2. What is unique about the model by Antognini and Faltings (2019)? sent32
    1.15. What is the HAHSum model, and how does it extend the basic structure? sent33, sent34
        1.15.1. What types of nodes are used in the HAHSum model? sent35
        1.15.2. How is the graph constructed in the HAHSum model? sent36, sent37, sent38
        1.15.3. What does the setup of HAHSum demonstrate? sent39
        1.15.4. How does HAHSum perform binary classification of sentence nodes? sent40, sent41
    1.16. How does HAHSum perform compared to other models? sent42, sent43, sent44
        1.16.1. What do the results of an Amazon Mechanical Turk experiment show about HAHSum? sent45
    1.17. What is the SgSum model, and how does it differ from previous approaches? sent46, sent47
        1.17.1. How does the SgSum model process documents for summarization? sent48, sent49
        1.17.2. What is innovative about the SgSum model's approach? sent50
        1.17.3. What is the output format of the SgSum model? sent51","Question: How does the HAHSum model utilize graph structures to improve text summarization performance?

Supporting sentence: sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44",How does the HAHSum model utilize graph structures to improve text summarization performance?,"sent33, sent34, sent35, sent36, sent37, sent38, sent39, sent40, sent41, sent42, sent43, sent44",2,implement,"Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a).

The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities.

The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens.

The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence.

Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram.

Additionally, sequentially occurring words and entities are connected with a directed edge.

This setup shows how one can encode a substantial amount of implicit information in an explicit manner.

HAHSum uses a GAT for each of the five node type combinations found within the graph.

Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum show that GNNs can perform very well.

The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset.

The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS .","The HAHSum model by Jia et al. (2020a) utilizes graph structures to improve text summarization performance.

The construction of the input graph for HAHSum is designed to significantly reduce semantic sparsity by utilizing named entities.

The model incorporates three types of nodes: named entity nodes, word nodes, and sentence nodes, with the named entity nodes being anonymized tokens.

Word nodes are connected with a directed edge to a sentence node if they occur within the sentence.

Two named entities are connected with an undirected edge if they represent the same entity, and two sentence nodes are connected with an undirected edge if they share a trigram.

Additionally, sequentially occurring words and entities are connected with a directed edge.

This setup demonstrates how a substantial amount of implicit information can be encoded explicitly.

HAHSum employs a Graph Attention Network (GAT) for each of the five node type combinations present within the graph.

Similar to HSG, a feed-forward network (FFN) is applied after the multi-head attention, and a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum demonstrate that Graph Neural Networks (GNNs) can perform very well in improving text summarization.

The model was tested on the CNN/Daily Mail, Newsroom, and NYT datasets.

The HAHSum model outperforms powerful models like MATCHSUM (Zhong et al., 2020) and competes with leading abstractive models such as PEGASUS in some metrics.","Question:

How does the HAHSum model utilize graph structures to improve text summarization performance?

Answer:

The HAHSum model by Jia et al. (2020a) utilizes graph structures to improve text summarization performance.

The construction of the input graph for HAHSum is designed to significantly reduce semantic sparsity by utilizing named entities.

The model incorporates three types of nodes: named entity nodes, word nodes, and sentence nodes, with the named entity nodes being anonymized tokens.

Word nodes are connected with a directed edge to a sentence node if they occur within the sentence.

Two named entities are connected with an undirected edge if they represent the same entity, and two sentence nodes are connected with an undirected edge if they share a trigram.

Additionally, sequentially occurring words and entities are connected with a directed edge.

This setup demonstrates how a substantial amount of implicit information can be encoded explicitly.

HAHSum employs a Graph Attention Network (GAT) for each of the five node type combinations present within the graph.

Similar to HSG, a feed-forward network (FFN) is applied after the multi-head attention, and a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum demonstrate that Graph Neural Networks (GNNs) can perform very well in improving text summarization.

The model was tested on the CNN/Daily Mail, Newsroom, and NYT datasets.

The HAHSum model outperforms powerful models like MATCHSUM (Zhong et al., 2020) and competes with leading abstractive models such as PEGASUS in some metrics.","Question:

How does the HAHSum model utilize graph structures to improve text summarization performance?

Answer:

Taking this basic structure and idea even further is the model called HAHSum by Jia et al. (2020a).

The construction of the input graph for HAHSum is more involved as it aims to significantly reduce semantic sparsity by utilizing named entities.

The model uses three types of nodes, named entity nodes, word nodes and sentence nodes, with the named entity nodes being anonymized tokens.

The graph is then built as follows, word nodes are connected with a directed edge to a sentence node if they occur within the sentence.

Two named entities are connected with an undirected edge if they represent the same entity and two sentence nodes are connected with an undirected edge if they share a trigram.

Additionally, sequentially occurring words and entities are connected with a directed edge.

This setup shows how one can encode a substantial amount of implicit information in an explicit manner.

HAHSum uses a GAT for each of the five node type combinations found within the graph.

Just as in HSG, a FFN is applied after the multi-head attention and again as in the previous model a linear layer is used to perform the binary classification of the sentence nodes.

The results for HAHSum show that GNNs can perform very well.

The authors of the paper tested the model on the CNN/Daily Mail, Newsroom and NYT dataset.

The model outperforms very pow- erful models such as MATCHSUM (Zhong et al., 2020) and is even able to compete in some metrics with leading abstractive models such as PEGASUS ."
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Data-driven Approaches,12,"Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021). Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models. Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.

Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns. To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns. Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks. This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.","sent1: Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021).
sent2: Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models.
sent3: Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.
sent4: Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns.
sent5: To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns.
sent6: Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks.
sent7: This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.","1. What recent interest has data augmentation gained in NLP models? sent1
    1.1. What techniques have been shown to improve robustness and generalization of models? sent2
    1.2. At what level are these mitigation strategies operated, and what is a challenge associated with them? sent3
2. What do other lines of work focus on to prevent models from relying on spurious patterns? sent4
3. How did Kaushik et al. (2019) propose to make NLP models more robust on sentiment analysis and NLI tasks? sent5
4. How did Wang et al. (2021d) approach data augmentation differently to improve model robustness? sent6
5. How are mitigation strategies related to measuring and identifying spurious correlations? sent7","Question: How do data-driven approaches enhance robustness in NLP models by addressing spurious correlations?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6, sent7",How do data-driven approaches enhance robustness in NLP models by addressing spurious correlations?,"sent1, sent2, sent3, sent4, sent5, sent6, sent7",4,implement,"Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021).

Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models.

Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.

Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns.

To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns.

Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks.

This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;.","Data augmentation has recently gained a lot of interest for improving robustness in NLP models by mitigating biases and addressing spurious correlations (Feng et al., 2021; Dhole et al., 2021).

Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), and HiddenCut (Chen et al., 2021a) have been shown to substantially improve the robustness and generalization of models.

These mitigation strategies are applied at the data level, and it is often challenging to interpret how and why they work.

Other lines of work focus on spans or regions within data points to prevent models from heavily relying on spurious patterns.

To enhance robustness in sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data through a human-in-the-loop process, demonstrating that models trained on both this augmented data and the original data are less sensitive to spurious patterns.

Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, finding that mitigating these leads to more robust models in multiple NLP tasks.

This line of mitigation strategies is closely related to how spurious correlations can be measured and identified, as many challenging or adversarial examples can be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019; Kaushik et al., 2019; Anastasopoulos et al., 2019; Vaibhav et al., 2019; Khashabi et al., 2020) or in the embedding space (Zhu et al., 2020; Zhao et al., 2018b; Miyato et al., 2017).","Question:

How do data-driven approaches enhance robustness in NLP models by addressing spurious correlations?

Answer:

Data augmentation has recently gained a lot of interest for improving robustness in NLP models by mitigating biases and addressing spurious correlations (Feng et al., 2021; Dhole et al., 2021).

Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), and HiddenCut (Chen et al., 2021a) have been shown to substantially improve the robustness and generalization of models.

These mitigation strategies are applied at the data level, and it is often challenging to interpret how and why they work.

Other lines of work focus on spans or regions within data points to prevent models from heavily relying on spurious patterns.

To enhance robustness in sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data through a human-in-the-loop process, demonstrating that models trained on both this augmented data and the original data are less sensitive to spurious patterns.

Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, finding that mitigating these leads to more robust models in multiple NLP tasks.

This line of mitigation strategies is closely related to how spurious correlations can be measured and identified, as many challenging or adversarial examples can be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019; Kaushik et al., 2019; Anastasopoulos et al., 2019; Vaibhav et al., 2019; Khashabi et al., 2020) or in the embedding space (Zhu et al., 2020; Zhao et al., 2018b; Miyato et al., 2017).","Question:

How do data-driven approaches enhance robustness in NLP models by addressing spurious correlations?

Answer:

Data augmentation recently gained a lot of interest, in improving performance in low-resourced language settings, few-shot learning, mitigating biases, and improving robustness in NLP models (Feng et al., 2021;Dhole et al., 2021).Techniques like Mixup (Zhang et al., 2018), MixText (Chen et al., 2020), CutOut (DeVries and Taylor, 2017), Aug-Mix (Hendrycks et al., 2020b), HiddenCut (Chen et al., 2021a), have been shown to substantially improve the robustness and the generalization of models.

Such mitigation strategies are operated at the data level, and often hard to be interpreted in terms of how and why mitigation works.

Other lines of work deal with spans or regions associated within data points to prevent models from heavily relying on spurious patterns.

To make NLP models more robust on sentiment analysis and NLI tasks, Kaushik et al. (2019) proposed curating counterfactually augmented data via a human-inthe-loop process, and showed that models trained on the combination of this augmented data and original data are less sensitive to spurious patterns.

Differently, Wang et al. (2021d) performed strategic data augmentation to perturb the set of ""shortcuts"" that are automatically identified, and found that mitigating these leads to more robust models in multiple NLP tasks.

This line of mitigation strategies closely relates to how spurious correlations can be measured and identified, as many of the challenging or adversarial examples (Table 1) can sometimes be used to augment the original model to improve its robustness, either in the discrete input space as additional training examples (Liu et al., 2019;Kaushik et al., 2019;Anastasopoulos et al., 2019;Vaibhav et al., 2019;Khashabi et al., 2020), or in the embedding space (Zhu et al., 2020;Zhao et al., 2018b;Miyato et al., 2017;."
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Long input processing,9,"A straightforward solution to the length problem is to segment a long document into smaller segments to be processed. Koay et al. (2021) separate ICSI meetings with a sliding window, and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary. Zhang et al. (2022) propose SUMM N , a multi-stage split-thensummarize framework. Within each stage, it first splits the source input into sufficiently short segments. Coarse summaries are then generated for each segment and then concatenated as the input to the next stage. This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.

While such segmenting approaches address the length problem, they can lose important crosspartition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem. Long-sequence transformers. Multiple variants of adapting transformer-based approaches to address the lengthy input problem exist in the literature (Dai et al., 2019;Beltagy et al., 2020;Martins et al., 2022). Longformer (Beltagy et al., 2020), for example, introduces a multi-layer selfattention operation that scales linearly with sequence length, enabling it to process long meet-ing transcriptions. Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems. Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription. The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure. First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors. That sequence is then processed by the turn-level encoder. The transformer decoder makes use of both levels of representation via cross-attention layers. Rohde et al. (2021) propose Hierachical Attention Transformer (HAT). Utterances are first prepended with a special BOS token. Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations. Finally, the decoder leverages the outputs at both levels to produce a final summary. Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.","sent1: A straightforward solution to the length problem is to segment a long document into smaller segments to be processed.
sent2: Koay et al. (2021) separate ICSI meetings with a sliding window, and then apply BART on each segment to produce smaller summaries, which are concatenated into an overall extractive summary.
sent3: Zhang et al. (2022) propose SUMM N , a multi-stage split-thensummarize framework.
sent4: Within each stage, it first splits the source input into sufficiently short segments.
sent5: Coarse summaries are then generated for each segment and then concatenated as the input to the next stage.
sent6: This process is conducted repetitively until a final, fine-grained abstractive meeting summary is produced.
sent7: While such segmenting approaches address the length problem, they can lose important crosspartition information (Beltagy et al., 2020), a risk that has led researchers to seek more sophisticated solutions to the length problem.
sent8: Long-sequence transformers. Multiple variants of adapting transformer-based approaches to address the lengthy input problem exist in the literature (Dai et al., 2019;Beltagy et al., 2020;Martins et al., 2022).
sent9: Longformer (Beltagy et al., 2020), for example, introduces a multi-layer selfattention operation that scales linearly with sequence length, enabling it to process long meet-ing transcriptions.
sent10: Although these models are not initially proposed for abstractive meeting summarization, recent benchmarks show their promise (Fabbri et al., 2021) in comparison with certain dedicated systems.
sent11: Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription.
sent12: The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.
sent13: First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.
sent14: That sequence is then processed by the turn-level encoder.
sent15: The transformer decoder makes use of both levels of representation via cross-attention layers.
sent16: Rohde et al. (2021) propose Hierachical Attention Transformer (HAT).
sent17: Utterances are first prepended with a special BOS token.
sent18: Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.
sent19: Finally, the decoder leverages the outputs at both levels to produce a final summary.
sent20: Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.","1. What is a straightforward solution to the length problem in meeting summarization? sent1
    1.1. How do Koay et al. (2021) address the length problem in ICSI meetings? sent2
    1.2. What framework do Zhang et al. (2022) propose for handling long inputs? sent3
        1.2.1. How does the SUMM N framework process long inputs? sent4, sent5, sent6
2. What is a potential downside of segmenting approaches to the length problem? sent7
3. What are some transformer-based approaches to address the lengthy input problem? sent8
    3.1. How does Longformer address the lengthy input problem? sent9
    3.2. Are these models initially proposed for abstractive meeting summarization? sent10
4. How do hierarchical transformers address the length problem in meeting summarization? sent11
    4.1. What is the structure of the HMNet model proposed by Zhu et al. (2020)? sent12
        4.1.1. How does the HMNet model process meeting transcripts? sent13, sent14, sent15
    4.2. What is the approach of the Hierarchical Attention Transformer (HAT) proposed by Rohde et al. (2021)? sent16
        4.2.1. How does HAT process utterances and produce a final summary? sent17, sent18, sent19
    4.3. How does the hierarchical encoder of Zhao et al. (2019b) function? sent20","Question: How do hierarchical transformers process meeting transcripts to address the length problem in summarization?

Supporting sentence: sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",How do hierarchical transformers process meeting transcripts to address the length problem in summarization?,"sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20",2,implement,"Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription.

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.

That sequence is then processed by the turn-level encoder.

The transformer decoder makes use of both levels of representation via cross-attention layers.

Rohde et al. (2021) propose Hierachical Attention Transformer (HAT).

Utterances are first prepended with a special BOS token.

Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder leverages the outputs at both levels to produce a final summary.

Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings.","Hierarchical transformers process meeting transcripts by breaking down a long meeting transcript into multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), where words combine into an utterance, and utterances form a transcription.

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by a word-level transformer encoder, resulting in a sequence of utterance vectors.

This sequence is then processed by the turn-level encoder.

The transformer decoder utilizes both levels of representation through cross-attention layers.

Rohde et al. (2021) propose the Hierarchical Attention Transformer (HAT).

In the HAT model, utterances are first prepended with a special BOS token.

After obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder in the HAT model utilizes the outputs at both the token and sentence levels to generate a final summary.

Similarly, the hierarchical encoder proposed by Zhao et al. (2019b) consists of three levels, which sequentially encode word, utterance, and topic segment embeddings.","Question:

How do hierarchical transformers process meeting transcripts to address the length problem in summarization?

Answer:

Hierarchical transformers process meeting transcripts by breaking down a long meeting transcript into multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), where words combine into an utterance, and utterances form a transcription.

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by a word-level transformer encoder, resulting in a sequence of utterance vectors.

This sequence is then processed by the turn-level encoder.

The transformer decoder utilizes both levels of representation through cross-attention layers.

Rohde et al. (2021) propose the Hierarchical Attention Transformer (HAT).

In the HAT model, utterances are first prepended with a special BOS token.

After obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder in the HAT model utilizes the outputs at both the token and sentence levels to generate a final summary.

Similarly, the hierarchical encoder proposed by Zhao et al. (2019b) consists of three levels, which sequentially encode word, utterance, and topic segment embeddings.","Question:

How do hierarchical transformers process meeting transcripts to address the length problem in summarization?

Answer:

Hierarchical transformers. Some systems leverage transformers in a hierarchical manner, breaking down a long meeting transcript to multiple relatively shorter sequences of different levels, mirroring the underlying hierarchical structure of text (Yang et al., 2016), i.e., words combine into an utterance, and utterances form a transcription.

The HMNet model, proposed by Zhu et al. (2020), follows a two-level structure.

First, each utterance in the meeting is separately encoded by the same word-level transformer encoder, resulting in a sequence of utterance vectors.

That sequence is then processed by the turn-level encoder.

The transformer decoder makes use of both levels of representation via cross-attention layers.

Rohde et al. (2021) propose Hierachical Attention Transformer (HAT).

Utterances are first prepended with a special BOS token.

Then, after obtaining token-level embeddings with a standard transformer encoder, the BOS token embeddings are fed into an extra layer, yielding sentence-level representations.

Finally, the decoder leverages the outputs at both levels to produce a final summary.

Similarly, the hierarchical encoder of (Zhao et al., 2019b) consists of three levels, sequentially encoding word, utterance and topic segment embeddings."
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Self Contrastive Learning,10,"Self contrastive learning relies on heuristics to construct pseudo question-document pairs (q ′ , d ′+/− ) from D, then uses them to supervise training of a NR model. The objective is:

where L is the ranking loss as in Eq 1. Since negative pairs can be easily constructed by random sampling, the main difficulty is to design good heuristics for constructing positive pseudo pairs (q ′ , d ′+ ). There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based. An overview is in Table 2.

Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair. The intuition is that perturbed text should still be relevant to the original text. Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other. The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document. They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness. Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.

Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021). For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus. A term from it is treated as the answer and replaced with a special token. Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents. Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant . For example, Chang et al.

(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic. A passage from another page containing hyperlinks to p is treated as a positive document. Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question. A passage from its hyperlinked document that contains the same entity word is treated as a positive sample. Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.  ","sent1: Self contrastive learning relies on heuristics to construct pseudo question-document pairs (q ′ , d ′+/− ) from D, then uses them to supervise training of a NR model.
sent2: The objective is:where L is the ranking loss as in Eq 1.
sent3: Since negative pairs can be easily constructed by random sampling, the main difficulty is to design good heuristics for constructing positive pseudo pairs (q ′ , d ′+ ).
sent4: There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based.
sent5: An overview is in Table 2.Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.
sent6: The intuition is that perturbed text should still be relevant to the original text.
sent7: Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).
sent8: Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.
sent9: The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.
sent10: They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness.
sent11: Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).
sent12: For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.
sent13: A term from it is treated as the answer and replaced with a special token.
sent14: Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents.
sent15: Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.
sent16: Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant .
sent17: For example, Chang et al.(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic.
sent18: A passage from another page containing hyperlinks to p is treated as a positive document.
sent19: Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.
sent20: A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.
sent21: Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.","1. What is self contrastive learning and how does it construct pseudo question-document pairs? sent1
    1.1. What is the main difficulty in constructing positive pseudo pairs in self contrastive learning? sent3
    1.2. What are the popular heuristics for constructing positive pseudo pairs? sent4
        1.2.1. What is perturbation-based heuristic and its intuition? sent5, sent6
            1.2.1.1. What are typical choices of perturbations in perturbation-based heuristics? sent7
        1.2.2. How do proximity-based heuristics work and what is their intuition? sent8
            1.2.2.1. What is the inverse-cloze task in proximity-based heuristics? sent9
            1.2.2.2. How can proximity-based heuristics be combined with noise injection methods? sent10
            1.2.2.3. What are other methods used in proximity-based heuristics? sent11
        1.2.3. How do cooccurrence-based heuristics construct positive samples? sent11
            1.2.3.1. Can you provide an example of cooccurrence-based heuristic? sent12, sent13, sent14
            1.2.3.2. How does Ram et al. (2022) utilize cooccurrence-based heuristics? sent15
        1.2.4. How do hyperlink-based heuristics leverage hyperlink information? sent16
            1.2.4.1. Can you provide an example of hyperlink-based heuristic? sent17, sent18
            1.2.4.2. How does Yue et al. (2022a) use hyperlink-based heuristics? sent19, sent20
            1.2.4.3. What are the two typologies used by Zhou et al. (2022) in hyperlink-based heuristics? sent21","Question: What are the popular heuristics for constructing positive pseudo pairs in self contrastive learning, and how do they function?

Supporting sentence: sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21","What are the popular heuristics for constructing positive pseudo pairs in self contrastive learning, and how do they function?","sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21",2,implement,"There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based.

An overview is in Table 2.Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.

The intuition is that perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.

The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness.

Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.

A term from it is treated as the answer and replaced with a special token.

Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant .

For example, Chang et al.(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic.

A passage from another page containing hyperlinks to p is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document.","There are five popular heuristics for constructing positive pseudo pairs in self-contrastive learning: perturbation-based, summary-based, proximity-based, cooccurrence-based, and hyperlink-based.

Perturbation-based heuristics add perturbations to some text and then treat the perturbed text and the original text as a positive pair.

The intuition behind this approach is that the perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution, and permutation (Zhu et al., 2021b; Meng et al., 2021; Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to form positive pairs, based on the intuition that nearby text should be more relevant to each other.

One well-known example of proximity-based heuristics is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

These proximity-based heuristics can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022) or random word chopping or deletion (Izacard et al., 2021) to further improve model robustness.

Other methods involve using spans from the same document, sentences from the same paragraph, or paragraphs from the same document as positive samples (Gao and Callan, 2022; Ma et al., 2022; Di Liello et al., 2022). Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question using a sentence from the corpus.

A term from the sentence is treated as the answer and replaced with a special token.

Passages retrieved with BM25 that also contain the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text is more likely to be relevant.

For example, Chang et al. (2020) uses a sentence from the first section of a page as a pseudo question, as it often serves as the description or summary of the topic.

A passage from another page containing hyperlinks to the original page is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) construct positive samples using two typologies: ""dual-link,"" where two passages have hyperlinks pointing to each other, and ""co-mention,"" where two passages both link to the same third-party document.","Question:

What are the popular heuristics for constructing positive pseudo pairs in self contrastive learning, and how do they function?

Answer:

There are five popular heuristics for constructing positive pseudo pairs in self-contrastive learning: perturbation-based, summary-based, proximity-based, cooccurrence-based, and hyperlink-based.

Perturbation-based heuristics add perturbations to some text and then treat the perturbed text and the original text as a positive pair.

The intuition behind this approach is that the perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution, and permutation (Zhu et al., 2021b; Meng et al., 2021; Ma et al., 2021a).

Proximity-based heuristics utilize the position information in the document to form positive pairs, based on the intuition that nearby text should be more relevant to each other.

One well-known example of proximity-based heuristics is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

These proximity-based heuristics can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022) or random word chopping or deletion (Izacard et al., 2021) to further improve model robustness.

Other methods involve using spans from the same document, sentences from the same paragraph, or paragraphs from the same document as positive samples (Gao and Callan, 2022; Ma et al., 2022; Di Liello et al., 2022). Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question using a sentence from the corpus.

A term from the sentence is treated as the answer and replaced with a special token.

Passages retrieved with BM25 that also contain the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text is more likely to be relevant.

For example, Chang et al. (2020) uses a sentence from the first section of a page as a pseudo question, as it often serves as the description or summary of the topic.

A passage from another page containing hyperlinks to the original page is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) construct positive samples using two typologies: ""dual-link,"" where two passages have hyperlinks pointing to each other, and ""co-mention,"" where two passages both link to the same third-party document.","Question:

What are the popular heuristics for constructing positive pseudo pairs in self contrastive learning, and how do they function?

Answer:

There are 5 popular heuristics to construct such positive pairs: perturbation-based, summarybased, proximity-based, cooccurence-based and hyperlink-based.

An overview is in Table 2.Perturbation-based heuristics add perturbations to some text, then treat the perturbed text and the original text as a positive pair.

The intuition is that perturbed text should still be relevant to the original text.

Typical choices of perturbations include word deletion, substitution and permutation (Zhu et al., 2021b;Meng et al., 2021) (Ma et al., 2021a).Proximity-based heuristics utilize the position information in the document to obtain positive pairs based on the intuition that nearby text should be more relevant to each other.

The most famous one is the inverse-cloze task (Lee et al., 2019), where a sentence from a passage is treated as the question and the original passage, after removing the sentence, is treated as a positive document.

They can be combined with typical noise injection methods like adding drop-out masks (Xu et al., 2022), random word chopping or deletion (Izacard et al., 2021) to further improve the model robustness.

Other methods include using spans from the same document (Gao and Callan, 2022; Ma et al., 2022), sentences from the same paragraph, paragraphs from the same document as positive samples (Di Liello et al., 2022), etc.Cooccurrence-based heuristics construct positive samples based on the intuition that sentences containing cooccurred spans are more likely to be relevant (Ram et al., 2021).

For example, Glass et al. (2020) constructs a pseudo question with a sentence from the corpus.

A term from it is treated as the answer and replaced with a special token.

Passages retrieved with BM25 which also contains the answer term are treated as pseudo positive documents.

Ram et al. (2022) treat a span and its surrounding context as the pseudo question and use another passage that contains the same span as a positive document.

Hyperlink-based heuristics leverage hyperlink information based on the intuition that hyperlinked text are more likely to be relevant .

For example, Chang et al.(2020) takes a sentence from the first section of a page p as a pseudo question because it is often the description or summary of the topic.

A passage from another page containing hyperlinks to p is treated as a positive document.

Yue et al. (2022a) replace an entity word with a question phrase like ""what/when"" to form a pseudo question.

A passage from its hyperlinked document that contains the same entity word is treated as a positive sample.

Zhou et al. (2022) build positive samples with two typologies: ""dual-link"" where two passages have hyperlinks pointed to each other, and ""co-mention"" where two passages both have a hyperlink to the same third-party document."
233476148,Explanation-Based Human Debugging of NLP Models: A Survey,https://www.semanticscholar.org/paper/d84ed05ab860b75f9e6b28e717abf4bc12da03d7,Bug Sources,11,"Most of the papers in Table 1 experimented on training datasets with natural artifacts (AR), which cause spurious correlation bugs (i.e., the input texts having signals which are correlated to but not the reasons for specific outputs) and undermine models' generalizability. Out of the 15 papers we surveyed, 5 used the 20Newsgroups dataset (Lang, 1995) as a case study, since it has lots of natural artifacts. For example, some punctuation marks appear more often in one class due to the writing styles of the authors contributing to the class, so the model uses these punctuation marks as clues to make predictions. However, because 20Newsgroups is a topic classification dataset, a better model should focus more on the topic of the content since the punctuation marks can also appear in other classes, especially when we apply the model to texts in the wild. Apart from classification performance drops, natural artifacts can also cause model biases, as shown in (De-Arteaga et al., 2019;Park et al., 2018) and debugged in (Lertvittayakumjorn et al., 2020;Yao et al., 2021).

In the absence of strong natural artifacts, bugs can still be simulated using several techniques. First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010). Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017). Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021). All of these techniques give rise to undesirable model behaviors, requiring debugging. Another technique, not found in Table 1 but suggested in related work (Idahl et al., 2021), is contaminating input texts in the training data with decoys (i.e., injected artifacts) which could deceive the model into predicting for the wrong reasons. This has been experimented with in the computer vision domain (Rieger et al., 2020), and its use in the EBHD setting in NLP could be an interesting direction to explore.","sent1: Most of the papers in Table 1 experimented on training datasets with natural artifacts (AR), which cause spurious correlation bugs (i.e., the input texts having signals which are correlated to but not the reasons for specific outputs) and undermine models' generalizability.
sent2: Out of the 15 papers we surveyed, 5 used the 20Newsgroups dataset (Lang, 1995) as a case study, since it has lots of natural artifacts.
sent3: For example, some punctuation marks appear more often in one class due to the writing styles of the authors contributing to the class, so the model uses these punctuation marks as clues to make predictions.
sent4: However, because 20Newsgroups is a topic classification dataset, a better model should focus more on the topic of the content since the punctuation marks can also appear in other classes, especially when we apply the model to texts in the wild.
sent5: Apart from classification performance drops, natural artifacts can also cause model biases, as shown in (De-Arteaga et al., 2019;Park et al., 2018) and debugged in (Lertvittayakumjorn et al., 2020;Yao et al., 2021).
sent6: In the absence of strong natural artifacts, bugs can still be simulated using several techniques.
sent7: First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010).
sent8: Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017).
sent9: Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021).
sent10: All of these techniques give rise to undesirable model behaviors, requiring debugging.
sent11: Another technique, not found in Table 1 but suggested in related work (Idahl et al., 2021), is contaminating input texts in the training data with decoys (i.e., injected artifacts) which could deceive the model into predicting for the wrong reasons.
sent12: This has been experimented with in the computer vision domain (Rieger et al., 2020), and its use in the EBHD setting in NLP could be an interesting direction to explore.","1. What causes spurious correlation bugs in training datasets and how do they affect models? sent1
    1.1. Which dataset is frequently used as a case study for natural artifacts, and why? sent2
        1.1.1. Can you provide an example of how natural artifacts affect model predictions? sent3
        1.1.2. Why should models focus more on the topic of content rather than natural artifacts in datasets like 20Newsgroups? sent4
    1.2. Besides classification performance drops, what other issues can natural artifacts cause in models? sent5
2. How can bugs be simulated in the absence of strong natural artifacts? sent6
    2.1. What is the effect of using only a small subset of labeled data for training? sent7
    2.2. How does injecting wrong labels into training data affect model quality? sent8
    2.3. What do out-of-distribution tests reveal about model performance? sent9
    2.4. What is the overall impact of these techniques on model behavior? sent10
3. What is another technique suggested for simulating bugs, and where has it been experimented with? sent11
    3.1. Why could this technique be an interesting direction to explore in the EBHD setting in NLP? sent12","Question: How can bugs be simulated in NLP models when strong natural artifacts are absent, and what are their impacts?

Supporting sentence: sent6, sent7, sent8, sent9, sent10","How can bugs be simulated in NLP models when strong natural artifacts are absent, and what are their impacts?","sent6, sent7, sent8, sent9, sent10",4,implement,"In the absence of strong natural artifacts, bugs can still be simulated using several techniques.

First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010).

Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017).

Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021).

All of these techniques give rise to undesirable model behaviors, requiring debugging.","In the absence of strong natural artifacts, bugs in NLP models can still be simulated using several techniques.

One approach is to use only a small subset of labeled data for training, which could cause the model to exploit spurious correlations, leading to poor performance (Kulesza et al., 2010).

Another method involves injecting wrong labels into the training data, which can significantly degrade model quality (Koh and Liang, 2017).

Using out-of-distribution tests can reveal that the model does not work effectively in domains it has not been trained on (Lertvittayakumjorn et al., 2020; Yao et al., 2021).

These techniques give rise to undesirable model behaviors, necessitating debugging.","Question:

How can bugs be simulated in NLP models when strong natural artifacts are absent, and what are their impacts?

Answer:

In the absence of strong natural artifacts, bugs in NLP models can still be simulated using several techniques.

One approach is to use only a small subset of labeled data for training, which could cause the model to exploit spurious correlations, leading to poor performance (Kulesza et al., 2010).

Another method involves injecting wrong labels into the training data, which can significantly degrade model quality (Koh and Liang, 2017).

Using out-of-distribution tests can reveal that the model does not work effectively in domains it has not been trained on (Lertvittayakumjorn et al., 2020; Yao et al., 2021).

These techniques give rise to undesirable model behaviors, necessitating debugging.","Question:

How can bugs be simulated in NLP models when strong natural artifacts are absent, and what are their impacts?

Answer:

In the absence of strong natural artifacts, bugs can still be simulated using several techniques.

First, using only a small subset of labeled data (SS) for training could cause the model to exploit spurious correlation leading to poor performance (Kulesza et al., 2010).

Second, injecting wrong labels (WL) into the training data can obviously blunt the model quality (Koh and Liang, 2017).Third, using out-of-distribution tests (OD) can reveal that the model does not work effectively in the domains that it has not been trained on (Lertvittayakumjorn et al., 2020;Yao et al., 2021).

All of these techniques give rise to undesirable model behaviors, requiring debugging."
258426970,Bridging the Gap: A Survey on Integrating (Human) Feedback for Natural Language Generation,https://www.semanticscholar.org/paper/74b05bba46db21e589a2cc0f916f81069b0368ef,Decoding with Feedback Models,5,"As mentioned, feedback models have the advantage that they can be queried cheaply for feedback once trained. Perhaps for this reason, most approaches that leverage feedback models by sampling a large number of candidate generations, and reranking them according to the feedback model:

whereĥ ϕ is a trained (numerical) feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017). by the model (for example, by sampling from its distribution multiple times).

In machine translation, Fernandes et al. (2022) andFreitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation. Their framework comprises a candidate generation stage followed by a ranking stage, in which the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N -best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002). The highest-scoring candidate is then chosen as the final translation. Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system, and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model. Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization"" (see below).

Additionally, there are several works combining MT and APE systems at decoding time, in which the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).

Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans. This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding). They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","sent1: As mentioned, feedback models have the advantage that they can be queried cheaply for feedback once trained.
sent2: Perhaps for this reason, most approaches that leverage feedback models by sampling a large number of candidate generations, and reranking them according to the feedback model:whereĥ ϕ is a trained (numerical) feedback model and C is a set of S candidate generations given specific regularization terms, such as the KL terms in PPO (Schulman et al., 2017).
sent3: by the model (for example, by sampling from its distribution multiple times).
sent4: In machine translation, Fernandes et al. (2022) andFreitag et al. (2022a) build upon recent advances in automatic quality estimation and evaluation via feedback model training to improve generation.
sent5: Their framework comprises a candidate generation stage followed by a ranking stage, in which the candidates are scored using quality metrics trained to regress on human assessments (reward models) (Rei et al., 2020a,b) via N -best list reranking or minimum Bayes risk (MBR) decoding (Kumar and Byrne, 2002).
sent6: The highest-scoring candidate is then chosen as the final translation.
sent7: Li et al. (2022) collected a dataset of both numerical and natural language feedback for responses from a QA system, and finetuned a pretrained model to predict both kinds of feedback, using the predicted scores from this feedback model to re-rank the predictions from the model.
sent8: Gao et al. (2022) also used this approach to study the scaling properties of feedback models and the problem of ""overoptimization"" (see below).
sent9: Additionally, there are several works combining MT and APE systems at decoding time, in which the output of an MT system is further improved by an APE system (Bhattacharyya et al., 2022).
sent10: Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.
sent11: This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding).
sent12: They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","1. What advantage do feedback models have once they are trained? sent1
2. How do most approaches leverage feedback models in natural language generation? sent2
    2.1. What is the process used in machine translation to improve generation using feedback models? sent4
        2.1.1. What does the framework for improving machine translation generation involve? sent5
        2.1.2. How is the final translation chosen in this framework? sent6
    2.2. How did Li et al. (2022) utilize feedback for a QA system? sent7
    2.3. What did Gao et al. (2022) study regarding feedback models? sent8
    2.4. How are MT and APE systems combined at decoding time? sent9
3. What is the overoptimization problem in feedback models? sent10
    3.1. How is the overoptimization problem addressed in preference models? sent11
    3.2. What did Gao et al. (2022) find about the use of preference models during training or decoding? sent12","Question: How is the overoptimization problem in feedback models addressed, and what are its implications during training or decoding?

Supporting sentence: sent10, sent11, sent12","How is the overoptimization problem in feedback models addressed, and what are its implications during training or decoding?","sent10, sent11, sent12",2,implement,"Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.

This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding).

They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem.","One problem that arises when optimizing a system with a feedback model is that the model is only an imperfect proxy for the ground truth human feedback, leading to ""overoptimization"" where systems receive good feedback from the model but not from humans.

This issue is referred to as the overoptimization problem, and it is a primary reason for incorporating a regularization term. Gao et al. (2022) examine this problem in preference models by optimizing against it using reinforcement learning during training and reranking outputs during decoding.

Both using preference models during training or decoding resulted in similar levels of overoptimization, and the scale of the generation model provided little assistance in addressing this issue.","Question:

How is the overoptimization problem in feedback models addressed, and what are its implications during training or decoding?

Answer:

One problem that arises when optimizing a system with a feedback model is that the model is only an imperfect proxy for the ground truth human feedback, leading to ""overoptimization"" where systems receive good feedback from the model but not from humans.

This issue is referred to as the overoptimization problem, and it is a primary reason for incorporating a regularization term. Gao et al. (2022) examine this problem in preference models by optimizing against it using reinforcement learning during training and reranking outputs during decoding.

Both using preference models during training or decoding resulted in similar levels of overoptimization, and the scale of the generation model provided little assistance in addressing this issue.","Question:

How is the overoptimization problem in feedback models addressed, and what are its implications during training or decoding?

Answer:

Feedback Model Overoptimization One problem that arises when optimizing a system with a feedback model is that this model is only an imperfect proxy for the ground truth human feedback, therefore, ""overoptimizing"" for them can lead to systems that receive good feedback from the model, but not humans.

This problem is known as the overoptimization problem, and is the main reason for the regularization term in Equation 11 Gao et al. (2022) studies the overoptimization problem in preference models, by both optimizing against it with reinforcement learning (training) and reranking outputs with it (decoding).

They found that both using preference models during training or decoding led to similar levels of overoptimization, and that the scale of the generation model helps little with this problem."
258378266,Neural Ranking with Weak Supervision for Open-Domain Question Answering : A Survey,https://www.semanticscholar.org/paper/c22621ebbdd9c5d73b2eeb2b57dbc9f3547b780e,Discussion,6,"If the heuristics or QG are properly designed, NR models trained from their supervision can even match the fully-supervised performance Ren et al., 2022). The biggest challenge is the difficulty to pick the most suitable heuristics or QG when we face a new domain. A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available , so as avoiding the need to manually fixing the WS signals, but this would bring significant computational overhead. In practice hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, which makes them most similar to the actual relevance annotations. However, hyperlink information is not available in most domains and thereby limits its use cases . QG-based WS signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents. Nonetheless, obtaining a high-performing QG can also be non-trivial. One big challenge comes from the one-to-many mapping relations between questions and documents. Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document. For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap. We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.","sent1: If the heuristics or QG are properly designed, NR models trained from their supervision can even match the fully-supervised performance Ren et al., 2022).
sent2: The biggest challenge is the difficulty to pick the most suitable heuristics or QG when we face a new domain.
sent3: A general solution is to automatically select good pseudo pairs with reinforcement learning (RL) when minimal target-domain annotations are available , so as avoiding the need to manually fixing the WS signals, but this would bring significant computational overhead.
sent4: In practice hyperlink-based approaches often perform the best among the heuristics as they have additional reference information to leverage, which makes them most similar to the actual relevance annotations.
sent5: However, hyperlink information is not available in most domains and thereby limits its use cases .
sent6: QG-based WS signals are often preferred over heuristics-based ones as they can produce naturally-sound questions themselves without relying on the chance to find good pseudo questions in the documents.
sent7: Nonetheless, obtaining a high-performing QG can also be non-trivial.
sent8: One big challenge comes from the one-to-many mapping relations between questions and documents.
sent9: Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.
sent10: For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.
sent11: We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.","1. What can NR models achieve if heuristics or QG are properly designed? sent1
2. What is the biggest challenge when facing a new domain in NR models? sent2
3. What is a general solution for selecting good pseudo pairs in NR models, and what is its drawback? sent3
4. Which approach often performs best among heuristics, and why? sent4
5. What limits the use cases of hyperlink-based approaches? sent5
6. Why are QG-based WS signals often preferred over heuristics-based ones? sent6
7. What is a challenge in obtaining a high-performing QG? sent7
8. What is one big challenge related to the mapping relations between questions and documents? sent8
9. What does standard supervised learning tend to produce under one-to-many mapping relations? sent9
10. What did Shinoda et al. (2021) find about QG in relation to model bias? sent10
11. What training techniques are needed to alleviate model bias towards safe questions? sent11","Question: What are the challenges and solutions in designing high-performing QG for neural ranking models?

Supporting sentence: sent7, sent8, sent9, sent10, sent11",What are the challenges and solutions in designing high-performing QG for neural ranking models?,"sent7, sent8, sent9, sent10, sent11",4,implement,"Nonetheless, obtaining a high-performing QG can also be non-trivial.

One big challenge comes from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions.","Obtaining a high-performing QG can be non-trivial.

One significant challenge arises from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

More sophisticated training techniques, such as latent-variable models (Shen and Su, 2018) and reinforcement learning (Yuan et al., 2017; Zhang and Bansal, 2019; Shen et al., 2019a), are needed to alleviate the model bias towards safe questions.","Question:

What are the challenges and solutions in designing high-performing QG for neural ranking models?

Answer:

Obtaining a high-performing QG can be non-trivial.

One significant challenge arises from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

More sophisticated training techniques, such as latent-variable models (Shen and Su, 2018) and reinforcement learning (Yuan et al., 2017; Zhang and Bansal, 2019; Shen et al., 2019a), are needed to alleviate the model bias towards safe questions.","Question:

What are the challenges and solutions in designing high-performing QG for neural ranking models?

Answer:

Nonetheless, obtaining a high-performing QG can also be non-trivial.

One big challenge comes from the one-to-many mapping relations between questions and documents.

Under this situation, standard supervised learning tends to produce safe questions with less diversity and high lexical overlap with the document.

For example, Shinoda et al. (2021) found that QG reinforces the model bias towards high lexical overlap.

We will need more sophisticated training techniques such as latent-variable models (Shen and Su, 2018; and reinforcement learning (Yuan et al., 2017;Zhang and Bansal, 2019;Shen et al., 2019a) to alleviate the model bias towards safe questions."
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,Counter machines,6,"Counter machines are automata with integer-valued registers, which have been studied extensively in connection with LSTM RNNs (Weiss et al., 2018;Suzgun et al., 2019;Merrill, 2019Merrill, , 2020)).Bhattamishra et al. (2020a), following Merrill et al. (2020), define a subclass of counter machines called simplified and stateless -counter machines (SSCMs).These machines use a counter update function  : Σ → Z  to increment and decrement each counter based on the current input symbol, but they have no state and cannot look at the counter values until the end of the string.They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.","sent1: Counter machines are automata with integer-valued registers, which have been studied extensively in connection with LSTM RNNs (Weiss et al., 2018;Suzgun et al., 2019;Merrill, 2019Merrill, , 2020)).Bhattamishra et al. (2020a), following Merrill et al. (2020), define a subclass of counter machines called simplified and stateless -counter machines (SSCMs).These machines use a counter update function  : Σ → Z  to increment and decrement each counter based on the current input symbol, but they have no state and cannot look at the counter values until the end of the string.
sent2: They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.","1. What are counter machines and how are they related to LSTM RNNs? sent1
    1.1. What is a subclass of counter machines defined by Bhattamishra et al. (2020a)? sent1
        1.1.1. How do simplified and stateless counter machines (SSCMs) operate? sent1
2. What transformation is possible with SSCMs according to Bhattamishra et al. (2020a)? sent2","Question: How can simplified and stateless counter machines (SSCMs) be transformed into an equivalent transformer encoder?

Supporting sentence: sent2",How can simplified and stateless counter machines (SSCMs) be transformed into an equivalent transformer encoder?,sent2,2,implement,They then show that any SSCM can be converted to an equivalent transformer encoder with causal masking and no residual connections.,N/A,"Question:

How can simplified and stateless counter machines (SSCMs) be transformed into an equivalent transformer encoder?

Answer:

N/A","Question:

How can simplified and stateless counter machines (SSCMs) be transformed into an equivalent transformer encoder?

Answer:

N/A"
247627890,"Vision-and-Language Navigation: A Survey of Tasks, Methods, and Future Directions",https://www.semanticscholar.org/paper/4f1d598f919aae55c3cbbc425ef1514a54e2b8cd,Semantic Understanding,7,"Semantic understanding of VLN tasks incorporates knowledge about important features in VLN. In addition to the raw features, high-level semantic representations also improve performance in unseen environments.

Intra-Modality Visual or textual modalities can be decomposed into many features, which matter differently in VLN. The overall visual features extracted by a neural model may actually hurt the performance in some cases (Thomason et al., 2019a;Hu et al., 2019;Zhang et al., 2020b). Therefore, it is important to find the feature(s) that best improve performance. High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019). Different types of tokens within the instruction also function differently (Zhu et al., 2021b). Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).

Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021). The soft alignment also highlights relevant parts of the instruction with respect to the current step (Landi et al., 2019;Zhang et al., 2020a).","sent1: Semantic understanding of VLN tasks incorporates knowledge about important features in VLN.
sent2: In addition to the raw features, high-level semantic representations also improve performance in unseen environments.
sent3: Intra-Modality Visual or textual modalities can be decomposed into many features, which matter differently in VLN.
sent4: The overall visual features extracted by a neural model may actually hurt the performance in some cases (Thomason et al., 2019a;Hu et al., 2019;Zhang et al., 2020b).
sent5: Therefore, it is important to find the feature(s) that best improve performance.
sent6: High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019).
sent7: Different types of tokens within the instruction also function differently (Zhu et al., 2021b).
sent8: Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).
sent9: Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021).
sent10: The soft alignment also highlights relevant parts of the instruction with respect to the current step (Landi et al., 2019;Zhang et al., 2020a).","1. What does semantic understanding of VLN tasks incorporate? sent1
2. How do high-level semantic representations affect performance in unseen environments? sent2
3. How can visual or textual modalities be decomposed in VLN? sent3
4. What impact can overall visual features have on performance? sent4
5. Why is it important to find the best feature(s) in VLN? sent5
6. Which high-level features outperform low-level visual features extracted by CNN? sent6
7. How do different types of tokens within the instruction function? sent7
8. Why is extracting and encoding object and direction tokens crucial? sent8
9. What can be extracted and aligned with attention mechanisms in inter-modality semantic connections? sent9
10. What does the soft alignment highlight in relation to the current step? sent10","Question: How do high-level semantic representations and feature extraction improve performance in Vision-and-Language Navigation tasks?

Supporting sentence: sent2, sent5, sent6, sent8, sent9",How do high-level semantic representations and feature extraction improve performance in Vision-and-Language Navigation tasks?,"sent2, sent5, sent6, sent8, sent9",4,implement,"In addition to the raw features, high-level semantic representations also improve performance in unseen environments.

Therefore, it is important to find the feature(s) that best improve performance.

High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019).

Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).

Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021).","High-level semantic representations, in addition to raw features, improve performance in Vision-and-Language Navigation tasks in unseen environments.

Therefore, identifying the features that best enhance performance is crucial.

High-level features such as visual appearance, route structure, and detected objects outperform the low-level visual features extracted by CNN (Hu et al., 2019).

Extracting and encoding object tokens and direction tokens are crucial for enhancing performance (Qi et al., 2020a; Zhu et al., 2021b).

Inter-modality semantic connections between actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and softly aligned using an attention mechanism (Qi et al., 2020a; Gao et al., 2021).","Question:

How do high-level semantic representations and feature extraction improve performance in Vision-and-Language Navigation tasks?

Answer:

High-level semantic representations, in addition to raw features, improve performance in Vision-and-Language Navigation tasks in unseen environments.

Therefore, identifying the features that best enhance performance is crucial.

High-level features such as visual appearance, route structure, and detected objects outperform the low-level visual features extracted by CNN (Hu et al., 2019).

Extracting and encoding object tokens and direction tokens are crucial for enhancing performance (Qi et al., 2020a; Zhu et al., 2021b).

Inter-modality semantic connections between actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and softly aligned using an attention mechanism (Qi et al., 2020a; Gao et al., 2021).","Question:

How do high-level semantic representations and feature extraction improve performance in Vision-and-Language Navigation tasks?

Answer:

In addition to the raw features, high-level semantic representations also improve performance in unseen environments.

Therefore, it is important to find the feature(s) that best improve performance.

High-level features such as visual appearance, route structure, and detected objects outperform the low level visual features extracted by CNN (Hu et al., 2019).

Extracting these tokens and encoding the object tokens and directions tokens are crucial (Qi et al., 2020a;Zhu et al., 2021b).

Inter-Modality Semantic connections between different modalities: actions, scenes, observed objects, direction clues, and objects mentioned in instructions can be extracted and then softly aligned with attention mechanism (Qi et al., 2020a;Gao et al., 2021)."
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Overview,7,"There are three kinds of automatic metrics to evaluate performances of related models:

• Accuracy of ZP Recovery: this aims to measure model performance on detecting and predicting ZPs of sentences in one pro-drop language. For instance, the micro F1-score is used to evaluating Chinese ZPR systems Song et al. (2020). 11 • General Translation Quality: there are a number of automatic evaluation metrics for measuring general performance of MT systems (Snover  Table 4: Correlation between the manual evaluation and other automatic metrics, which are applied on different ZPT benchmarks, which are same as in Table 2. et al., 2006). BLEU (Papineni et al., 2002) is the most widely-used one, which measures the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations. ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match. Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models which obtains new SOTA levels of correlation with human judgements. • Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation. As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances. To fix this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).","sent1: There are three kinds of automatic metrics to evaluate performances of related models:• Accuracy of ZP Recovery: this aims to measure model performance on detecting and predicting ZPs of sentences in one pro-drop language.
sent2: For instance, the micro F1-score is used to evaluating Chinese ZPR systems Song et al. (2020).
sent3: 11 • General Translation Quality: there are a number of automatic evaluation metrics for measuring general performance of MT systems (Snover  Table 4: Correlation between the manual evaluation and other automatic metrics, which are applied on different ZPT benchmarks, which are same as in Table 2. et al., 2006).
sent4: BLEU (Papineni et al., 2002) is the most widely-used one, which measures the precision of n-grams of the MT output compared to the reference, weighted by a brevity penalty to punish overly short translations.
sent5: ME-TEOR (Banerjee and Lavie, 2005) incorporates semantic information by calculating either exact match, stem match, or synonymy match.
sent6: Furthermore, COMET (Rei et al., 2020) is a neural framework for training multilingual MT evaluation models which obtains new SOTA levels of correlation with human judgements.
sent7: • Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation.
sent8: As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances.
sent9: To fix this gap, some works proposed pronoun-targeted evaluation metrics (Werlen and Popescu-Belis, 2017; Läubli et al., 2018).","1. What are the three kinds of automatic metrics used to evaluate the performance of models in zero pronoun translation? sent1
    1.1. How is the accuracy of ZP recovery measured? sent2
    1.2. What are some automatic evaluation metrics for measuring general translation quality? sent3
        1.2.1. What is BLEU and how does it measure translation quality? sent4
        1.2.2. How does ME-TEOR incorporate semantic information in its evaluation? sent5
        1.2.3. What is COMET and what does it achieve in MT evaluation? sent6
    1.3. Why are general-purpose metrics insufficient for pronoun-aware translation quality? sent7
        1.3.1. How do missed or incorrect pronouns affect BLEU scores and true performance? sent8
        1.3.2. What has been proposed to address the gap in pronoun-aware translation evaluation? sent9","Question: How do missed or incorrect pronouns impact BLEU scores and the actual performance of zero pronoun translation?

Supporting sentence: sent7, sent8",How do missed or incorrect pronouns impact BLEU scores and the actual performance of zero pronoun translation?,"sent7, sent8",2,implement,"• Pronoun-Aware Translation Quality: Previous works usually evaluate ZPT using the BLEU metric (Wang et al., 2016a(Wang et al., , 2018aRi et al., 2021), however, general-purpose metrics cannot characterize the performance of ZP translation.

As shown in Table 3, the missed or incorrect pronouns may not affect BLEU scores but severely harm true performances.",N/A,"Question:

How do missed or incorrect pronouns impact BLEU scores and the actual performance of zero pronoun translation?

Answer:

N/A","Question:

How do missed or incorrect pronouns impact BLEU scores and the actual performance of zero pronoun translation?

Answer:

N/A"
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,First-order logic with majority,5,"Merrill and Sabharwal (2023a) further tighten the L-uniform TC 0 upper bound of Merrill and Sabharwal (2023b) to DLOGTIME-uniform TC 0 , and therefore FOM [BIT].The proof constructs subroutines to answer queries about the types of nodes and connectivity of pairs of nodes in the computation graph of a transformer, and shows that these queries can be translated to queries for a TC 0 circuit family with  (log ) time overhead.which is first-order logic with counting quantifiers, using two sorts for positions and counts (Immerman, 1999, p. 185-187), where positions have the MOD predicate (but not < or =), and counts have <, +, and =, capturing the fact that transformers can add and compare activations, but not positions.They show that this logic is intermediate in expressivity between  (1)-precision and infinite-precision transformers.The lower-bound proof makes use of a normal form that eliminates quantifiers over counts and makes quantifiers over positions have depth 1; a perhaps surprising consequence is that  (1)-precision transformers are no more powerful than 2-layer uniform-attention transformers.Weiss et al. (2021) define a programming language called RASP (Restricted Access Sequence Programming Language) and show that it can be compiled to transformers with average-hard attention and two extensions: • Attention weights are directly computed from the previous layer without being confined to dotproducts of query and key vectors.• Position-wise FFNs compute arbitrary computable functions.Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.Element-wise operations are approximately compiled to ReLU FFNs.Friedman et al. (2023) define Transformer Programs, a restricted class of transformers that can be translated into RASP programs.","sent1: Merrill and Sabharwal (2023a) further tighten the L-uniform TC 0 upper bound of Merrill and Sabharwal (2023b) to DLOGTIME-uniform TC 0 , and therefore FOM [BIT].The proof constructs subroutines to answer queries about the types of nodes and connectivity of pairs of nodes in the computation graph of a transformer, and shows that these queries can be translated to queries for a TC 0 circuit family with  (log ) time overhead.which is first-order logic with counting quantifiers, using two sorts for positions and counts (Immerman, 1999, p. 185-187), where positions have the MOD predicate (but not < or =), and counts have <, +, and =, capturing the fact that transformers can add and compare activations, but not positions.
sent2: They show that this logic is intermediate in expressivity between  (1)-precision and infinite-precision transformers.
sent3: The lower-bound proof makes use of a normal form that eliminates quantifiers over counts and makes quantifiers over positions have depth 1; a perhaps surprising consequence is that  (1)-precision transformers are no more powerful than 2-layer uniform-attention transformers.
sent4: Weiss et al. (2021) define a programming language called RASP (Restricted Access Sequence Programming Language) and show that it can be compiled to transformers with average-hard attention and two extensions: • Attention weights are directly computed from the previous layer without being confined to dotproducts of query and key vectors.• Position-wise FFNs compute arbitrary computable functions.
sent5: Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.
sent6: It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.
sent7: Element-wise operations are approximately compiled to ReLU FFNs.
sent8: Friedman et al. (2023) define Transformer Programs, a restricted class of transformers that can be translated into RASP programs.","1. What did Merrill and Sabharwal (2023a) achieve regarding the L-uniform TC 0 upper bound? sent1
    1.1. How is the proof constructed to answer queries in the computation graph of a transformer? sent1
2. What is the expressivity of the logic shown by Merrill and Sabharwal (2023a)? sent2
3. What does the lower-bound proof reveal about (1)-precision transformers? sent3
4. What is RASP, and who defined it? sent4
    4.1. What are the two extensions of RASP mentioned by Weiss et al. (2021)? sent4
5. What did Lindner et al. (2023) describe regarding RASP? sent5
    5.1. How does the RASP compiler work according to Lindner et al. (2023)? sent6, sent7
6. What are Transformer Programs, and who defined them? sent8","Question: How does the RASP compiler translate RASP programs into standard transformers, and what are its limitations?

Supporting sentence: sent5, sent6, sent7","How does the RASP compiler translate RASP programs into standard transformers, and what are its limitations?","sent5, sent6, sent7",2,implement,"Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.

It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.

Element-wise operations are approximately compiled to ReLU FFNs.","The RASP compiler described by Lindner et al. (2023) translates RASP programs into standard transformers.

It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.

Element-wise operations are approximately compiled to ReLU feed-forward networks (FFNs).","Question:

How does the RASP compiler translate RASP programs into standard transformers, and what are its limitations?

Answer:

The RASP compiler described by Lindner et al. (2023) translates RASP programs into standard transformers.

It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.

Element-wise operations are approximately compiled to ReLU feed-forward networks (FFNs).","Question:

How does the RASP compiler translate RASP programs into standard transformers, and what are its limitations?

Answer:

Lindner et al. (2023) describe a RASP compiler that outputs standard transformers.

It compiles RASP selectors to dot-product attention, with syntactic restrictions on selectors and a maximum string length.

Element-wise operations are approximately compiled to ReLU FFNs."
254877175,A Survey of Deep Learning for Mathematical Reasoning,https://www.semanticscholar.org/paper/2dbec38fe353ab0e495ad09263389dbc9260824d,In-context Example Selection,8,"Early chain-of-thought work randomly or heuristically selects in-context examples. However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a). Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature. To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023). For example, Rubin et al. 

Early chain-of-thought work randomly or heuristically selects in-context examples. However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a). Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature. To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023). For example, Rubin et al. ","sent1: Early chain-of-thought work randomly or heuristically selects in-context examples.
sent2: However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).
sent3: Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.
sent4: To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).
sent5: For example, Rubin et al. Early chain-of-thought work randomly or heuristically selects in-context examples.
sent6: However, recent studies have shown that this type of few-shot learning can be highly unstable across different selections of in-context examples (Rubin et al., 2022;Liu et al., 2022a).
sent7: Therefore, which incontext reasoning examples make the most effective prompts is still an unknown problem in the literature.
sent8: To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).
sent9: For example, Rubin et al.","1. How were in-context examples selected in early chain-of-thought work? sent1
2. What have recent studies shown about the stability of few-shot learning with different in-context examples? sent2
3. What is still an unknown problem in the literature regarding in-context reasoning examples? sent3
4. What have recent works investigated to address the limitation of in-context example selection? sent4","Question: What methods have been explored to optimize the selection of in-context examples for mathematical reasoning tasks?

Supporting sentence: sent4",What methods have been explored to optimize the selection of in-context examples for mathematical reasoning tasks?,sent4,4,implement,"To address the limitation, recent work has investigated various methods to optimize the in-context examples selection process (Rubin et al., 2022;Zhang et al., 2023;Lu et al., 2022b;Yu et al., 2023;Fu et al., 2023).",N/A,"Question:

What methods have been explored to optimize the selection of in-context examples for mathematical reasoning tasks?

Answer:

N/A","Question:

What methods have been explored to optimize the selection of in-context examples for mathematical reasoning tasks?

Answer:

N/A"
252200083,"A Survey in Automatic Irony Processing: Linguistic, Cognitive, and Multi-X Perspectives",https://www.semanticscholar.org/paper/77696f90afa79ac06ea58abcc91bf5e10f72b934,Theoretical Research in Irony 2.1 Irony Theories,5,"Various definitions have been given to irony. Early studies suggested that irony is the expression whose real meaning is contradictory to its literal meaning (Grice, 1975). The Merriam-Webster Dictionary, The Oxford English Dictionary, and The Collins English Dictionary all adopted this definition and used the words ""opposite"" or ""contrary"" to explain the relationship between the literal and contextual meanings of irony.

However, more research into various types of ironic examples revealed that the contextual meaning of irony does not have to be ""opposite"" or ""contrary"" to the literal one. According to Sperber and Wilson (1986); Wilson and Sperber (2012), some expressions have no ""literal meaning"" to be challenged because no ""literal meaning"" is mentioned in the context, based on which they raised relevance theory and the ""echoic"" concept. They considered irony as ""an echoic use of language in which the speaker tacitly dissociates herself from an attributed utterance or thought"" (Wilson, 2006). That is, if the ""echoic use"" is incongruous in some ways, the expression can be ironic. Based on this theory, Seto (1998) put forward that there are some ""echo-markers"" like definitely, really, and indeed.

Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances. They believed that irony's true nature is a psychological activity as much as a verbal representation. The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed. When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.","sent1: Various definitions have been given to irony.
sent2: Early studies suggested that irony is the expression whose real meaning is contradictory to its literal meaning (Grice, 1975).
sent3: The Merriam-Webster Dictionary, The Oxford English Dictionary, and The Collins English Dictionary all adopted this definition and used the words ""opposite"" or ""contrary"" to explain the relationship between the literal and contextual meanings of irony.
sent4: However, more research into various types of ironic examples revealed that the contextual meaning of irony does not have to be ""opposite"" or ""contrary"" to the literal one.
sent5: According to Sperber and Wilson (1986); Wilson and Sperber (2012), some expressions have no ""literal meaning"" to be challenged because no ""literal meaning"" is mentioned in the context, based on which they raised relevance theory and the ""echoic"" concept.
sent6: They considered irony as ""an echoic use of language in which the speaker tacitly dissociates herself from an attributed utterance or thought"" (Wilson, 2006).
sent7: That is, if the ""echoic use"" is incongruous in some ways, the expression can be ironic.
sent8: Based on this theory, Seto (1998) put forward that there are some ""echo-markers"" like definitely, really, and indeed.
sent9: Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances.
sent10: They believed that irony's true nature is a psychological activity as much as a verbal representation.
sent11: The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed.
sent12: When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.","1. How has irony been variously defined? sent1
    1.1. What was the early definition of irony according to Grice? sent2
    1.2. How do major dictionaries define irony? sent3
    1.3. What did further research reveal about the contextual meaning of irony? sent4
2. What is the relevance theory and ""echoic"" concept proposed by Sperber and Wilson? sent5
    2.1. How do Sperber and Wilson define irony? sent6
    2.2. What makes an expression ironic according to the ""echoic use"" concept? sent7
    2.3. What are ""echo-markers"" according to Seto? sent8
3. What is Li and Huang's perspective on irony? sent9
    3.1. How do Li and Huang view the nature of irony? sent10
    3.2. What is the ""reversal"" process in the context of irony? sent11
    3.3. How does ""reversal"" differ from ""echoic"" and ""incongruity""? sent12","Question: How do Li and Huang conceptualize irony, and what is the significance of the ""reversal"" process in their perspective?  
Supporting sentence: sent9, sent10, sent11, sent12","How do Li and Huang conceptualize irony, and what is the significance of the ""reversal"" process in their perspective?  ","sent9, sent10, sent11, sent12",1,implement,"Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances.

They believed that irony's true nature is a psychological activity as much as a verbal representation.

The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed.

When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through.","Li and Huang (2020) demonstrated that ""incongruity"" in irony does not necessarily have to be between the literal and contextual meanings in certain circumstances.

They believed that irony's true nature is a psychological activity as much as a verbal representation.

The ""reversal"" process must be completed on a psychological level by the speaker or listeners.

When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" involves not only the outcomes but also the psychological processes experienced by the speakers or listeners.","Question:

How do Li and Huang conceptualize irony, and what is the significance of the ""reversal"" process in their perspective?  

Answer:

Li and Huang (2020) demonstrated that ""incongruity"" in irony does not necessarily have to be between the literal and contextual meanings in certain circumstances.

They believed that irony's true nature is a psychological activity as much as a verbal representation.

The ""reversal"" process must be completed on a psychological level by the speaker or listeners.

When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" involves not only the outcomes but also the psychological processes experienced by the speakers or listeners.","Question:

How do Li and Huang conceptualize irony, and what is the significance of the ""reversal"" process in their perspective?  

Answer:

Li and Huang (2020) provided instances to show that ""incongruity"" does not have to be between the literal and contextual meanings of irony in certain circumstances.

They believed that irony's true nature is a psychological activity as much as a verbal representation.

The speaker or listeners must finish the ""reversal"" process on a psychological level for it to be completed.

When compared to the concepts of ""echoic"" and ""incongruity,"" ""reversal"" is concerned not only with the results but also with the psychological processes that the speakers/listeners go through."
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Spatial Convolution and Message Passing,4,"One can view spatial convolution as used in GNNs as a generalization of the convolution used in neu-ral networks such as CNNs. As an example, in the case of images, one can imagine 2D convolution as being applied to a regular grid of nodes where each node represents a pixel in the image. The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbours of the target node. Generalizing this idea to a non-regular grids leads to spatial convolution. However, different to images and regular grids, in graphs, the neighbours of each target node are unordered and can vary in number and their feature vector representation. The major challenge with this extension consists therefore in dealing with the unordered and inconsistent neighbourhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.

Directly translating the above description of convolution into a mathematical formulation leads to a valid information propagation scheme. However, such a description suffers from scalability issues due to it directly operating over the entire graph. As such modern GNNs use, what is commonly referred to as, message passing. In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbours for a number of iterations. Thereby the network is able to diffuse information throughout the graph. Consequently, the more iterations, the further outwards information is propagated throughout the graph. In the terminology of CNNs one would say that the more message passing iterations, the larger the receptive field of the convolution. Formally, one can define message passing (Grattarola and Alippi, 2021) for each time step t as two equations:

This first equation describes how messages are generated. A differentiable function ϕ generates messages m for each edge which connects nodes using the node features and edge feature present.

The above equation is the core of the message passing framework and describes how each node feature is updated. The first part consists in the application of a permutation-invariant reduction function ρ. This function aggregates all incoming messages to a node. Then another differen-tiable function ψ combines the reduced messages received with the previous state. Using these two equations one can utilize message passing for learnable layers.

The convolution layer for a GNN is then defined with a learnable weight W such that the message per edge is m t+1 i,j = x t j and the aggregation is the normalized sum of messages, i.e.

where M (i) represents the set of messages received by node i, σ is the activation function, b is the bias, and c j,i is an appropriate scaling factor, e.g., the square root of the node degree. Note how it is important for the reduction function, in this case a sum function, to be permutation-invariant as otherwise GNNs could not handle the unordered nature of graphs.

The above presented convolution layer does not allow the model to filter unimportant neighbours. Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour. A schematic depiction of the two variants of spatial convolution can be seen in Figure 1 with GAT depicted on the lower part of the figure. The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages. Just as in transformers GAT is formulated with multi-head attention. The modification to the previously presented convolution layer follows closely the common attention formulation. Formally, x t+1

where α i,j is the attention score between node i and node j and K denotes the number of concatenated heads. The attention scores are computed with

. This score is then normalized to obtain the attention score per edge α i,j = sof tmax i (r i,j ). We want to highlight here a recent development which Brody et al. (2021) simply denote as GATv2. Their main improvement aims at the fact that in the above calculation both learnable parameters a and W effectively fold into a single linear layer, thus the expressive power of the layer is less than what it could be. The fix introduced by GATv2 pulls the two parameters apart, thus achieving more expressive power while not increasing computational complexity. Taking the above description the attention score for GATv2 is modified as follows

). In both synthetic and real datasets this modification shows superior performance, which is supported by a theoretical analysis of the authors.

There are numerous modifications and extensions to the basic convolution presented here. However, for ATS models, GAT layers are dominating as the workhorse for most models. The reasoning for their dominance can be explained by the similar success that attention transformers have had in conventional neural networks for AST. We expect that GATv2 will continue this trend as it is an attractive and simple improvement for the currently dominating GAT. Although the authors of GATv2 note that it is not yet entirely clear which tasks would benefit the most from the usage of GATv2 over GAT, which will require more research and models to use GATv2.

In ATS the graphs used are in nearly all cases not homogeneous. However, the equations presented here do not work for heterogeneous graphs. The solution for this problem involves defining one convolution layer for each node type combination occurring within the graph. In the case of the already discussed sentence and word node graph there would be four possible combinations of types, and four convolution layers which would have to be defined if the graph were fully connected.

Convolution is a central aspect of GNNs, but pooling also presents an important and common operation, especially whenever GNNs are used jointly with other models. Pooling in GNNs is achieved by generating a global representation of the graph, or a subset of the graph, by pooling together features of nodes. This is usually done with some function f where f is commonly the mean, max or sum.

We want to explicitly point out to the reader that the construction of GNNs does not require special datasets. All GNN models for ATS use the common benchmark single-document and multidocument summarization datasets such as DUC 2004 or CNN/Dailymail. The only requirement for any ATS, or textual dataset, is for the designer to find an appropriate way of encoding sentences, words, subwords etc. into feature vectors, and finding a sensible way of connecting them.","sent1: One can view spatial convolution as used in GNNs as a generalization of the convolution used in neu-ral networks such as CNNs.
sent2: As an example, in the case of images, one can imagine 2D convolution as being applied to a regular grid of nodes where each node represents a pixel in the image.
sent3: The resulting 2D convolution applied to one target node is then the weighted average of node (pixel) values of the neighbours of the target node.
sent4: Generalizing this idea to a non-regular grids leads to spatial convolution.
sent5: However, different to images and regular grids, in graphs, the neighbours of each target node are unordered and can vary in number and their feature vector representation.
sent6: The major challenge with this extension consists therefore in dealing with the unordered and inconsistent neighbourhood sizes inherent to homogeneous and heterogeneous graphs, with an additional challenge being posed by the differing feature vector representations in heterogeneous graphs.
sent7: Directly translating the above description of convolution into a mathematical formulation leads to a valid information propagation scheme.
sent8: However, such a description suffers from scalability issues due to it directly operating over the entire graph.
sent9: As such modern GNNs use, what is commonly referred to as, message passing.
sent10: In practice, this means that nodes within the graph exchange messages (perform convolutions) with their neighbours for a number of iterations.
sent11: Thereby the network is able to diffuse information throughout the graph.
sent12: Consequently, the more iterations, the further outwards information is propagated throughout the graph.
sent13: In the terminology of CNNs one would say that the more message passing iterations, the larger the receptive field of the convolution.
sent14: Formally, one can define message passing (Grattarola and Alippi, 2021) for each time step t as two equations:This first equation describes how messages are generated.
sent15: A differentiable function ϕ generates messages m for each edge which connects nodes using the node features and edge feature present.
sent16: The above equation is the core of the message passing framework and describes how each node feature is updated.
sent17: The first part consists in the application of a permutation-invariant reduction function ρ.
sent18: This function aggregates all incoming messages to a node.
sent19: Then another differen-tiable function ψ combines the reduced messages received with the previous state.
sent20: Using these two equations one can utilize message passing for learnable layers.
sent21: The convolution layer for a GNN is then defined with a learnable weight W such that the message per edge is m t+1
sent22: i,j = x t j and the aggregation is the normalized sum of messages, i.e.where M (i) represents the set of messages received by node i, σ is the activation function, b is the bias, and c j,i is an appropriate scaling factor, e.g., the square root of the node degree.
sent23: Note how it is important for the reduction function, in this case a sum function, to be permutation-invariant as otherwise GNNs could not handle the unordered nature of graphs.
sent24: The above presented convolution layer does not allow the model to filter unimportant neighbours.
sent25: Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour.
sent26: A schematic depiction of the two variants of spatial convolution can be seen in Figure 1 with GAT depicted on the lower part of the figure.
sent27: The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.
sent28: Just as in transformers GAT is formulated with multi-head attention.
sent29: The modification to the previously presented convolution layer follows closely the common attention formulation.
sent30: Formally, x t+1where α i,j is the attention score between node i and node j and K denotes the number of concatenated heads.
sent31: The attention scores are computed with.
sent32: This score is then normalized to obtain the attention score per edge α i,j = sof tmax i (r i,j ).
sent33: We want to highlight here a recent development which Brody et al. (2021) simply denote as GATv2.
sent34: Their main improvement aims at the fact that in the above calculation both learnable parameters a and W effectively fold into a single linear layer, thus the expressive power of the layer is less than what it could be.
sent35: The fix introduced by GATv2 pulls the two parameters apart, thus achieving more expressive power while not increasing computational complexity.
sent36: Taking the above description the attention score for GATv2 is modified as follows).
sent37: In both synthetic and real datasets this modification shows superior performance, which is supported by a theoretical analysis of the authors.
sent38: There are numerous modifications and extensions to the basic convolution presented here.
sent39: However, for ATS models, GAT layers are dominating as the workhorse for most models.
sent40: The reasoning for their dominance can be explained by the similar success that attention transformers have had in conventional neural networks for AST.
sent41: We expect that GATv2 will continue this trend as it is an attractive and simple improvement for the currently dominating GAT.
sent42: Although the authors of GATv2 note that it is not yet entirely clear which tasks would benefit the most from the usage of GATv2 over GAT, which will require more research and models to use GATv2.
sent43: In ATS the graphs used are in nearly all cases not homogeneous.
sent44: However, the equations presented here do not work for heterogeneous graphs.
sent45: The solution for this problem involves defining one convolution layer for each node type combination occurring within the graph.
sent46: In the case of the already discussed sentence and word node graph there would be four possible combinations of types, and four convolution layers which would have to be defined if the graph were fully connected.
sent47: Convolution is a central aspect of GNNs, but pooling also presents an important and common operation, especially whenever GNNs are used jointly with other models.
sent48: Pooling in GNNs is achieved by generating a global representation of the graph, or a subset of the graph, by pooling together features of nodes.
sent49: This is usually done with some function f where f is commonly the mean, max or sum.
sent50: We want to explicitly point out to the reader that the construction of GNNs does not require special datasets.
sent51: All GNN models for ATS use the common benchmark single-document and multidocument summarization datasets such as DUC 2004 or CNN/Dailymail.
sent52: The only requirement for any ATS, or textual dataset, is for the designer to find an appropriate way of encoding sentences, words, subwords etc. into feature vectors, and finding a sensible way of connecting them.","1. How is spatial convolution in GNNs viewed in relation to convolution in neural networks like CNNs? sent1
    1.1. How is 2D convolution applied in the context of images? sent2
        1.1.1. What is the result of applying 2D convolution to a target node in images? sent3
    1.2. How is the idea of convolution generalized to non-regular grids? sent4
    1.3. What are the challenges of applying convolution to graphs compared to images? sent5
        1.3.1. What is the major challenge with extending convolution to graphs? sent6
2. How is convolution translated into a mathematical formulation for GNNs? sent7
    2.1. What issue does the direct description of convolution face? sent8
    2.2. What method do modern GNNs use to address scalability issues? sent9
        2.2.1. How is message passing implemented in practice? sent10
            2.2.1.1. What is the effect of more message passing iterations in a graph? sent11, sent12
            2.2.1.2. How is the concept of message passing iterations related to CNNs? sent13
3. How is message passing formally defined? sent14
    3.1. How are messages generated in the message passing framework? sent15
    3.2. What is the core of the message passing framework? sent16
        3.2.1. What is the role of the permutation-invariant reduction function in message passing? sent17
        3.2.2. How are reduced messages combined with the previous state? sent19
    3.3. How is the convolution layer for a GNN defined? sent21
        3.3.1. Why is it important for the reduction function to be permutation-invariant? sent23
4. What limitation does the presented convolution layer have? sent24
    4.1. How do graph attention networks (GAT) address this limitation? sent25
        4.1.1. What does the introduction of attention scores allow in spatial convolution? sent27
        4.1.2. How is GAT formulated in relation to transformers? sent28
5. What recent development is highlighted in the context of GAT? sent33
    5.1. What improvement does GATv2 introduce? sent34, sent35
    5.2. How does GATv2 perform compared to previous models? sent37
6. What is the current trend in ATS models regarding convolution layers? sent39
    6.1. Why are GAT layers dominant in ATS models? sent40
    6.2. What is expected of GATv2 in the future? sent41
7. What challenge is noted regarding the use of GATv2? sent42
8. What is the nature of graphs used in ATS? sent43
    8.1. Why do the presented equations not work for heterogeneous graphs? sent44
    8.2. What is the solution for convolution in heterogeneous graphs? sent45
9. What is another important operation in GNNs besides convolution? sent47
    9.1. How is pooling achieved in GNNs? sent48
        9.1.1. What functions are commonly used for pooling in GNNs? sent49
10. What is noted about the construction of GNNs and datasets? sent50
    10.1. What datasets are used for GNN models in ATS? sent51
    10.2. What is required for designing ATS or textual datasets? sent52","Question: How do graph attention networks (GAT) address the limitations of traditional convolution layers in GNNs?

Supporting sentence: sent24, sent25, sent27, sent28",How do graph attention networks (GAT) address the limitations of traditional convolution layers in GNNs?,"sent24, sent25, sent27, sent28",2,implement,"The above presented convolution layer does not allow the model to filter unimportant neighbours.

Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour.

The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.

Just as in transformers GAT is formulated with multi-head attention.","Graph attention networks (GAT) address the limitation of traditional convolution layers in GNNs by allowing the model to filter unimportant neighbors.

Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), GATs (Veličković et al., 2018) assign attention scores to each neighbor.

The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.

Similar to transformers, GAT is formulated with multi-head attention.","Question:

How do graph attention networks (GAT) address the limitations of traditional convolution layers in GNNs?

Answer:

Graph attention networks (GAT) address the limitation of traditional convolution layers in GNNs by allowing the model to filter unimportant neighbors.

Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), GATs (Veličković et al., 2018) assign attention scores to each neighbor.

The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.

Similar to transformers, GAT is formulated with multi-head attention.","Question:

How do graph attention networks (GAT) address the limitations of traditional convolution layers in GNNs?

Answer:

The above presented convolution layer does not allow the model to filter unimportant neighbours.

Inspired by the attention mechanism popularized by transformer networks (Vaswani et al., 2017), graph attention networks (GAT) (Veličković et al., 2018) assign attention scores to each neighbour.

The introduction of attention scores to the spatial convolution allows the model to explicitly assign importance to certain nodes and their messages.

Just as in transformers GAT is formulated with multi-head attention."
264833196,Transformers as Recognizers of Formal Languages: A Survey on Expressivity,https://www.semanticscholar.org/paper/6624065bd2825f500e93624671793d963187d066,PARITY,5,"As the classic example of a language in (uniform) TC 0 but not AC 0 (Ajtai, 1983;Furst et al., 1984), PARITY is a particularly interesting case-study.Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.He also showed that softmax attention transformers cannot generate PARITY under the following two conditions: • all position-wise functions are Lipschitzcontinuous, and

• generation is defined using the KL divergence criterion in Eq. ( 5).

On the other hand, Chiang and Cholak (2022) showed that transformer encoders whose PE includes / do recognize PARITY.They give two constructions, corresponding to Hahn's two assumptions.The first has Lipschitz-continuous position-wise functions, but has high cross-entropy ( §4.3.1); as a generator, it would not meet criterion (5).The second construction uses layernorm with  N = 0, which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.

The apparent contradiction is resolved by considering the different assumptions underlying each result.The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.Empirically, several authors (Bhattamishra et al., 2020a;Delétang et al., 2023) have found that transformer encoders do not learn PAR-ITY.","sent1: As the classic example of a language in (uniform)
sent2: TC 0 but not AC 0 (Ajtai, 1983;Furst et al., 1984), PARITY is a particularly interesting case-study.
sent3: Hahn (2020) showed that leftmost-hard attention transformers cannot recognize PARITY, using a variant of Furst et al.'s random restriction method.
sent4: He also showed that softmax attention transformers cannot generate PARITY under the following two conditions: • all position-wise functions are Lipschitzcontinuous, and• generation is defined using the KL divergence criterion in Eq. ( 5).
sent5: On the other hand, Chiang and Cholak (2022) showed that transformer encoders whose PE includes / do recognize PARITY.They give two constructions, corresponding to Hahn's two assumptions.
sent6: The first has Lipschitz-continuous position-wise functions, but has high cross-entropy ( §4.3.1); as a generator, it would not meet criterion
sent7: (5).The second construction uses layernorm with  N = 0, which is not Lipschitz-continuous, but it has arbitrarily low cross-entropy.
sent8: The apparent contradiction is resolved by considering the different assumptions underlying each result.
sent9: The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.
sent10: Empirically, several authors (Bhattamishra et al., 2020a;Delétang et al., 2023) have found that transformer encoders do not learn PAR-ITY.","1. What is PARITY and why is it an interesting case-study? sent1, sent2
2. What did Hahn (2020) demonstrate about leftmost-hard attention transformers and PARITY? sent3
3. Under what conditions did Hahn (2020) show that softmax attention transformers cannot generate PARITY? sent4
4. What did Chiang and Cholak (2022) demonstrate about transformer encoders and PARITY? sent5
    4.1. What are the two constructions provided by Chiang and Cholak (2022) for recognizing PARITY? sent6, sent7
5. How is the apparent contradiction between Hahn's and Chiang and Cholak's results resolved? sent8
6. What does the sensitivity of PARITY's recognizability to assumptions suggest? sent9
7. What have empirical studies found about transformer encoders learning PARITY? sent10","Question: How do different assumptions affect the recognizability of PARITY by transformer encoders?

Supporting sentence: sent8, sent9",How do different assumptions affect the recognizability of PARITY by transformer encoders?,"sent8, sent9",2,implement,"The apparent contradiction is resolved by considering the different assumptions underlying each result.

The fact that PARITY's recognizability is so sensitive to assumptions suggests that it is close to the borderline of what transformer encoders can recognize.",N/A,"Question:

How do different assumptions affect the recognizability of PARITY by transformer encoders?

Answer:

N/A","Question:

How do different assumptions affect the recognizability of PARITY by transformer encoders?

Answer:

N/A"
236460241,A Survey of Code-switching: Linguistic and Social Perspectives for Language Technologies,https://www.semanticscholar.org/paper/ee6d66efc86746d42ace14db30fcbaf9d3380e25,"Code-switching, Borrowing, Transfer, Loan Translation",5,"While C-S implies active alternation between grammatical systems, borrowing does not. It is difficult to know if a lone word insertion (e.g. example (2)) constitutes a borrowing or a C-S without considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988). When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990). Similarly, what looks like complex C-S may not be perceived as switching at all. Auer (1999) distinguishes a continuum of mixing types: prototypical C-S is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community. These can look structurally identical, but the latter can be modeled as a single language (e.g. languages like Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012)) rather than the intertwining of two. Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals (in Ukraine) as 'between C-S and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate. Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other. In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009). 4.İlkokul-uİstanbul-da yap-tı-m.

primary.school-ACCİstanbul-LOC do-past-1sg. 'I finished primary school in Istanbul.'

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed. Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French. In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'. In reference French (France), there is normally no particle following the verb. The degree to which linguistic features like loan translation and transfer can be found alongside C-S is unknown.","sent1: While C-S implies active alternation between grammatical systems, borrowing does not.
sent2: It is difficult to know if a lone word insertion (e.g. example (2)) constitutes a borrowing or a C-S without considering how the items are integrated into the grammar of the receiving language (Poplack et al., 1988).
sent3: When such analyses are done, most lone-item insertions are analyzable as one-time borrowings, called nonce borrowings (Sankoff et al., 1990).
sent4: Similarly, what looks like complex C-S may not be perceived as switching at all.
sent5: Auer (1999) distinguishes a continuum of mixing types: prototypical C-S is pragmatic and intentional, Language Mixing serves no pragmatic purpose, and Mixed Languages are the single code of a community.
sent6: These can look structurally identical, but the latter can be modeled as a single language (e.g. languages like Michif Cree (Bakker, 1997) or Gurinji Kriol (Meakins, 2012)) rather than the intertwining of two.
sent7: Bilaniuk (2004) describes the Surzhyk spoken by urban Russian-Ukrainian bilinguals (in Ukraine) as 'between C-S and Mixed Language' since speakers are highly bilingual and the direction of switching is indeterminate.
sent8: Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.
sent9: In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).
sent10: 4.İlkokul-uİstanbul-da yap-tı-m.primary.school-ACCİstanbul-LOC do-past-1sg.
sent11: 'I finished primary school in Istanbul.'
sent12: In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.
sent13: Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.
sent14: In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.
sent15: In reference French (France), there is normally no particle following the verb.
sent16: The degree to which linguistic features like loan translation and transfer can be found alongside C-S is unknown.","1. What is the difference between code-switching (C-S) and borrowing? sent1
2. Why is it difficult to determine if a lone word insertion is a borrowing or a C-S? sent2
3. How are most lone-item insertions analyzed when such analyses are done? sent3
4. What might complex C-S not be perceived as? sent4
5. What continuum of mixing types does Auer (1999) distinguish? sent5
    5.1. How can the latter types in Auer's continuum be modeled? sent6
    5.2. How does Bilaniuk (2004) describe the Surzhyk spoken by urban Russian-Ukrainian bilinguals? sent7
6. What do loan translation and transfer involve? sent8
    6.1. Can you provide an example of loan translation involving Turkish and Dutch? sent9, sent10, sent11
    6.2. What does transfer involve in terms of grammatical constructions? sent12
        6.2.1. Can you provide an example of transfer involving verb particles from Germanic languages into French? sent13, sent14, sent15
7. What is unknown about the degree to which linguistic features like loan translation and transfer can be found alongside C-S? sent16","Question: How do loan translation and transfer differ in their involvement of words and grammatical constructions between languages?

Supporting sentence: sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",How do loan translation and transfer differ in their involvement of words and grammatical constructions between languages?,"sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",2,implement,"Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.

In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).

4.İlkokul-uİstanbul-da yap-tı-m.primary.school-ACCİstanbul-LOC do-past-1sg.

'I finished primary school in Istanbul.'

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.

In reference French (France), there is normally no particle following the verb.","Loan translation and transfer involve the words from only one language but incorporate the semantics and grammatical constructions from another language.

For instance, in Turkish spoken in the Netherlands, the Turkish verb ""yapmak,"" meaning ""to do,"" adopts the Dutch meaning of ""doen"" (Dogruöz and Backus, 2009).

For example, the Turkish sentence ""İlkokulu İstanbul'da yaptım"" illustrates this, where ""yapmak"" is used in the sense of the Dutch verb ""doen"" (Dogruöz and Backus, 2009).

This is exemplified by the sentence ""I finished primary school in Istanbul,"" where the Turkish verb ""yapmak"" is used in the sense of the Dutch verb ""doen"" (Dogruöz and Backus, 2009).

In transfer, grammatical constructions can be borrowed from one language to another without borrowing the words themselves.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French, the construction ""chercher après"" ('look after') is a translation of the Dutch equivalent, while in Ontario French, ""chercher pour"" is the translation equivalent of the English 'look for'.

In reference French (France), verbs typically do not have a particle following them.","Question:

How do loan translation and transfer differ in their involvement of words and grammatical constructions between languages?

Answer:

Loan translation and transfer involve the words from only one language but incorporate the semantics and grammatical constructions from another language.

For instance, in Turkish spoken in the Netherlands, the Turkish verb ""yapmak,"" meaning ""to do,"" adopts the Dutch meaning of ""doen"" (Dogruöz and Backus, 2009).

For example, the Turkish sentence ""İlkokulu İstanbul'da yaptım"" illustrates this, where ""yapmak"" is used in the sense of the Dutch verb ""doen"" (Dogruöz and Backus, 2009).

This is exemplified by the sentence ""I finished primary school in Istanbul,"" where the Turkish verb ""yapmak"" is used in the sense of the Dutch verb ""doen"" (Dogruöz and Backus, 2009).

In transfer, grammatical constructions can be borrowed from one language to another without borrowing the words themselves.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French, the construction ""chercher après"" ('look after') is a translation of the Dutch equivalent, while in Ontario French, ""chercher pour"" is the translation equivalent of the English 'look for'.

In reference French (France), verbs typically do not have a particle following them.","Question:

How do loan translation and transfer differ in their involvement of words and grammatical constructions between languages?

Answer:

Loan translation and transfer involve the words from only one language but the semantics and grammatical constructions from the other.

In example 4, the Turkish verb yapmak,' to do', takes on the Dutch meaning of doen in Turkish spoken in the Netherlands (Dogruöz and Backus, 2009).

4.İlkokul-uİstanbul-da yap-tı-m.primary.school-ACCİstanbul-LOC do-past-1sg.

'I finished primary school in Istanbul.'

In transfer, grammatical constructions can be borrowed from one language to another without the words being borrowed.

Treffers-Daller (2012) demonstrates the transfer of verb particles from Germanic languages into French.

In Brussels French (Belgium), the construction chercher après 'look after' (for 'look for') is a translation of the Dutch equivalent and, in Ontario French (Canada), chercher pour is the translation equivalent of English 'look for'.

In reference French (France), there is normally no particle following the verb."
252992688,A Survey of Active Learning for Natural Language Processing,https://www.semanticscholar.org/paper/3cd98a010b36832fc2bd8368cd4f34c72cd0ac6f,Density,4,"With the motivation to avoid outliers, density-based strategies prefer instances that are more representative of the unlabeled set. Selecting by n-gram or word counts (Ambati et al., 2010a;Zhao et al., 2020b) can be regarded as a simple way of density measurement. Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).","sent1: With the motivation to avoid outliers, density-based strategies prefer instances that are more representative of the unlabeled set.
sent2: Selecting by n-gram or word counts (Ambati et al., 2010a;Zhao et al., 2020b) can be regarded as a simple way of density measurement.
sent3: Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).","1. What is the motivation behind density-based strategies in active learning? sent1
2. How can density be measured in a simple way? sent2
3. What is the common measurement for density, and what is an alternative option to reduce calculation costs? sent3","Question: What are the common and alternative methods for measuring density in active learning, and how do they address calculation costs?  
Supporting sentence: sent3","What are the common and alternative methods for measuring density in active learning, and how do they address calculation costs?  ",sent3,2,implement,"Generally, the common measurement is an instance's average similarity to all other instances (McCallum and Nigam, 1998;. While it may be costly to calculate similarities of all instance pairs, considering only k-nearest neighbor instances has been proposed as an alternative option (Zhu et al., , 2009).",N/A,"Question:

What are the common and alternative methods for measuring density in active learning, and how do they address calculation costs?  

Answer:

N/A","Question:

What are the common and alternative methods for measuring density in active learning, and how do they address calculation costs?  

Answer:

N/A"
232320384,A Survey on Multimodal Disinformation Detection,https://www.semanticscholar.org/paper/71d2dc1fc38e0c48c865de5f5c023ccf7c5ad018,Network and Temporal Information,10,"The rationale for leveraging network information stems from early work (Shao et al., 2018;Vosoughi et al., 2018a) that showed that propagation and interaction networks of fake news are deeper and wider than those of real news. Vosoughi et al. (2018a) further found that fake information spreads faster than factual one, thus advocating for the use of temporal information.

Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts) and they can be analyzed at different scales (e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019). Shu et al. (2020) tackled the fake news classification task by proposing an approach based on hierarchical propagation networks. At both micro-and macro-scale, they extracted and jointly considered network features, temporal features, and linguistic features. Experiments on PolitiFact and GossipCop datasets revealed that temporal features have maximum contribution, followed by network and linguistic features. Shu et al. (2019) provided one of the most thorough multimodal frameworks for fake news classification. Their experimental results suggest that social context (i.e., network-derived) features are more informative than news content ones. Vosoughi et al. (2017) proposed Rumor Gauge, a system that jointly exploits temporal and propagation features, in conjunction with linguistic and user credibility features, for checking the veracity of rumors. In particular, Rumor Gauge leverages text, and network propagation. The temporal modality does not directly provide features, but is instead considered by recomputing all other features at regular time steps, thus yielding multiple time series. Results by Vosoughi et al. (2017) and Kwon et al. (2017) also demonstrated that the contribution of the different data modalities change over time.

To mitigate the ""cold start"" problem of propagation-based early detection of fake news, Liu and Wu (2018) proposed an approach that is primarily based on user and temporal information. First, they built a propagation path of each news as a time series of user representations. The time series for a given news only contains the ordered representations of those users that shared such news. Then, they learned two vector representations of each propagation path via GRUs and CNNs, respectively. Zannettou et al. (2018) analyzed different aspects of memes, such as how they evolve and propagate in different mainstream and fringe web communities, and variants of memes that propa-gate. Finally, Nguyen et al. (2020) proposed Factual News Graph (FANG) to exploit the social structure and the engagement patterns of users for fake news detection.","sent1: The rationale for leveraging network information stems from early work (Shao et al., 2018;Vosoughi et al., 2018a) that showed that propagation and interaction networks of fake news are deeper and wider than those of real news.
sent2: Vosoughi et al. (2018a) further found that fake information spreads faster than factual one, thus advocating for the use of temporal information.
sent3: Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts)
sent4: and they can be analyzed at different scales
sent5: (e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019).
sent6: Shu et al. (2020) tackled the fake news classification task by proposing an approach based on hierarchical propagation networks.
sent7: At both micro-and macro-scale, they extracted and jointly considered network features, temporal features, and linguistic features.
sent8: Experiments on PolitiFact and GossipCop datasets revealed that temporal features have maximum contribution, followed by network and linguistic features.
sent9: Shu et al. (2019) provided one of the most thorough multimodal frameworks for fake news classification.
sent10: Their experimental results suggest that social context (i.e., network-derived) features are more informative than news content ones.
sent11: Vosoughi et al. (2017) proposed Rumor Gauge, a system that jointly exploits temporal and propagation features, in conjunction with linguistic and user credibility features, for checking the veracity of rumors.
sent12: In particular, Rumor Gauge leverages text, and network propagation.
sent13: The temporal modality does not directly provide features, but is instead considered by recomputing all other features at regular time steps, thus yielding multiple time series.
sent14: Results by Vosoughi et al. (2017) and Kwon et al. (2017) also demonstrated that the contribution of the different data modalities change over time.
sent15: To mitigate the ""cold start"" problem of propagation-based early detection of fake news, Liu and Wu (2018) proposed an approach that is primarily based on user and temporal information.
sent16: First, they built a propagation path of each news as a time series of user representations.
sent17: The time series for a given news only contains the ordered representations of those users that shared such news.
sent18: Then, they learned two vector representations of each propagation path via GRUs and CNNs, respectively.
sent19: Zannettou et al. (2018) analyzed different aspects of memes, such as how they evolve and propagate in different mainstream and fringe web communities, and variants of memes that propa-gate.
sent20: Finally, Nguyen et al. (2020) proposed Factual News Graph (FANG) to exploit the social structure and the engagement patterns of users for fake news detection.","1. What is the rationale for leveraging network information in disinformation detection? sent1
2. What did Vosoughi et al. (2018a) find about the spread of fake information compared to factual information? sent2
3. What types of propagation networks exist, and how can they be analyzed? sent3, sent4, sent5
4. How did Shu et al. (2020) approach the fake news classification task? sent6
    4.1. What features did they consider at both micro-and macro-scale? sent7
    4.2. What did experiments on PolitiFact and GossipCop datasets reveal about feature contributions? sent8
5. What did Shu et al. (2019) provide in the context of fake news classification? sent9
    5.1. What do their experimental results suggest about social context features? sent10
6. What is Rumor Gauge, and what features does it exploit? sent11
    6.1. How does Rumor Gauge leverage temporal modality? sent12, sent13
    6.2. What did results by Vosoughi et al. (2017) and Kwon et al. (2017) demonstrate about data modalities? sent14
7. How did Liu and Wu (2018) propose to mitigate the ""cold start"" problem in fake news detection? sent15
    7.1. How did they build a propagation path for each news? sent16, sent17
    7.2. How did they learn vector representations of each propagation path? sent18
8. What did Zannettou et al. (2018) analyze regarding memes? sent19
9. What did Nguyen et al. (2020) propose for fake news detection? sent20","Question: How do propagation networks and their analysis contribute to disinformation detection?

Supporting sentence: sent3, sent4, sent5",How do propagation networks and their analysis contribute to disinformation detection?,"sent3, sent4, sent5",4,implement,"Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts)

and they can be analyzed at different scales

(e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019).","Propagation networks can be homogeneous or heterogeneous, encompassing elements such as news articles, publishers, users, and posts.

They can be analyzed at different scales.

They can be analyzed at various levels, such as node-level, ego-level, triad-level, community-level, and the overall network (Zhou and Zafarani, 2019).","Question:

How do propagation networks and their analysis contribute to disinformation detection?

Answer:

Propagation networks can be homogeneous or heterogeneous, encompassing elements such as news articles, publishers, users, and posts.

They can be analyzed at different scales.

They can be analyzed at various levels, such as node-level, ego-level, triad-level, community-level, and the overall network (Zhou and Zafarani, 2019).","Question:

How do propagation networks and their analysis contribute to disinformation detection?

Answer:

Propagation networks can be homogeneous or heterogeneous (e.g., encompassing news articles, publishers, users, and posts)and they can be analyzed at different scales(e.g., node-level, ego-level, triad-level, community-level and the overall network, as shown in Figure 3, in Appendix) (Zhou and Zafarani, 2019)."
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Become An Independent Research Problem.,7,"Early works extracted ZP information from closed annotations (e.g. OntoNotes and Treebanks) (Yang and Xue, 2010;Chung and Gildea, 2010), which were considered as a sub-problem of coreference or syntactic parsing. With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:

(1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money. Nonetheless, it is still necessary to establish testing datasets for validating/analyzing the model performance.

Besides, pre-trained modes are already equipped with some capabilities on discourse (Chen et al., 2019;Koto et al., 2021). This highlights the importance of formulating the downstream task in a manner that can effectively leverage the capabilities of the pre-trained models.","sent1: Early works extracted ZP information from closed annotations (e.g. OntoNotes and Treebanks) (Yang and Xue, 2010;Chung and Gildea, 2010), which were considered as a sub-problem of coreference or syntactic parsing.
sent2: With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:
sent3: (1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money.
sent4: Nonetheless, it is still necessary to establish testing datasets for validating/analyzing the model performance.
sent5: Besides, pre-trained modes are already equipped with some capabilities on discourse (Chen et al., 2019;Koto et al., 2021).
sent6: This highlights the importance of formulating the downstream task in a manner that can effectively leverage the capabilities of the pre-trained models.","1. How was Zero Pronoun (ZP) information initially extracted in early works? sent1
2. How did the MT community address the ZP problem with further investigation? sent2
    2.1. What are the challenges associated with the scarcity of ZPT data? sent3
3. Why is it necessary to establish testing datasets for ZP translation? sent4
4. What capabilities do pre-trained models already possess regarding discourse? sent5
5. Why is it important to formulate the downstream task effectively in the context of pre-trained models? sent6","Question: What challenges contribute to the scarcity of Zero Pronoun Translation (ZPT) data, and how does this impact research?  
Supporting sentence: sent2, sent3","What challenges contribute to the scarcity of Zero Pronoun Translation (ZPT) data, and how does this impact research?  ","sent2, sent3",4,implement,"With further investigation on the problem, MT community payed more attention to it by manually or automatically constructing ZP recovery and translation datasets (e.g. BaiduKnows and TVsub) (Wang et al., 2018a;. 4. Coping with Data Scarcity. The scarcity of ZPT data remains a core issue (currently only 2.2M ∼ 0.1K sentences) due to two challenges:

(1) it requires experts for both source ZP annotation and target translation (Wang et al., 2016c(Wang et al., , 2018a; (2) annotating the training data manually spends much time and money.",N/A,"Question:

What challenges contribute to the scarcity of Zero Pronoun Translation (ZPT) data, and how does this impact research?  

Answer:

N/A","Question:

What challenges contribute to the scarcity of Zero Pronoun Translation (ZPT) data, and how does this impact research?  

Answer:

N/A"
252992688,A Survey of Active Learning for Natural Language Processing,https://www.semanticscholar.org/paper/3cd98a010b36832fc2bd8368cd4f34c72cd0ac6f,Output Uncertainty,11,"Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and the most commonly utilized query strategy. It prefers the most uncertain instances judged by the model outputs. For probabilistic models, entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005) and margin-sampling (Scheffer et al., 2001;Schein and Ungar, 2007) are three typical uncertainty sampling strategies (Settles, 2009). Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification. For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000;Tong and Koller, 2001).

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region. If an instance is near the decision boundary, the model's outputs may be different within its local region. In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).","sent1: Uncertainty sampling (Lewis and Gale, 1994) is probably the simplest and the most commonly utilized query strategy.
sent2: It prefers the most uncertain instances judged by the model outputs.
sent3: For probabilistic models, entropy-based (Shannon, 1948), least-confidence (Culotta and McCallum, 2005) and margin-sampling (Scheffer et al., 2001;Schein and Ungar, 2007) are three typical uncertainty sampling strategies (Settles, 2009).
sent4: Schröder et al. (2022) revisit some of these uncertainty-based strategies with Transformer-based models and provide empirical results for text classification.
sent5: For non-probabilistic models, similar ideas can be utilized, such as selecting the instances that are close to the decision boundary in an SVM (Schohn and Cohn, 2000;Tong and Koller, 2001).
sent6: Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.
sent7: If an instance is near the decision boundary, the model's outputs may be different within its local region.
sent8: In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).","1. What is uncertainty sampling, and why is it commonly used? sent1
    1.1. How does uncertainty sampling select instances? sent2
    1.2. What are typical uncertainty sampling strategies for probabilistic models? sent3
        1.2.1. How have uncertainty-based strategies been revisited with Transformer-based models? sent4
    1.3. How can uncertainty sampling be applied to non-probabilistic models? sent5
2. What is another way to measure output uncertainty? sent6
    2.1. How does the proximity to the decision boundary affect model outputs? sent7
    2.2. What are some methods to check instances' local divergence? sent8","Question: How is output uncertainty measured through local divergence in active learning for NLP?

Supporting sentence: sent6, sent7, sent8",How is output uncertainty measured through local divergence in active learning for NLP?,"sent6, sent7, sent8",2,implement,"Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may be different within its local region.

In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020).","Output uncertainty in active learning for NLP can be measured by checking the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may vary within its local region.

Recent works explore various methods to assess instances' local divergence, including nearest-neighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b), and data augmentation (Jiang et al., 2020).","Question:

How is output uncertainty measured through local divergence in active learning for NLP?

Answer:

Output uncertainty in active learning for NLP can be measured by checking the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may vary within its local region.

Recent works explore various methods to assess instances' local divergence, including nearest-neighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b), and data augmentation (Jiang et al., 2020).","Question:

How is output uncertainty measured through local divergence in active learning for NLP?

Answer:

Another way to measure output uncertainty is to check the divergence of a model's predictions with respect to an instance's local region.

If an instance is near the decision boundary, the model's outputs may be different within its local region.

In this spirit, recent works examine different ways to check instances' local divergence, such as nearestneighbour searches (Margatina et al., 2021), adversarial perturbation (Zhang et al., 2022b) and data augmentation (Jiang et al., 2020)."
211532403,A Primer in BERTology: What we know about how BERT works,https://www.semanticscholar.org/paper/bd20069f5cac3e63083ecf6479abc1799db33ce0,Syntactic knowledge,5,"As far as how syntactic information is represented, it seems that syntactic structure is not directly encoded in self-attention weights, but they can be transformed to reflect it. Htut et al.

(2019) were unable to extract full parse trees from BERT heads even with the gold annotations for the root. Jawahar et al. (2019) include a brief illustration of a dependency tree extracted directly from self-attention weights, but provide no quantitative evaluation. However, Hewitt and Manning (2019) were able to learn transformation matrices that would successfully recover much of the Stanford Dependencies formalism for PennTreebank data (see Figure 2). Jawahar et al. (2019) try to approximate BERT representations with Tensor Product Decomposition Networks (McCoy et al., 2019a), concluding that the dependency trees are the best match among 5 decomposition schemes (although the reported MSE differences are very small).

Regarding syntactic competence of BERT's MLM, Goldberg (2019) showed that BERT takes subject-predicate agreement into account when performing the cloze task. This was the case even for sentences with distractor clauses between the subject and the verb, and meaningless sentences. A study of negative polarity items (NPIs) by Warstadt et al. (2019) showed that BERT is better able to detect the presence of NPIs (e.g. ""ever"") and the words that allow their use (e.g. ""whether"") than scope violations. The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input. In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019). This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.","sent1: As far as how syntactic information is represented, it seems that syntactic structure is not directly encoded in self-attention weights, but they can be transformed to reflect it.
sent2: Htut et al.(2019) were unable to extract full parse trees from BERT heads even with the gold annotations for the root.
sent3: Jawahar et al. (2019) include a brief illustration of a dependency tree extracted directly from self-attention weights, but provide no quantitative evaluation.
sent4: However, Hewitt and Manning (2019) were able to learn transformation matrices that would successfully recover much of the Stanford Dependencies formalism for PennTreebank data (see Figure 2).
sent5: Jawahar et al. (2019) try to approximate BERT representations with Tensor Product Decomposition Networks (McCoy et al., 2019a), concluding that the dependency trees are the best match among 5 decomposition schemes (although the reported MSE differences are very small).
sent6: Regarding syntactic competence of BERT's MLM, Goldberg (2019) showed that BERT takes subject-predicate agreement into account when performing the cloze task.
sent7: This was the case even for sentences with distractor clauses between the subject and the verb, and meaningless sentences.
sent8: A study of negative polarity items (NPIs) by Warstadt et al. (2019) showed that BERT is better able to detect the presence of NPIs (e.g. ""ever"") and the words that allow their use (e.g. ""whether"") than scope violations.
sent9: The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input.
sent10: In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019).
sent11: This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.","1. How is syntactic information represented in BERT's self-attention weights? sent1
    1.1. What did Htut et al. (2019) find regarding extracting parse trees from BERT heads? sent2
    1.2. What did Jawahar et al. (2019) illustrate about dependency trees and self-attention weights? sent3
    1.3. How did Hewitt and Manning (2019) contribute to understanding syntactic structure in BERT? sent4
    1.4. What did Jawahar et al. (2019) conclude about BERT representations and dependency trees? sent5
2. What syntactic competence does BERT's MLM demonstrate according to Goldberg (2019)? sent6
    2.1. How does BERT handle sentences with distractor clauses and meaningless sentences? sent7
3. How does BERT perform with negative polarity items (NPIs) according to Warstadt et al. (2019)? sent8
4. What limitations in BERT's syntactic knowledge are highlighted by its handling of negation and malformed input? sent9
    4.1. How does BERT's prediction behavior change with altered sentence structures? sent10
    4.2. What do recent findings on adversarial attacks suggest about BERT's syntactic encoding? sent11","Question: What are the limitations of BERT's syntactic knowledge when dealing with negation and malformed input?

Supporting sentence: sent9, sent10, sent11",What are the limitations of BERT's syntactic knowledge when dealing with negation and malformed input?,"sent9, sent10, sent11",2,implement,"The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input.

In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019).

This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge.","BERT does not ""understand"" negation and is insensitive to malformed input, which limits its syntactic knowledge.

In particular, BERT's predictions remained unchanged even when the word order was shuffled, sentences were truncated, or subjects and objects were removed (Ettinger, 2019).

These findings align with recent research on adversarial attacks, where models are disrupted by nonsensical inputs (Wallace et al., 2019a), suggesting that BERT's encoding of syntactic structure does not imply reliance on that knowledge.","Question:

What are the limitations of BERT's syntactic knowledge when dealing with negation and malformed input?

Answer:

BERT does not ""understand"" negation and is insensitive to malformed input, which limits its syntactic knowledge.

In particular, BERT's predictions remained unchanged even when the word order was shuffled, sentences were truncated, or subjects and objects were removed (Ettinger, 2019).

These findings align with recent research on adversarial attacks, where models are disrupted by nonsensical inputs (Wallace et al., 2019a), suggesting that BERT's encoding of syntactic structure does not imply reliance on that knowledge.","Question:

What are the limitations of BERT's syntactic knowledge when dealing with negation and malformed input?

Answer:

The above evidence of syntactic knowledge is belied by the fact that BERT does not ""understand"" negation and is insensitive to malformed input.

In particular, its predictions were not altered even with shuffled word order, truncated sentences, removed subjects and objects (Ettinger, 2019).

This is in line with the recent findings on adversarial attacks, with models disturbed by nonsensical inputs (Wallace et al., 2019a), and suggests that BERT's encoding of syntactic structure does not indicate that it actually relies on that knowledge."
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Model Level,4,"Another approach to generating positive examples is by leveraging the distinctive characteristics of the backbone model utilized in contrastive learning. These characteristics might be the architectural choices or using representation from certain components of the model.

Dropout is a regularization technique used in deep learning to prevent overfitting of a model. During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times. These different representations can be used as positive examples for sentence representations. Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy. Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).

Specific components of language models can be trained to generate semantically similar representations. One example is the use of prefix modules (Li and Liang, 2021), which are small, trainable modules added to a pretrained language model. In a recent study, Wang and Lu (2022) trained prefix modules on NLI data before using them to generate positive examples for unsupervised sentence representations. a","sent1: Another approach to generating positive examples is by leveraging the distinctive characteristics of the backbone model utilized in contrastive learning.
sent2: These characteristics might be the architectural choices or using representation from certain components of the model.
sent3: Dropout is a regularization technique used in deep learning to prevent overfitting of a model.
sent4: During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.
sent5: These different representations can be used as positive examples for sentence representations.
sent6: Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.
sent7: Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).
sent8: Specific components of language models can be trained to generate semantically similar representations.
sent9: One example is the use of prefix modules (Li and Liang, 2021), which are small, trainable modules added to a pretrained language model.
sent10: In a recent study, Wang and Lu (2022) trained prefix modules on NLI data before using them to generate positive examples for unsupervised sentence representations.
sent11: a","1. How can positive examples be generated in contrastive learning? sent1
    1.1. What characteristics of the backbone model are leveraged for generating positive examples? sent2
2. What is dropout and how is it used in deep learning? sent3
    2.1. How does dropout affect the representations during training? sent4
    2.2. How can different representations from dropout be used in sentence representations? sent5
    2.3. What have recent studies shown about using dropout as an augmentation strategy? sent6
    2.4. How have other works improved upon the dropout technique? sent7
3. How can specific components of language models be trained for semantically similar representations? sent8
    3.1. What are prefix modules and how are they used in language models? sent9
    3.2. How were prefix modules used in a recent study for generating positive examples? sent10","Question: How can dropout be utilized to generate positive examples for sentence representations in contrastive learning?

Supporting sentence: sent3, sent4, sent5, sent6, sent7",How can dropout be utilized to generate positive examples for sentence representations in contrastive learning?,"sent3, sent4, sent5, sent6, sent7",2,implement,"Dropout is a regularization technique used in deep learning to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d).","Dropout can be utilized to generate positive examples for sentence representations in contrastive learning by serving as a regularization technique to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can then be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it by promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as part of the transformation arsenal (Wu et al., 2022a,d).","Question:

How can dropout be utilized to generate positive examples for sentence representations in contrastive learning?

Answer:

Dropout can be utilized to generate positive examples for sentence representations in contrastive learning by serving as a regularization technique to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can then be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it by promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as part of the transformation arsenal (Wu et al., 2022a,d).","Question:

How can dropout be utilized to generate positive examples for sentence representations in contrastive learning?

Answer:

Dropout is a regularization technique used in deep learning to prevent overfitting of a model.

During training, some neurons in the layer are randomly deactivated, resulting in slightly different representations when the same training instance is passed through the model multiple times.

These different representations can be used as positive examples for sentence representations.

Recent studies, such as Gao et al. (2021), have demonstrated the effectiveness of using dropout as an augmentation strategy.

Several other works have also incorporated this technique and improved upon it: promoting decorrelation between different dimensions (Klein and Nabi, 2022) and adding it as a part of the transformation arsenal (Wu et al., 2022a,d)."
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Probed PLMs,4,"PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).","sent1: PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).",1. How are PLMs probed for knowledge? sent1,"Question: How are pre-trained language models (PLMs) probed for knowledge using their parameters?  
Supporting sentence: sent1",How are pre-trained language models (PLMs) probed for knowledge using their parameters?  ,sent1,3,implement,"PLMs are probed for knowledge using either their original pre-trained parameters (Petroni et al., 2019;Jiang et al., 2020b), or after adapting these parameters (Roberts et al., 2020;Meng et al., 2022b).",N/A,"Question:

How are pre-trained language models (PLMs) probed for knowledge using their parameters?  

Answer:

N/A","Question:

How are pre-trained language models (PLMs) probed for knowledge using their parameters?  

Answer:

N/A"
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Method Decision based on,26,"Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc. Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)

PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokens Transkimmer (Guan et al., 2022) hidden states forward tokens VCRNN (Jernite et al., 2017) input token; hidden states partial update with zero-masked weights Skim-RNN (Seo et al., 2018) input token; hidden states partial update with a small RNN HM-RNN (Chung et al., 2017) states of the gates skip a single step; ""flush"" FHRNN (Ke et al., 2018) query; hidden states update the upper RNN layer ing jumped over important information. LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed. Structural information that naturally exists in sentences can also play a role in skimming. Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark or question mark), or to the end of the text (i.e., stop reading).

In the era of Transformers, there have been works attempting to reduce computation by either skip tokens at higher layers or forward tokens to higher layers. The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores. The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function. This results in an improved balance between accuracy and processing time. TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, using reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained. In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them. The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning. The schedule for LAT is found through an evolutionary search algorithm. LTP ) trains a threshold for each Transformer layer, instead of following a predetermined schedule. It simply drops tokens with attention scores lower than the learned threshold. Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer. This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.

Computation Reduction Different from skipping, computation reduction applies a reduced computational workload for some time steps instead of skipping it completely. VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step. Upon making the decision, only the corresponding proportion of the weight matrix will be used to update the hidden states while the rest part of the weight matrix will be masked out with zero.

Instead of using part of weights to update the hidden states, Skim-RNN (Seo et al., 2018) has a big RNN and a separate small RNN. At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token. If the model decides to skim, the small RNN will update only a fraction of the hid-den states. Otherwise, a regular full update will be conducted by the big RNN.

Dynamic Hierarchical RNN Different from the aforementioned two categories of skimming, dynamic hierarchical RNN can increase computation by calling the upper layer RNN when needed. HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture. In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), they add a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.

In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed. Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering. It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.","sent1: Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc.
sent2: Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokens
sent3: Transkimmer (Guan et al., 2022) hidden states forward tokens VCRNN (Jernite et al., 2017) input token; hidden states partial update with zero-masked weights Skim-RNN (Seo et al., 2018) input token; hidden states partial update with a small RNN HM-RNN (Chung et al., 2017) states of the gates skip a single step; ""flush"" FHRNN (Ke et al., 2018) query; hidden states update the upper RNN layer ing jumped over important information.
sent4: LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.
sent5: Structural information that naturally exists in sentences can also play a role in skimming.
sent6: Structural Jump-LSTM (Hansen et al., 2019) can jump to the next word, next sub-sentence separator (a comma or colon), next sentence end symbols (a period, exclamation mark or question mark), or to the end of the text (i.e., stop reading).
sent7: In the era of Transformers, there have been works attempting to reduce computation by either skip tokens at higher layers or forward tokens to higher layers.
sent8: The PoWER-BERT model (Goyal et al., 2020) reduces the number of tokens processed by each Transformer layer based on their attention scores.
sent9: The number of tokens to be dropped, referred to as the ""schedule,"" is optimized by combining the sparsity of a soft mask layer with the original loss function.
sent10: This results in an improved balance between accuracy and processing time.
sent11: TR-BERT (Ye et al., 2021) uses a dynamic approach to determine which tokens to skip, using reinforcement learning to train the model with a reward system that prioritizes classifier confidence while also penalizing the number of tokens retained.
sent12: In contrast to PoWER-BERT, TR-BERT passes the skipped tokens to the final layer rather than discarding them.
sent13: The Length-Adaptive Transformer (LAT, Kim and Cho, 2021) utilizes LengthDrop to randomly skip tokens during pretraining, aiming to close the gap between pretraining and fine-tuning.
sent14: The schedule for LAT is found through an evolutionary search algorithm.
sent15: LTP ) trains a threshold for each Transformer layer, instead of following a predetermined schedule.
sent16: It simply drops tokens with attention scores lower than the learned threshold.
sent17: Transkimmer (Guan et al., 2022) incorporates a skim predictor module, consisting of a small MLP and Gumbel-Softmax reparameterization, before each layer.
sent18: This module outputs a mask to determine whether a token should be dropped, and a skim loss is used to optimize the ratio of skipped tokens to total tokens, promoting sparsity.
sent19: Computation Reduction Different from skipping, computation reduction applies a reduced computational workload for some time steps instead of skipping it completely.
sent20: VCRNN (Jernite et al., 2017) explores a scheduler to decide which proportion of computation to use for each time step.
sent21: Upon making the decision, only the corresponding proportion of the weight matrix will be used to update the hidden states while the rest part of the weight matrix will be masked out with zero.
sent22: Instead of using part of weights to update the hidden states, Skim-RNN (Seo et al., 2018) has a big RNN and a separate small RNN.
sent23: At each time step, the model decides whether to read or skim based on hidden states from the last time step and the input token.
sent24: If the model decides to skim, the small RNN will update only a fraction of the hid-den states.
sent25: Otherwise, a regular full update will be conducted by the big RNN.
sent26: Dynamic Hierarchical RNN Different from the aforementioned two categories of skimming, dynamic hierarchical RNN can increase computation by calling the upper layer RNN when needed.
sent27: HM-RNN (Chung et al., 2017) automatically discovers the hierarchical multi-scale structure in the data for a hierarchical RNN architecture.
sent28: In addition to the update and copy operations as in Skip RNN (Campos et al., 2018), they add a flush operation which ejects the summarized representation of the current time step to the upper layer and reinitializes the states for the next time step.
sent29: In question answering, only a small portion of tokens are relevant and can be used to answer the question while the rest can be safely skimmed.
sent30: Based on this observation, Focused Hierarchical RNN (Ke et al., 2018) aims to only pick up information that is relevant to the query for question answering.
sent31: It applies a binary gate to control whether to update the upper layer of the RNN, based on the current hidden states of the lower-level RNN and the question embedding.","1. What are some operation options for dynamic neural networks in NLP? sent1
    1.1. What are some specific models that utilize these operation options? sent2
    1.2. How does LSTM-Shuttle utilize a bidirectional shuttling mechanism? sent4
2. How can structural information in sentences aid in skimming? sent5
    2.1. How does Structural Jump-LSTM utilize structural information for skimming? sent6
3. How have Transformers been adapted to reduce computation? sent7
    3.1. How does the PoWER-BERT model reduce the number of tokens processed? sent8
        3.1.1. How is the schedule for dropping tokens in PoWER-BERT optimized? sent9
        3.1.2. What is the result of optimizing the schedule in PoWER-BERT? sent10
    3.2. How does TR-BERT determine which tokens to skip? sent11
        3.2.1. How does TR-BERT handle skipped tokens differently from PoWER-BERT? sent12
    3.3. How does the Length-Adaptive Transformer (LAT) utilize LengthDrop? sent13
        3.3.1. How is the schedule for LAT found? sent14
    3.4. How does LTP train a threshold for each Transformer layer? sent15
        3.4.1. How does LTP decide which tokens to drop? sent16
    3.5. How does Transkimmer incorporate a skim predictor module? sent17
        3.5.1. What is the purpose of the skim loss in Transkimmer? sent18
4. What is the difference between skipping and computation reduction? sent19
    4.1. How does VCRNN decide the proportion of computation to use for each time step? sent20
        4.1.1. What happens after VCRNN makes a decision on computation proportion? sent21
    4.2. How does Skim-RNN decide whether to read or skim? sent22
        4.2.1. What happens if Skim-RNN decides to skim? sent23, sent24
        4.2.2. What happens if Skim-RNN decides not to skim? sent25
5. What is the role of dynamic hierarchical RNNs in computation? sent26
    5.1. How does HM-RNN discover hierarchical multi-scale structures? sent27
        5.1.1. What additional operation does HM-RNN include compared to Skip RNN? sent28
6. How does Focused Hierarchical RNN aim to improve question answering? sent29
    6.1. What mechanism does Focused Hierarchical RNN use to control updates? sent30, sent31","Question: How do dynamic neural networks utilize operation options to enhance efficiency in NLP tasks?

Supporting sentence: sent1, sent2, sent4",How do dynamic neural networks utilize operation options to enhance efficiency in NLP tasks?,"sent1, sent2, sent4",2,implement,"Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc.

Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokens

LSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed.","Dynamic neural networks enhance efficiency in NLP tasks by utilizing operation options such as LSTM-Jump (Yu et al., 2017) for skipping multiple steps, Skip RNN (Campos et al., 2018) for stopping reading, and ReasoNet (Shen et al., 2017) for skipping a single step.

Jump-LSTM (Hansen et al., 2019) allows hidden states to stop reading and jump to the next relevant point, while PoWER (Goyal et al., 2020) uses attention to drop tokens. Additionally, TR-BERT (Ye et al., 2021) and LAT (Kim and Cho, 2021) forward tokens using hidden states and attention, respectively, and LTP employs attention to drop tokens.

LSTM-Shuttle (Fu and Ma, 2018) introduces a bidirectional shuttling mechanism that can jump multiple time steps both forward and backward, enabling the model to ignore unimportant information and recover lost information if needed.","Question:

How do dynamic neural networks utilize operation options to enhance efficiency in NLP tasks?

Answer:

Dynamic neural networks enhance efficiency in NLP tasks by utilizing operation options such as LSTM-Jump (Yu et al., 2017) for skipping multiple steps, Skip RNN (Campos et al., 2018) for stopping reading, and ReasoNet (Shen et al., 2017) for skipping a single step.

Jump-LSTM (Hansen et al., 2019) allows hidden states to stop reading and jump to the next relevant point, while PoWER (Goyal et al., 2020) uses attention to drop tokens. Additionally, TR-BERT (Ye et al., 2021) and LAT (Kim and Cho, 2021) forward tokens using hidden states and attention, respectively, and LTP employs attention to drop tokens.

LSTM-Shuttle (Fu and Ma, 2018) introduces a bidirectional shuttling mechanism that can jump multiple time steps both forward and backward, enabling the model to ignore unimportant information and recover lost information if needed.","Question:

How do dynamic neural networks utilize operation options to enhance efficiency in NLP tasks?

Answer:

Operation options LSTM-Jump (Yu et al., 2017) hidden states skip multiple steps; stop reading Skip RNN (Campos et al., 2018) states of the update gate; hidden states skip a single step ReasoNet (Shen et al., 2017) hidden states stop reading Jumper  input sentence; hidden states stop reading RIM (Li et al., 2019) input sentence; hidden states skip a single step; stop reading Yu et al. (2018) hidden states skip multiple steps; stop reading; re-read LSTM-Shuttle (Fu and Ma, 2018) hidden states skip multiple steps; jump back multiples steps Struc.

Jump-LSTM (Hansen et al., 2019) hidden states stop reading; jump to next (,;) or (.!?)PoWER (Goyal et al., 2020) attention drop tokens TR-BERT (Ye et al., 2021) hidden states forward tokens LAT (Kim and Cho, 2021) attention forward tokens LTP  attention drop tokensLSTM-Shuttle (Fu and Ma, 2018) proposes a bidirectional shuttling mechanism, which can jump multiple time steps both forward and backward, allowing the model to ignore unimportant information and recover lost information if needed."
251402499,Abstractive Meeting Summarization: A Survey,https://www.semanticscholar.org/paper/6dd2ffed96ab44004b2e4cb1bf36a44daae14d42,Discursive information,13,"While most work on abstractive meeting summarization implicitly assumes that conversation is merely a linear sequence of utterances without semantic relations between them, example (1) underscores the importance of semantic relations for conversational understanding. Drawing on similar insights, certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993;Lascarides and Asher, 2008), to improve summarization. Accounts like RST and SDRT maintain that in a coherent conversation, each (roughly) clause-level unit should be semantically related to some other part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, Contrast, etc. to reflect its contribution to the larger discourse. Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations. Figure 2 il-  , 2021a). The * indicates summary-level (with sentence split) ROUGE-L score (Lin, 2004).

lustrates a possible SDRT graph for example (1).

To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries. They employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora. Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices. Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary. A dialogue-aware data augmentation strategy for constructing pseudo-summaries is introduced to pretrain the model.

An alternative approach to discourse interpretation that developed largely independently of RST and SDRT is dialogue act classification. Detailing the differences between the approaches is out of the scope of this paper, but in a nutshell, dialogue acts provide a shallower notion of discourse structure (Jurafsky et al., 1997) in that they do not entail a full graph structure over a conversation. On the other hand, systems for dialogue act labeling, such as DAMSL (Allen and Core, 1997; Core and Allen, 1997) or DiAML (Bunt et al., 2010(Bunt et al., , 2012, place more emphasis on interactive acts such as stalling to hold the floor, assessing other discourse moves, suggesting or informing.

Both the AMI and ICSI corpora provide gold dialogue act labels, and Goo and Chen (2018) use the labels from the AMI corpus to develop a sentence-gated mechanism that jointly models the relationships between dialogue acts and topic summaries to improve abstractive meeting summarization. In particular, they show that dialogue acts of the type inform are more closely linked to summary-worthy material than acts such as stall or assess. Using LSTM, their model consists of three components enhanced with various attention mechanisms: an utterance encoder, a dialogue act labeler, and a summary decoder.

Dialogue acts have also been used to good effect for summarizing decisions. Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution. Then, key fragments of the decision related utterances are retained to form an extractive decision summary. Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007.","sent1: While most work on abstractive meeting summarization implicitly assumes that conversation is merely a linear sequence of utterances without semantic relations between them, example (1) underscores the importance of semantic relations for conversational understanding.
sent2: Drawing on similar insights, certain recent approaches exploit independent theories of discourse structure, such as Rhetorical Structure Theory (RST; Mann and Thompson, 1987) and Segmented Discourse Representation Theory (SDRT; Asher, 1993;Lascarides and Asher, 2008), to improve summarization.
sent3: Accounts like RST and SDRT maintain that in a coherent conversation, each (roughly) clause-level unit should be semantically related to some other part of the conversation via a discourse relation such as Question-Answer Pair (QAP), Acknowledgement (Ack), Explanation, Contrast, etc. to reflect its contribution to the larger discourse.
sent4: Each coherent discourse can thus be represented as a weakly-connected graph whose edges are labeled with discourse relations.
sent5: Figure 2 il-  , 2021a). The * indicates summary-level (with sentence split) ROUGE-L score (Lin, 2004).lustrates a possible SDRT graph for example (1).
sent6: To the best of our knowledge, Feng et al. (2020) is the first work to exploit discourse graphs to generate abstractive meeting summaries.
sent7: They employ a sequential discourse parser (Shi and Huang, 2019) trained on the STAC corpus of multi-party chats (Asher et al., 2016) to automatically obtain discourse graphs for the AMI and ICSI meeting corpora.
sent8: Levi graph transformation (Gross and Yellen, 2003) is then used to turn graph edges labeled with discourse relation types into vertices.
sent9: Their graph-to-sequence model consists of a graph convolutional network encoder (Schlichtkrull et al., 2018) that takes a meeting discourse graph as input and a PGN decoder (See et al., 2017) to generate the final summary.
sent10: A dialogue-aware data augmentation strategy for constructing pseudo-summaries is introduced to pretrain the model.
sent11: An alternative approach to discourse interpretation that developed largely independently of RST and SDRT is dialogue act classification.
sent12: Detailing the differences between the approaches is out of the scope of this paper, but in a nutshell, dialogue acts provide a shallower notion of discourse structure (Jurafsky et al., 1997) in that they do not entail a full graph structure over a conversation.
sent13: On the other hand, systems for dialogue act labeling, such as DAMSL (Allen and Core, 1997; Core and Allen, 1997) or DiAML (Bunt et al., 2010(Bunt et al., , 2012, place more emphasis on interactive acts such as stalling to hold the floor, assessing other discourse moves, suggesting or informing.
sent14: Both the AMI and ICSI corpora provide gold dialogue act labels, and Goo and Chen (2018) use the labels from the AMI corpus to develop a sentence-gated mechanism that jointly models the relationships between dialogue acts and topic summaries to improve abstractive meeting summarization.
sent15: In particular, they show that dialogue acts of the type inform are more closely linked to summary-worthy material than acts such as stall or assess.
sent16: Using LSTM, their model consists of three components enhanced with various attention mechanisms: an utterance encoder, a dialogue act labeler, and a summary decoder.
sent17: Dialogue acts have also been used to good effect for summarizing decisions.
sent18: Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution.
sent19: Then, key fragments of the decision related utterances are retained to form an extractive decision summary.
sent20: Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007.","1. What assumption do most works on abstractive meeting summarization make about conversation? sent1
    1.1. What do certain recent approaches exploit to improve summarization? sent2
2. What do RST and SDRT maintain about coherent conversations? sent3
    2.1. How can each coherent discourse be represented? sent4
        2.1.1. What does Figure 2 illustrate? sent5
3. What is the first work to exploit discourse graphs for abstractive meeting summaries? sent6
    3.1. How do Feng et al. (2020) obtain discourse graphs for meeting corpora? sent7
    3.2. What transformation is used to turn graph edges into vertices? sent8
    3.3. What does their graph-to-sequence model consist of? sent9
    3.4. What strategy is introduced to pretrain the model? sent10
4. What is an alternative approach to discourse interpretation? sent11
    4.1. How do dialogue acts differ from RST and SDRT? sent12
    4.2. What do systems for dialogue act labeling emphasize? sent13
5. What do the AMI and ICSI corpora provide, and how are they used by Goo and Chen (2018)? sent14
    5.1. What do Goo and Chen (2018) show about dialogue acts? sent15
    5.2. What does their model consist of? sent16
6. How have dialogue acts been used for summarizing decisions? sent17
    6.1. What do Fernández et al. (2008) and Bui et al. (2009) identify and classify in meetings? sent18
    6.2. How are key fragments of decision-related utterances used? sent19
7. What similar ideas exist in the literature regarding dialogue acts in meetings? sent20","Question: How do dialogue acts contribute to improving abstractive meeting summarization, particularly in decision-related discussions?

Supporting sentence: sent17, sent18, sent19, sent20","How do dialogue acts contribute to improving abstractive meeting summarization, particularly in decision-related discussions?","sent17, sent18, sent19, sent20",2,implement,"Dialogue acts have also been used to good effect for summarizing decisions.

Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution.

Then, key fragments of the decision related utterances are retained to form an extractive decision summary.

Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007.","Dialogue acts have been used effectively for summarizing decisions in abstractive meeting summarization.

Fernández et al. (2008) and Bui et al. (2009) identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts, such as the issue under discussion, its resolution, or agreement with the proposed resolution.

Key fragments of the decision-related utterances are then retained to form an extractive decision summary.

Similar ideas are also present in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006; Purver et al., 2007).","Question:

How do dialogue acts contribute to improving abstractive meeting summarization, particularly in decision-related discussions?

Answer:

Dialogue acts have been used effectively for summarizing decisions in abstractive meeting summarization.

Fernández et al. (2008) and Bui et al. (2009) identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts, such as the issue under discussion, its resolution, or agreement with the proposed resolution.

Key fragments of the decision-related utterances are then retained to form an extractive decision summary.

Similar ideas are also present in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006; Purver et al., 2007).","Question:

How do dialogue acts contribute to improving abstractive meeting summarization, particularly in decision-related discussions?

Answer:

Dialogue acts have also been used to good effect for summarizing decisions.

Fernández et al. (2008) and Bui et al. (2009) first identify relevant areas of decision-related discussion in meetings and classify them as decision-related dialogue acts including the issue under discussion, its resolution, or agreement with the proposed resolution.

Then, key fragments of the decision related utterances are retained to form an extractive decision summary.

Similar ideas can also be found in the literature on detecting and summarizing action-item-specific dialogue acts in meetings (Purver et al., 2006(Purver et al., , 2007."
247627890,"Vision-and-Language Navigation: A Survey of Tasks, Methods, and Future Directions",https://www.semanticscholar.org/paper/4f1d598f919aae55c3cbbc425ef1514a54e2b8cd,Initial Instruction,5,"In many VLN benchmarks, the agent is given a natural language instruction for the whole navigation process, such as ""Go upstairs and pass the table in the living room. Turn left and go through the door in the middle."" Fine-grained Navigation An agent needs to strictly follow the natural language instruction to reach the target goal. Anderson et al. (2018b) create the R2R dataset based on the Matterport3D simulator (Chang et al., 2017). An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views. R2R is extended to create other VLN benchmarks. Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019). Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018) RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments. In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview rendered simulation of New York City to find a hidden object. Most photo-realistic outdoor VLN datasets including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019;Mehta et al., 2020), StreetNav(Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021 are proposed based on Google Street View.

Some work uses natural language to guide drones. LANI (Misra et al., 2018) is a 3D synthetic navigation environment, where an agent navigates between landmarks following natural language instructions. Current datasets on drone navigation usually fall in a synthetic environment such as Unity3D (Blukis et al., 2018.","sent1: In many VLN benchmarks, the agent is given a natural language instruction for the whole navigation process, such as ""Go upstairs and pass the table in the living room.
sent2: Turn left and go through the door in the middle.""
sent3: Fine-grained Navigation An agent needs to strictly follow the natural language instruction to reach the target goal.
sent4: Anderson et al. (2018b) create the R2R dataset based on the Matterport3D simulator (Chang et al., 2017).
sent5: An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views.
sent6: R2R is extended to create other VLN benchmarks.
sent7: Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019).
sent8: Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018) RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments.
sent9: In TOUCHDOWN (Chen et al., 2019), an agent follows instructions to navigate a streetview rendered simulation of New York City to find a hidden object.
sent10: Most photo-realistic outdoor VLN datasets including TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019;Mehta et al., 2020), StreetNav(Hermann et al., 2020), and Talk2Nav (Vasudevan et al., 2021 are proposed based on Google Street View.
sent11: Some work uses natural language to guide drones.
sent12: LANI (Misra et al., 2018) is a 3D synthetic navigation environment, where an agent navigates between landmarks following natural language instructions.
sent13: Current datasets on drone navigation usually fall in a synthetic environment such as Unity3D (Blukis et al., 2018.","1. What is provided to the agent in many VLN benchmarks for the navigation process? sent1
    1.1. What is an example of a natural language instruction given to the agent? sent2
2. What is required from an agent in fine-grained navigation? sent3
3. What dataset did Anderson et al. (2018b) create, and what is it based on? sent4
    3.1. How does an embodied agent navigate in the R2R dataset? sent5
    3.2. How has R2R been extended to create other VLN benchmarks? sent6
        3.2.1. What is Roomfor-Room, and how does it relate to R2R? sent7
        3.2.2. What are some other VLN benchmarks mentioned? sent8
4. What is the task in the TOUCHDOWN dataset? sent9
5. What are most photo-realistic outdoor VLN datasets based on? sent10
6. How is natural language used in guiding drones? sent11
    6.1. What is LANI, and what does it involve? sent12
7. Where do current datasets on drone navigation usually fall? sent13","Question: How do agents navigate in the R2R dataset, and what are some extensions of this dataset in VLN benchmarks?  
Supporting sentence: sent5, sent6, sent7, sent8","How do agents navigate in the R2R dataset, and what are some extensions of this dataset in VLN benchmarks?  ","sent5, sent6, sent7, sent8",3,implement,"An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views.

R2R is extended to create other VLN benchmarks.

Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019).

Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018) RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments.","An embodied agent in the R2R dataset navigates through a house in the simulator by traversing edges on a navigation graph and jumping to adjacent nodes containing panoramic views.

R2R is extended to create other VLN benchmarks.

Roomfor-Room extends R2R by joining paths into longer trajectories (Jain et al., 2019).

Several other benchmarks have been developed as extensions of R2R, including Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021), LANI (Misra et al., 2018), RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), and SOON (Zhu et al., 2021a).","Question:

How do agents navigate in the R2R dataset, and what are some extensions of this dataset in VLN benchmarks?  

Answer:

An embodied agent in the R2R dataset navigates through a house in the simulator by traversing edges on a navigation graph and jumping to adjacent nodes containing panoramic views.

R2R is extended to create other VLN benchmarks.

Roomfor-Room extends R2R by joining paths into longer trajectories (Jain et al., 2019).

Several other benchmarks have been developed as extensions of R2R, including Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021), LANI (Misra et al., 2018), RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), and SOON (Zhu et al., 2021a).","Question:

How do agents navigate in the R2R dataset, and what are some extensions of this dataset in VLN benchmarks?  

Answer:

An embodied agent in R2R moves through a house in the simulator traversing edges on a navigation graph, jumping to adjacent nodes containing panoramic views.

R2R is extended to create other VLN benchmarks.

Roomfor-Room joins paths in R2R to longer trajectories (Jain et al., 2019).

Yan et al. (2020) (Yan et al., 2020), Landmark-RxR (He et al., 2021), VLNCE (Krantz et al., 2020), TOUCHDOWN (Chen et al., 2019), StreetLearn (Mirowski et al., 2019), StreetNav (Hermann et al., 2020), Talk2Nav (Vasudevan et al., 2021, LANI (Misra et al., 2018)

RoomNav (Wu et al., 2018), EmbodiedQA (Das et al., 2018), REVERIE (Qi et al., 2020b), SOON (Zhu et al., 2021a) IQA (  Outdoor environments are usually more complex and contain more objects than indoor environments."
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Large and Premium Data,6,"As the sizes of LLMs increase in the field of NL2Code, the scale of the corpus used for training also increases. This highlights the importance of selecting and pre-processing high-quality data. In this section, we will discuss various commonly used data sources and pre-processing strategies that are essential for training LLMs.

Early models were trained using manually annotated data pairs of NL and code, and the data sources include CodeSearchNet (Husain et al., 2019), CoST (Zhu et al., 2022b), and XL-CoST (Zhu et al., 2022a). However, manual annotation is labour-intensive and time-consuming. There are also models like GPT-3 (Brown et al., 2020), GPT-Neo (Black et al., 2021), and GPT-J (Wang and Komatsuzaki, 2021)  In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data. We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities. One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless. Additionally, specific rules are employed to filter out uncommon code files. These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate. In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","sent1: As the sizes of LLMs increase in the field of NL2Code, the scale of the corpus used for training also increases.
sent2: This highlights the importance of selecting and pre-processing high-quality data.
sent3: In this section, we will discuss various commonly used data sources and pre-processing strategies that are essential for training LLMs.
sent4: Early models were trained using manually annotated data pairs of NL and code, and the data sources include CodeSearchNet (Husain et al., 2019), CoST (Zhu et al., 2022b), and XL-CoST (Zhu et al., 2022a).
sent5: However, manual annotation is labour-intensive and time-consuming.
sent6: There are also models like GPT-3 (Brown et al., 2020), GPT-Neo (Black et al., 2021), and GPT-J (Wang and Komatsuzaki, 2021)
sent7: In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.
sent8: We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities.
sent9: One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.
sent10: Additionally, specific rules are employed to filter out uncommon code files.
sent11: These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.
sent12: In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","1. How does the increase in the size of LLMs affect the scale of the training corpus in the field of NL2Code? sent1
2. Why is selecting and pre-processing high-quality data important for training LLMs? sent2
3. What will be discussed in this section regarding data sources and pre-processing strategies? sent3
4. What were early models in NL2Code trained on, and what are some examples of data sources used? sent4
5. What are the challenges associated with manual annotation of data pairs of NL and code? sent5
6. What are some examples of models that do not rely on manual annotation? sent6
7. Why is data preprocessing important for LLMs, and what does it involve? sent7
8. Which five powerful LLMs' data pre-processing methods are reviewed, and what commonalities are identified? sent8
    8.1. What is one common pre-processing method used to ensure the quality of the training corpus? sent9
    8.2. What specific rules are employed to filter out uncommon code files? sent10, sent11
9. What is the overall goal of the pre-processing strategies for the code corpus? sent12","Question: What are the common pre-processing strategies used to ensure high-quality training data for LLMs in NL2Code?

Supporting sentence: sent7, sent8, sent9, sent10, sent11, sent12",What are the common pre-processing strategies used to ensure high-quality training data for LLMs in NL2Code?,"sent7, sent8, sent9, sent10, sent11, sent12",2,implement,"In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.

We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities.

One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.

In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","To ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.

Several commonalities in data pre-processing methods are identified among powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b).

One common strategy is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, file size, line length, and alphanumeric rate.

The goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","Question:

What are the common pre-processing strategies used to ensure high-quality training data for LLMs in NL2Code?

Answer:

To ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.

Several commonalities in data pre-processing methods are identified among powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b).

One common strategy is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, file size, line length, and alphanumeric rate.

The goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature.","Question:

What are the common pre-processing strategies used to ensure high-quality training data for LLMs in NL2Code?

Answer:

In order to ensure the quality of the training corpus, it is common for LLMs to perform data preprocessing on the significant amount of code in the collected data.

We carefully review the data pre-processing methods of five powerful LLMs, including Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), CodeGen (Nijkamp et al., 2023), In-Coder (Fried et al., 2023), and PyCodeGPT (Zan et al., 2022b), and identify several commonalities.

One is the removal of likely auto-generated or unfinished code files, as they are deemed to be meaningless.

Additionally, specific rules are employed to filter out uncommon code files.

These rules include factors such as the repository star rating, the file size, the line length, and the alphanumeric rate.

In summary, the goal of these pre-processing strategies is to achieve a code corpus that is unduplicated, complete, correct, clean, and general in nature."
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Models,8,"A generative approach models the joint probability of the sentence and the corresponding parse tree. Traditional generative models are mostly based on probabilistic grammars. To enable efficient inference, they typically make one or more relatively strict conditional independence assumptions. The simplest assumption (a.k.a. the context-free assumption) states that the generation of a token is only dependent on its head token and is independent of anything else. Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference. However, they also lead to unavailability of useful information (e.g., context and generation history) in generating each token.

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree. Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner. The generation of a child token is conditioned on the head token and the dependency direction. In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously. Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token. Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token. Headden  propose to also introduce the valence into the condition of decision sampling. Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context. Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information. In addition to these generative dependency models, other grammar formalisms have also been used for unsupervised dependency parsing, such as tree substitution grammars (Blunsom and Cohn, 2010) and combinatory categorial grammars (Bisk and Hockenmaier, 2012;Bisk and Hockenmaier, 2013).

Similar tokens may have similar syntactic behaviors in a grammar. For example, all the verbs are very likely to generate a noun to the left as the subject. One way to capture this prior knowledge is to compute generation probabilities from a set of features that conveys syntactic similarity.  use a log-linear model based on manually-designed local morpho-syntactic features (e.g., whether a word is a noun) and Jiang et al. (2016) employ a neural network to automatically learn such features. Both approaches are based on DMV.","sent1: A generative approach models the joint probability of the sentence and the corresponding parse tree.
sent2: Traditional generative models are mostly based on probabilistic grammars.
sent3: To enable efficient inference, they typically make one or more relatively strict conditional independence assumptions.
sent4: The simplest assumption (a.k.a. the context-free assumption) states that the generation of a token is only dependent on its head token and is independent of anything else.
sent5: Such assumptions make it possible to decompose the joint probability into a product of component probabilities or scores, leading to tractable inference.
sent6: However, they also lead to unavailability of useful information (e.g., context and generation history) in generating each token.
sent7: Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.
sent8: Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.
sent9: The generation of a child token is conditioned on the head token and the dependency direction.
sent10: In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.
sent11: Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.
sent12: Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token.
sent13: Headden  propose to also introduce the valence into the condition of decision sampling.
sent14: Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.
sent15: Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.
sent16: In addition to these generative dependency models, other grammar formalisms have also been used for unsupervised dependency parsing, such as tree substitution grammars (Blunsom and Cohn, 2010) and combinatory categorial grammars (Bisk and Hockenmaier, 2012;Bisk and Hockenmaier, 2013).
sent17: Similar tokens may have similar syntactic behaviors in a grammar.
sent18: For example, all the verbs are very likely to generate a noun to the left as the subject.
sent19: One way to capture this prior knowledge is to compute generation probabilities from a set of features that conveys syntactic similarity.
sent20: use a log-linear model based on manually-designed local morpho-syntactic features (e.g., whether a word is a noun) and Jiang et al. (2016) employ a neural network to automatically learn such features.
sent21: Both approaches are based on DMV.","1. What does a generative approach model in unsupervised dependency parsing? sent1
2. What are traditional generative models based on? sent2
3. What assumptions do traditional generative models make to enable efficient inference? sent3
    3.1. What is the simplest assumption made by these models? sent4
    3.2. How do these assumptions affect the decomposition of joint probability and inference? sent5
    3.3. What is a downside of these assumptions? sent6
4. How do different generative models specify the generation processes of the sentence and parse tree? sent7
    4.1. How do Paskin (2002) and Carroll and Charniak (1992) approach the generation process? sent8
        4.1.1. On what is the generation of a child token conditioned in their approach? sent9
    4.2. How does the Dependency Model with Valence (DMV) proposed by Klein and Manning (2004) differ in its approach? sent10
        4.2.1. What decision must each head token make in DMV before generating a child token? sent11
        4.2.2. What additional condition is considered in the generation of a child token in DMV? sent12
        4.2.3. What further extension does Headden propose for DMV? sent13
        4.2.4. What additional contexts do Spitkovsky et al. (2012) consider in their model? sent14
        4.2.5. What extension does Yang et al. (2020) propose for DMV? sent15
5. What other grammar formalisms have been used for unsupervised dependency parsing? sent16
6. How do similar tokens behave in a grammar, and how can this prior knowledge be captured? sent17, sent18, sent19
7. What approaches are used to compute generation probabilities based on syntactic similarity, and what models are they based on? sent20, sent21","Question: How do different generative models approach the generation process in unsupervised dependency parsing?

Supporting sentence: sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",How do different generative models approach the generation process in unsupervised dependency parsing?,"sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15",4,implement,"Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.

Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.

Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token.

Headden  propose to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.","Different generative models specify various generation processes of the sentence and parse tree based on their respective independence assumptions.

Paskin (2002) and Carroll and Charniak (1992) first uniformly sample a dependency tree skeleton and then populate the tokens conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV), which generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token in the DMV must decide whether to generate a child token based on the head token and the dependency direction before actually generating the child token.

Additionally, in the Dependency Model with Valence (DMV), the generation of a child token is conditioned on the valence, which is defined as the number of child tokens already generated from a head token.

Headden proposes to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) further condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.","Question:

How do different generative models approach the generation process in unsupervised dependency parsing?

Answer:

Different generative models specify various generation processes of the sentence and parse tree based on their respective independence assumptions.

Paskin (2002) and Carroll and Charniak (1992) first uniformly sample a dependency tree skeleton and then populate the tokens conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV), which generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token in the DMV must decide whether to generate a child token based on the head token and the dependency direction before actually generating the child token.

Additionally, in the Dependency Model with Valence (DMV), the generation of a child token is conditioned on the valence, which is defined as the number of child tokens already generated from a head token.

Headden proposes to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) further condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information.","Question:

How do different generative models approach the generation process in unsupervised dependency parsing?

Answer:

Based on their respective independence assumptions, different generative models specify different generation processes of the sentence and parse tree.

Paskin (2002) and Carroll and Charniak (1992) choose to first uniformly sample a dependency tree skeleton and then populate the tokens (words) conditioned on the dependency tree in a recursive root-to-leaf manner.

The generation of a child token is conditioned on the head token and the dependency direction.

In contrast, Klein and Manning (2004) propose the Dependency Model with Valence (DMV) that generates the sentence and the parse tree simultaneously.

Without knowing the dependency tree structure, each head token has to sample a decision (conditioned on the head token and the dependency direction) of whether to generate a child token or not before actually generating the child token.

Besides, the generation of a child token in DMV is additionally conditioned on the valence, defined as the number of the child tokens already generated from a head token.

Headden  propose to also introduce the valence into the condition of decision sampling.

Spitkovsky et al. (2012) additionally condition decision and child token generation on sibling words, sentence completeness, and punctuation context.

Yang et al. (2020) propose a second-order extension of DMV that incorporates grandparent-child or sibling information."
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,Two-Stage Supervised Keyphrase Extraction Models,8,"Different from two-stage unsupervised approaches, supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guide the whole model to rank and extract keyphrases through annotated data and optimize the two stages simultaneously. Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations. BLING-KPE achieves significant improvement over previous models. To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction. Later, Ainslie et al. (2020) replaces the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents. SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context. JointKPE 10 (Sun et al., 2020a) proposes an opendomain keyphrase extraction approach built on pretrained language models (Devlin et al., 2019;, which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP 11 (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introducing a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases. To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space. Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.  ","sent1: Different from two-stage unsupervised approaches, supervised approaches generally combine candidate keyphrase extraction and keyphrase importance estimation via an end-to-end learning framework, guide the whole model to rank and extract keyphrases through annotated data and optimize the two stages simultaneously.
sent2: Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations.
sent3: BLING-KPE achieves significant improvement over previous models.
sent4: To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.
sent5: Later, Ainslie et al. (2020) replaces the full self-attention of Transformers with local-global attention, which significantly boosts the keyphrase extraction performance for long documents.
sent6: SKE-BASE-RANK (Mu et al., 2020) proposes a span-based keyphrase extraction model to model the relationships between candidates and the document in context.
sent7: JointKPE 10 (Sun et al., 2020a) proposes an opendomain keyphrase extraction approach built on pretrained language models (Devlin et al., 2019;, which can capture both local phraseness and global informativeness when extracting keyphrases. JointKPE learns to rank keyphrases by estimating their informativeness in the whole document and is jointly trained on the keyphrase chunking task to guarantee the phraseness of keyphrase candidates. KIEMP 11 (Song et al., 2021) proposes estimating the importance score of each candidate from multiple perspectives and introducing a matching module to match the high-level concept between the document and candidates to enhance the relevance of extracted keyphrases.
sent8: To extract more relevant keyphrases, HyperMatch 12 (Song et al., 2022a) proposes a new matching framework and explores keyphrase extraction in the hyperbolic space.
sent9: Concretely, HyperMatch first maps phrase and document representations into the same hyperbolic space and explicitly models the relevance between candidate phrases and the document as the phrase-document relevance via the Poincaré distance to extract keyphrases.","1. How do supervised approaches differ from two-stage unsupervised approaches in keyphrase extraction? sent1
    1.1. How do recent supervised models obtain sufficient keyphrase candidates? sent2
2. What is the performance of BLING-KPE compared to previous models? sent3
3. How does SMART-KPE leverage external knowledge for keyphrase extraction? sent4
4. What modification did Ainslie et al. (2020) make to Transformers to improve keyphrase extraction for long documents? sent5
5. What approach does SKE-BASE-RANK propose for keyphrase extraction? sent6
6. How does JointKPE approach open-domain keyphrase extraction? sent7
    6.1. What does KIEMP propose to enhance the relevance of extracted keyphrases? sent7
7. What new framework does HyperMatch propose for keyphrase extraction? sent8
    7.1. How does HyperMatch model the relevance between candidate phrases and the document? sent9","Question: How do recent supervised models enhance keyphrase extraction using pre-trained embeddings and multimodal information?

Supporting sentence: sent2, sent4",How do recent supervised models enhance keyphrase extraction using pre-trained embeddings and multimodal information?,"sent2, sent4",2,implement,"Therefore, to obtain sufficient candidates, the recent supervised models (Xiong et (Xiong et al., 2019) formulates keyphrase extraction as an n-gram level keyphrase chunking task to determine whether a candidate is a keyphrase, which incorporates pre-trained embeddings (i.e., ELMo (Peters et al., 2018)) into a convolutional transformer network to model n-gram representations.

To leverage external knowledge to assist keyphrase extraction, SMART-KPE 9  also shows that incorporating multimodal information in web pages, such as font, size, and DOM features, can bring further improvement for open-domain web keyphrase extraction.",N/A,"Question:

How do recent supervised models enhance keyphrase extraction using pre-trained embeddings and multimodal information?

Answer:

N/A","Question:

How do recent supervised models enhance keyphrase extraction using pre-trained embeddings and multimodal information?

Answer:

N/A"
254854669,Let's Negotiate! A Survey of Negotiation Dialogue Systems,https://www.semanticscholar.org/paper/0974035826cd6d4be9c604a8679621c8621aff5f,Integrative Strategy,4,"Integrative strategy (known as win-win) modeling aims to achieve mutual gain among participants. For instance, Zhao et al. (2019) proposes to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework. LaRL can model strategy transition within a latent space. However, due to the lack of explicit strategy labels, LaRL can only analysis strategies in implicit space.

To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy. While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion. In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model. Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, which goal is to reach an agreement between employer and employee. It assists humans in becoming better negotiators during this process, e.g., communicating politely, addressing concerns, and providing side offers.","sent1: Integrative strategy (known as win-win) modeling aims to achieve mutual gain among participants.
sent2: For instance, Zhao et al. (2019) proposes to model the discourse-level strategy using a latent action reinforcement learning (LaRL) framework.
sent3: LaRL can model strategy transition within a latent space.
sent4: However, due to the lack of explicit strategy labels, LaRL can only analysis strategies in implicit space.
sent5: To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy.
sent6: While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.
sent7: In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model.
sent8: Besides, Yamaguchi et al. (2021b) present another collaborative strategy set to negotiate workload and salaries during the interview, which goal is to reach an agreement between employer and employee.
sent9: It assists humans in becoming better negotiators during this process, e.g., communicating politely, addressing concerns, and providing side offers.","1. What is the aim of integrative strategy modeling in negotiation dialogue systems? sent1
    1.1. How does Zhao et al. (2019) propose to model the discourse-level strategy? sent2
        1.1.1. What can LaRL model within a latent space? sent3
        1.1.2. What limitation does LaRL face due to the lack of explicit strategy labels? sent4
    1.2. How do Chawla et al. (2021c) address the problem of implicit strategy analysis? sent5
        1.2.1. What are some explicit strategies defined by Chawla et al. (2021c)? sent6
        1.2.2. How are these strategies utilized to capture user preferences? sent7
    1.3. What collaborative strategy set is presented by Yamaguchi et al. (2021b), and what is its goal? sent8
        1.3.1. How does this strategy set assist humans in negotiation? sent9","Question: How do Chawla et al. (2021c) define and utilize explicit strategies to address implicit strategy analysis in negotiation systems?

Supporting sentence: sent5, sent6, sent7",How do Chawla et al. (2021c) define and utilize explicit strategies to address implicit strategy analysis in negotiation systems?,"sent5, sent6, sent7",1,implement,"To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy.

While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.

In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model.","Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination, and Empathy to address implicit strategy analysis in negotiation systems.

Elicit-Preference is a strategy that attempts to discover the opponent's preference, while Coordination promotes mutual benefits through explicit offers or implicit suggestions.

Chawla et al. (2022) utilize these strategies using a hierarchical neural model to capture the user's preference.","Question:

How do Chawla et al. (2021c) define and utilize explicit strategies to address implicit strategy analysis in negotiation systems?

Answer:

Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination, and Empathy to address implicit strategy analysis in negotiation systems.

Elicit-Preference is a strategy that attempts to discover the opponent's preference, while Coordination promotes mutual benefits through explicit offers or implicit suggestions.

Chawla et al. (2022) utilize these strategies using a hierarchical neural model to capture the user's preference.","Question:

How do Chawla et al. (2021c) define and utilize explicit strategies to address implicit strategy analysis in negotiation systems?

Answer:

To resolve the problem, Chawla et al. (2021c) define a series of explicit strategies such as Elicit-Preference, Coordination and Empathy.

While Elicit-Preference is a strategy attempting to discover the preference of the opponent, Coordination promotes mutual benefits by explicit offer or implicit suggestion.

In order to capture user's preference, Chawla et al. (2022) utilize those strategies using a hierarchical neural model."
254854317,The Decades Progress on Code-Switching Research in NLP: A Systematic Survey on Trends and Challenges,https://www.semanticscholar.org/paper/44ebfdb670007b3949507be0d1a1fca93bc3d5d5,Linguistic-Driven Approaches,4,"Equivalence Constraint In a well-formed codeswitched sentence, the switching takes place at those points where the grammatical constraints of both languages are satisfied (Poplack, 1980). Fung (2012, 2013) incorporate this syntactic constraint to a statistical code-switch language model (LM) and evaluate the model on Chinese-English code-switched speech recognition. On the same line of work, Pratapa et al. (2018a); Pratapa and Choudhury (2021) implement the same constraint to Hindi-English CSW data by producing parse trees of parallel sentences and matching the surface order of child nodes in the trees. Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity. They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.

Matrix-Embedded Language Framework (MLF) Myers-Scotton (1997) proposed that in bilingual CSW, there exists an asymmetrical relationship between the dominant matrix language and the subordinate embedded language.

Matrix language provides the frame of the sentence by governing all or most of the most of the grammatical morphemes as well as word order, whereas syntactic elements that bear no or only limited grammatical function can be provided by the embedded language (Johanson, 1999;Myers-Scotton, 2005 Functional Head Constraint Belazi et al. (1994) posit that it is impossible to switch languages between a functional head and its complement because of the strong relationship between the two constituents. Li and Fung (2014) use the constraint of the LM by first expanding the search network with a translation model and then using parsing to restrict paths to those permissible under the constraint.","sent1: Equivalence Constraint In a well-formed codeswitched sentence, the switching takes place at those points where the grammatical constraints of both languages are satisfied (Poplack, 1980).
sent2: Fung (2012, 2013) incorporate this syntactic constraint to a statistical code-switch language model (LM) and evaluate the model on Chinese-English code-switched speech recognition.
sent3: On the same line of work, Pratapa et al. (2018a); Pratapa and Choudhury (2021) implement the same constraint to Hindi-English CSW data by producing parse trees of parallel sentences and matching the surface order of child nodes in the trees.
sent4: Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity.
sent5: They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.
sent6: Matrix-Embedded Language Framework (MLF) Myers-Scotton (1997) proposed that in bilingual CSW, there exists an asymmetrical relationship between the dominant matrix language and the subordinate embedded language.
sent7: Matrix language provides the frame of the sentence by governing all or most of the most of the grammatical morphemes as well as word order, whereas syntactic elements that bear no or only limited grammatical function can be provided by the embedded language
sent8: (Johanson, 1999;Myers-Scotton, 2005 Functional Head Constraint Belazi et al. (1994) posit that it is impossible to switch languages between a functional head and its complement because of the strong relationship between the two constituents.
sent9: Li and Fung (2014) use the constraint of the LM by first expanding the search network with a translation model and then using parsing to restrict paths to those permissible under the constraint.","1. What is the Equivalence Constraint in code-switching? sent1
    1.1. How has Fung incorporated the Equivalence Constraint into a statistical code-switch language model? sent2
    1.2. How have Pratapa et al. implemented the Equivalence Constraint in Hindi-English code-switching data? sent3
    1.3. How did Winata et al. apply the Equivalence Constraint to generate synthetic code-switched text? sent4
        1.3.1. How do they treat parallel sentences in their approach? sent5
2. What is the Matrix-Embedded Language Framework (MLF) in bilingual code-switching? sent6
    2.1. How does the matrix language function in the MLF framework? sent7
3. What is the Functional Head Constraint in code-switching? sent8
    3.1. How did Li and Fung utilize the Functional Head Constraint in their language model? sent9","Question: How is the Equivalence Constraint applied in generating synthetic code-switched text, and how are parallel sentences treated?

Supporting sentence: sent4, sent5","How is the Equivalence Constraint applied in generating synthetic code-switched text, and how are parallel sentences treated?","sent4, sent5",2,implement,"Winata et al. (2019c) apply the constraint to generate synthetic CSW text and find that combining the real CSW data with synthetic CSW data can effectively improve the perplexity.

They also treat parallel sentences as a linear structure and only allow switching on non-crossing alignments.",N/A,"Question:

How is the Equivalence Constraint applied in generating synthetic code-switched text, and how are parallel sentences treated?

Answer:

N/A","Question:

How is the Equivalence Constraint applied in generating synthetic code-switched text, and how are parallel sentences treated?

Answer:

N/A"
258557362,Large Language Models Meet NL2Code: A Survey,https://www.semanticscholar.org/paper/4f939f0751e5484f54089f6a97598e39afdcb3b5,Large Language Models for NL2Code,9,"Given a natural language problem description, the NL2Code task aims to automatically generate the demanded code. To illustrate this task visually, we provide a Python programming problem as an example in Figure 1, while different NL2Code benchmarks may vary in terms of language or 2 We summarize the related surveys in Appendix A.  problem domain. Existing large language models for the NL2Code task are usually based on Transformer (Vaswani et al., 2017) and are trained on a large-scale code related unlabelled corpus. For better code generation performance, most LLMs, no matter encoder-decoder or decoder-only models, employ the causal language modeling objective for training, which is to predict the token following a sequence of tokens. During inference, an LLM can tackle NL2Code problems in a zero-shot manner without fine-tuning its parameters. There are also studies employing few-shot (Austin et al., 2021) or in-context learning (Nijkamp et al., 2023) to further boost the performance. We conduct a comprehensive investigation of 27 representative LLMs for the NL2Code task. Details of each model are summarized in Table 1, where models vary in architecture, size, and accessibility. For better visualization, we present these models in chronological order in Figure 2, plotting the largest model sizes. One trend observed is that these large language models are consistently growing in size as the research field advances. Additionally, the decoder-only architecture is favoured for pre-trained models with larger sizes.

Early works, such as GPT-C (Svyatkovskiy et al., 2020), PyMT5 (Clement et al., 2020), and PLBART (Ahmad et al., 2021), have relatively small numbers of parameters and do not demonstrate strong capabilities in zero-shot code generation. Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus. Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code. While they show surprisingly good performance on NL2Code, most of them are not readily accessible. At present, a number of excellent open-source models have also been proposed, including CodeParrot (Huggingface, 2021), PolyCoder , GPT-NeoX (Black et al., 2022), and San-taCoder (Allal et al., 2023), which contribute to the thriving of LLMs for NL2Code. Besides, recent studies have proposed various approaches to address specific NL2Code scenarios. For example, JuPyT5 (Chandel et al., 2022a) is designed to work within Jupyter Notebooks, while ERNIE-Code (Chai et al., 2022), CodeGeeX (Zheng et al., 2023), andBLOOM (Scao et al., 2022) are trained to support multiple natural or programming languages. Additionally, InCoder (Fried et al., 2023), FIM (Bavarian et al., 2022), and SantaCoder (Allal et al., 2023) not only support left-to-right code prediction, but also allow for infilling arbitrary regions of code. As LLMs for NL2Code are evolving rapidly, we created a website to keep up-to-date with the latest advances by crowd-sourcing. Details of the website can be found in Appendix B.

These models are not only attractive in academia (Chen et al., 2021;Nijkamp et al., 2023;Li et al., 2022b), but also applied in real-world products to improve programming efficiency (Sobania et al., 2022a;Barke et al., 2023). One example is GitHub and OpenAI's Copilot, a programming assistance tool that utilizes Codex to provide realtime code suggestions. Other notable products include CodeGeeX 3 and CodeWhisperer 4 . A summary of 10 products can be found in Appendix Table 5. Recent studies (Sobania et al., 2022b;Pearce et al., 2022;Nguyen and Nadi, 2022) have shown that these products can provide helpful recommendations, while they also introduce minor bugs that can cause issues for users. There is still room for improvement before LLMs can be fully practical and capable of coding like humans.","sent1: Given a natural language problem description, the NL2Code task aims to automatically generate the demanded code.
sent2: To illustrate this task visually, we provide a Python programming problem as an example in Figure 1, while different NL2Code benchmarks may vary in terms of language or 2
sent3: We summarize the related surveys in Appendix A.  problem domain.
sent4: Existing large language models for the NL2Code task are usually based on Transformer (Vaswani et al., 2017) and are trained on a large-scale code related unlabelled corpus.
sent5: For better code generation performance, most LLMs, no matter encoder-decoder or decoder-only models, employ the causal language modeling objective for training, which is to predict the token following a sequence of tokens.
sent6: During inference, an LLM can tackle NL2Code problems in a zero-shot manner without fine-tuning its parameters.
sent7: There are also studies employing few-shot (Austin et al., 2021) or in-context learning (Nijkamp et al., 2023) to further boost the performance.
sent8: We conduct a comprehensive investigation of 27 representative LLMs for the NL2Code task.
sent9: Details of each model are summarized in Table 1, where models vary in architecture, size, and accessibility.
sent10: For better visualization, we present these models in chronological order in Figure 2, plotting the largest model sizes.
sent11: One trend observed is that these large language models are consistently growing in size as the research field advances.
sent12: Additionally, the decoder-only architecture is favoured for pre-trained models with larger sizes.
sent13: Early works, such as GPT-C (Svyatkovskiy et al., 2020), PyMT5 (Clement et al., 2020), and PLBART (Ahmad et al., 2021), have relatively small numbers of parameters and do not demonstrate strong capabilities in zero-shot code generation.
sent14: Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus.
sent15: Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code.
sent16: While they show surprisingly good performance on NL2Code, most of them are not readily accessible.
sent17: At present, a number of excellent open-source models have also been proposed, including CodeParrot (Huggingface, 2021), PolyCoder , GPT-NeoX (Black et al., 2022), and San-taCoder (Allal et al., 2023), which contribute to the thriving of LLMs for NL2Code.
sent18: Besides, recent studies have proposed various approaches to address specific NL2Code scenarios.
sent19: For example, JuPyT5 (Chandel et al., 2022a) is designed to work within Jupyter Notebooks, while ERNIE-Code (Chai et al., 2022), CodeGeeX (Zheng et al., 2023), andBLOOM (Scao et al., 2022) are trained to support multiple natural or programming languages.
sent20: Additionally, InCoder (Fried et al., 2023), FIM (Bavarian et al., 2022), and SantaCoder (Allal et al., 2023) not only support left-to-right code prediction, but also allow for infilling arbitrary regions of code.
sent21: As LLMs for NL2Code are evolving rapidly, we created a website to keep up-to-date with the latest advances by crowd-sourcing.
sent22: Details of the website can be found in Appendix B.These models are not only attractive in academia (Chen et al., 2021;Nijkamp et al., 2023;Li et al., 2022b), but also applied in real-world products to improve programming efficiency (Sobania et al., 2022a;Barke et al., 2023).
sent23: One example is GitHub and OpenAI's Copilot, a programming assistance tool that utilizes Codex to provide realtime code suggestions.
sent24: Other notable products include CodeGeeX 3 and CodeWhisperer 4 .
sent25: A summary of 10 products can be found in Appendix Table 5.
sent26: Recent studies (Sobania et al., 2022b;Pearce et al., 2022;Nguyen and Nadi, 2022) have shown that these products can provide helpful recommendations, while they also introduce minor bugs that can cause issues for users.
sent27: There is still room for improvement before LLMs can be fully practical and capable of coding like humans.","1. What is the NL2Code task? sent1
    1.1. How is the NL2Code task visually illustrated in the paper? sent2
    1.2. Where can related surveys be found? sent3
2. What are existing large language models for the NL2Code task based on? sent4
    2.1. What training objective do most LLMs use for better code generation performance? sent5
    2.2. How can an LLM tackle NL2Code problems during inference? sent6
    2.3. What methods are used to further boost performance in NL2Code tasks? sent7
3. How many representative LLMs for the NL2Code task are investigated in the paper? sent8
    3.1. Where can details of each model be found? sent9
    3.2. How are the models presented for better visualization? sent10
    3.3. What trend is observed in the size of large language models? sent11
    3.4. Which architecture is favored for pre-trained models with larger sizes? sent12
4. How do early works like GPT-C, PyMT5, and PLBART perform in zero-shot code generation? sent13
5. What is the limitation of large-scale models like GPT-Neo and GPT-J in the NL2Code task? sent14
6. What are some powerful LLMs recently proposed for NL2Code? sent15
    6.1. What is a limitation of these powerful LLMs? sent16
7. What are some excellent open-source models proposed for NL2Code? sent17
8. What approaches have recent studies proposed for specific NL2Code scenarios? sent18
    8.1. Can you provide examples of models designed for specific scenarios? sent19
    8.2. What additional capabilities do models like InCoder, FIM, and SantaCoder have? sent20
9. How does the paper keep up-to-date with the latest advances in LLMs for NL2Code? sent21
    9.1. Where can details of the website be found? sent22
10. How are LLMs for NL2Code applied in real-world products? sent23
    10.1. What is an example of a programming assistance tool that utilizes Codex? sent23
    10.2. What are other notable products mentioned? sent24
    10.3. Where can a summary of 10 products be found? sent25
11. What have recent studies shown about these products? sent26
12. What is the current state of LLMs in terms of coding like humans? sent27","Question: What are the limitations and challenges faced by large-scale models like GPT-Neo and GPT-J in the NL2Code task?

Supporting sentence: sent14, sent15, sent16",What are the limitations and challenges faced by large-scale models like GPT-Neo and GPT-J in the NL2Code task?,"sent14, sent15, sent16",4,implement,"Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus.

Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code.

While they show surprisingly good performance on NL2Code, most of them are not readily accessible.","Large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021) have limited power in the NL2Code task due to the small amount of code in their training corpus, despite their billion-level parameter scale.

Recently, a number of powerful large language models (LLMs) have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), and PaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpora with code.

While these models demonstrate surprisingly good performance on NL2Code, most of them are not readily accessible.","Question:

What are the limitations and challenges faced by large-scale models like GPT-Neo and GPT-J in the NL2Code task?

Answer:

Large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021) have limited power in the NL2Code task due to the small amount of code in their training corpus, despite their billion-level parameter scale.

Recently, a number of powerful large language models (LLMs) have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), and PaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpora with code.

While these models demonstrate surprisingly good performance on NL2Code, most of them are not readily accessible.","Question:

What are the limitations and challenges faced by large-scale models like GPT-Neo and GPT-J in the NL2Code task?

Answer:

Conversely, large-scale models such as GPT-Neo (Black et al., 2021) and GPT-J (Wang and Komatsuzaki, 2021), despite their billion-level parameter scale, have been found to have limited power in the NL2Code task due to the small amount of code in their training corpus.

Recently, a number of powerful LLMs have been proposed for NL2Code, such as Codex (Chen et al., 2021), AlphaCode (Li et al., 2022b), andPaLM-Coder (Chowdhery et al., 2022), which possess massive parameter scales and high-quality training corpus with code.

While they show surprisingly good performance on NL2Code, most of them are not readily accessible."
254877753,Towards Reasoning in Large Language Models: A Survey,https://www.semanticscholar.org/paper/db4ab91d5675c37795e719e997a2827d3d83cd45,Towards Reasoning in Large Language Models,5,"Reasoning, particularly multi-step reasoning, is often seen as a weakness in language models and other NLP models (Bommasani et al., 2021;Rae et al., 2021;Valmeekam et al., 2022). Recent research has suggested that reasoning ability may emerge in language models at a certain scale, such as models with over 100 billion parameters (Wei et al., 2022a,b;Cobbe et al., 2021). In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).","sent1: Reasoning, particularly multi-step reasoning, is often seen as a weakness in language models and other NLP models (Bommasani et al., 2021;Rae et al., 2021;Valmeekam et al., 2022).
sent2: Recent research has suggested that reasoning ability may emerge in language models at a certain scale, such as models with over 100 billion parameters (Wei et al., 2022a,b;Cobbe et al., 2021).
sent3: In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).","1. What is often seen as a weakness in language models and other NLP models? sent1
2. What has recent research suggested about the emergence of reasoning ability in language models? sent2
3. How does this paper approach the concept of reasoning in language models? sent3","Question: How does the paper propose to improve reasoning abilities in large language models like GPT-3 and PaLM?

Supporting sentence: sent3",How does the paper propose to improve reasoning abilities in large language models like GPT-3 and PaLM?,sent3,2,implement,"In this paper, we follow Wei et al. (2022a) in considering reasoning as an ability that is rarely present in smallscale models like GPT-2 (Radford et al., 2019) and BERT (Devlin et al., 2019), and therefore focus on techniques applicable to improving or eliciting ""reasoning"" 2 in LLMs such as GPT-3 (Brown et al., 2020) and PaLM (Chowdhery et al., 2022).",N/A,"Question:

How does the paper propose to improve reasoning abilities in large language models like GPT-3 and PaLM?

Answer:

N/A","Question:

How does the paper propose to improve reasoning abilities in large language models like GPT-3 and PaLM?

Answer:

N/A"
254854669,Let's Negotiate! A Survey of Negotiation Dialogue Systems,https://www.semanticscholar.org/paper/0974035826cd6d4be9c604a8679621c8621aff5f,Supervised Learning,6,"Supervised learning (SL) is another popular paradigm for policy learning. (Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data. However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue. Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training. The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy. In addition, Joshi et al. (2021) incorporate a pragmatic strategies graph network with the seq2seq model to create an interpretable policy learning paradigm. Recently, Dutt et al. (2021b) propose a generalised framework for identifying resisting strategies in persuasive negotiations using a pre-trained BERT model (Devlin et al., 2019).","sent1: Supervised learning (SL) is another popular paradigm for policy learning.
sent2: (Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.
sent3: However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue.
sent4: Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training.
sent5: The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy.
sent6: In addition, Joshi et al. (2021) incorporate a pragmatic strategies graph network with the seq2seq model to create an interpretable policy learning paradigm.
sent7: Recently, Dutt et al. (2021b) propose a generalised framework for identifying resisting strategies in persuasive negotiations using a pre-trained BERT model (Devlin et al., 2019).","1. What is supervised learning (SL) in the context of policy learning? sent1
2. How is a Seq2Seq model used in supervised learning for negotiation dialogue systems? sent2
3. What limitation of supervised learning is addressed by He et al. (2018), and how do they propose to overcome it? sent3
4. How do Zhou et al. (2020) utilize supervised training in negotiation dialogue systems? sent4
    4.1. How is the system response generated in Zhou et al. (2020)'s approach? sent5
5. What approach do Joshi et al. (2021) take to create an interpretable policy learning paradigm? sent6
6. What recent framework is proposed by Dutt et al. (2021b) for identifying resisting strategies in negotiations? sent7","Question: How is supervised learning applied to enhance negotiation dialogue systems, and what are its limitations and proposed solutions?

Supporting sentence: sent1, sent2, sent3, sent4, sent5","How is supervised learning applied to enhance negotiation dialogue systems, and what are its limitations and proposed solutions?","sent1, sent2, sent3, sent4, sent5",4,implement,"Supervised learning (SL) is another popular paradigm for policy learning.

(Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.

However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue.

Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training.

The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy.","Supervised learning (SL) is a popular paradigm for policy learning in negotiation dialogue systems.

Lewis et al. (2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.

However, supervised learning primarily focuses on mimicking average human behavior, so He et al. (2018) propose finetuning the supervised model to directly optimize for a specific dialogue reward function, which includes the utility function of the final price for the buyer and seller, the difference between two agents' utilities, and the number of utterances in the dialogue.

Zhou et al. (2020) train a strategy predictor using supervised training to predict whether a certain negotiation strategy will occur in the next utterance.

The system response is generated based on the user utterance, dialogue context, and the predicted negotiation strategy.","Question:

How is supervised learning applied to enhance negotiation dialogue systems, and what are its limitations and proposed solutions?

Answer:

Supervised learning (SL) is a popular paradigm for policy learning in negotiation dialogue systems.

Lewis et al. (2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.

However, supervised learning primarily focuses on mimicking average human behavior, so He et al. (2018) propose finetuning the supervised model to directly optimize for a specific dialogue reward function, which includes the utility function of the final price for the buyer and seller, the difference between two agents' utilities, and the number of utterances in the dialogue.

Zhou et al. (2020) train a strategy predictor using supervised training to predict whether a certain negotiation strategy will occur in the next utterance.

The system response is generated based on the user utterance, dialogue context, and the predicted negotiation strategy.","Question:

How is supervised learning applied to enhance negotiation dialogue systems, and what are its limitations and proposed solutions?

Answer:

Supervised learning (SL) is another popular paradigm for policy learning.

(Lewis et al., 2017) adopt a Seq2Seq model to learn what action should be taken by maximizing the likelihood of the training data.

However, supervised learning only aims to mimic the average human behavior, so He et al. (2018) propose to finetune the supervised model to directly optimize for a particular dialogue reward function, which is defined as i) the utility function of the final price for the buyer and seller ii) the difference between two agents' utilities iii) the number of utterances in the dialogue.

Zhou et al. (2020) train a strategy predictor to predict whether a certain negotiation strategy occurred in the next utterance using supervised training.

The system response would be generated conditioned on the user utterance, dialogue context, and the predicted negotiation strategy."
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Natural Language Inference,4,"Natural Language Inference (NLI) is the process of determining the logical relationship between a premise (an assumed true sentence) and a hypothesis (a possibly true sentence). The objective of NLI is to determine whether the hypothesis can be logically inferred from the premise (entailment), contradicts the premise (contradiction), or is neutral with respect to it (Dagan et al., 2013). NLI serves as a proxy for evaluating natural language understanding. According to Conneau et al. (2017), learning sentence representations using NLI data can be effectively transferred to other NLP tasks, demonstrating the generality of this approach.

In § 2.3, we discussed Siamese-BERT networks as presented in Reimers and Gurevych (2019). There are two noteworthy components to this model. First, processing inputs individually without promoting interaction between words; second, using an encoder like BERT that is not generative as its backbone model. The first component is computationally efficient but has been found to result in poorer performance compared to methods that promote interaction between words (Reimers and Gurevych, 2019). This lack of interaction can limit the network's ability to capture the nuances of language, and may result in less accurate sentence embeddings. In order to solve this, Cheng (2021) incorporate word-level interaction features into the sentence embedding while maintaining the efficiency of Siamese-BERT networks. Their approach makes use of ideas from knowledge distillation (Hinton et al., 2015): using the rich knowledge in pretrained cross-encoders and significantly improving the performance of Siamese-BERT.

Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks. Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings. They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder. This is one of the first studies that shows the utility of generative models for obtaining sentence representations.","sent1: Natural Language Inference (NLI) is the process of determining the logical relationship between a premise (an assumed true sentence) and a hypothesis (a possibly true sentence).
sent2: The objective of NLI is to determine whether the hypothesis can be logically inferred from the premise (entailment), contradicts the premise (contradiction), or is neutral with respect to it (Dagan et al., 2013).
sent3: NLI serves as a proxy for evaluating natural language understanding.
sent4: According to Conneau et al. (2017), learning sentence representations using NLI data can be effectively transferred to other NLP tasks, demonstrating the generality of this approach.
sent5: In § 2.3, we discussed Siamese-BERT networks as presented in Reimers and Gurevych (2019).
sent6: There are two noteworthy components to this model.
sent7: First, processing inputs individually without promoting interaction between words; second, using an encoder like BERT that is not generative as its backbone model.
sent8: The first component is computationally efficient but has been found to result in poorer performance compared to methods that promote interaction between words (Reimers and Gurevych, 2019).
sent9: This lack of interaction can limit the network's ability to capture the nuances of language, and may result in less accurate sentence embeddings.
sent10: In order to solve this, Cheng (2021) incorporate word-level interaction features into the sentence embedding while maintaining the efficiency of Siamese-BERT networks.
sent11: Their approach makes use of ideas from knowledge distillation (Hinton et al., 2015): using the rich knowledge in pretrained cross-encoders and significantly improving the performance of Siamese-BERT.
sent12: Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks.
sent13: Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings.
sent14: They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder.
sent15: This is one of the first studies that shows the utility of generative models for obtaining sentence representations.","1. What is Natural Language Inference (NLI)? sent1
    1.1. What is the objective of NLI? sent2
    1.2. How does NLI serve in evaluating natural language understanding? sent3
    1.3. How can learning sentence representations using NLI data be beneficial? sent4
2. What model is discussed in § 2.3, and who presented it? sent5
    2.1. What are the two noteworthy components of the Siamese-BERT model? sent6
        2.1.1. What is the impact of processing inputs individually in the Siamese-BERT model? sent7, sent8
        2.1.2. How does the lack of interaction affect the Siamese-BERT network? sent9
        2.1.3. How does Cheng (2021) address the limitations of the Siamese-BERT network? sent10
            2.1.3.1. What approach does Cheng (2021) use to improve Siamese-BERT? sent11
3. How have generative models been utilized in sentence representation? sent12
    3.1. What did Ni et al. (2022) examine regarding generative models? sent13
    3.2. What methods do Ni et al. (2022) explore using pre-trained T5 models? sent14
    3.3. What significance does the study by Ni et al. (2022) hold? sent15","Question: How do generative models contribute to sentence representation, and what methods are explored using pre-trained T5 models?

Supporting sentence: sent12, sent13, sent14, sent15","How do generative models contribute to sentence representation, and what methods are explored using pre-trained T5 models?","sent12, sent13, sent14, sent15",4,implement,"Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks.

Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings.

They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder.

This is one of the first studies that shows the utility of generative models for obtaining sentence representations.","Generative models, pretrained on large amounts of text data, can perform a myriad of tasks.

Ni et al. (2022) examined the use of generative models as a backbone for extracting sentence embeddings.

Ni et al. (2022) explore three methods using pre-trained T5 encoder-decoder models: utilizing the representation of the first token of the encoder, the representation of the first generated token of the decoder, or the mean of the representations from the encoder.

This study is among the first to demonstrate the utility of generative models for obtaining sentence representations.","Question:

How do generative models contribute to sentence representation, and what methods are explored using pre-trained T5 models?

Answer:

Generative models, pretrained on large amounts of text data, can perform a myriad of tasks.

Ni et al. (2022) examined the use of generative models as a backbone for extracting sentence embeddings.

Ni et al. (2022) explore three methods using pre-trained T5 encoder-decoder models: utilizing the representation of the first token of the encoder, the representation of the first generated token of the decoder, or the mean of the representations from the encoder.

This study is among the first to demonstrate the utility of generative models for obtaining sentence representations.","Question:

How do generative models contribute to sentence representation, and what methods are explored using pre-trained T5 models?

Answer:

Meanwhile, generative models have been pretrained on huge amounts of text data, and can perform a myriad of tasks.

Ni et al. (2022) examined the use of generative models as backbone for extracting sentence embeddings.

They ex-plore three methods using pre-trained T5 encoderdecoder models: using the representation of the first token of the encoder, using the representation of the first generated token of the decoder, or using the mean of the representations from the encoder.

This is one of the first studies that shows the utility of generative models for obtaining sentence representations."
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Intermediate Representation Encoder Decoder,8,"Autoencoder CRFAE (Cai et al., 2017) Z P (z|x) P (x|z) D-NDMV (Han et al., 2019a) Deterministic Variant S P (s|x) P (z,x|s)

Variational Autoencoder (Li et al., 2019) Z P (z|x) P (z, x) D-NDMV (Han et al., 2019a) Variational Variant S P (s|x) P (z, x|s) (Corro and Titov, 2018) Z P (z|x) P (x|z) Table 1: Major approaches based on autoencoders and variational autoencoders for unsupervised dependency parsing. Z: dependency tree. S: continuous sentence representation.x is a copy of x representing the reconstructed sentence. z is the dependency tree. s is the continuous representation of sentence x.

In addition to the EM algorithm, the learning objective can also be optimized with gradient descent. Yang et al. (2020) recently observe that gradient descent can sometimes significantly outperform EM when learning neural DMV.

Better learning results can also be achieved by manipulating the training data. Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences. Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing. Spitkovsky et al. (2013) propose to treat different learning algorithms and configurations as modules and connect them to form a network. Some approaches discussed above, such as Lateen EM and curriculum learning, can be seen as special cases of this approach.","sent1: Autoencoder CRFAE (Cai et al., 2017) Z P (z|x) P (x|z) D-NDMV (Han et al., 2019a)
sent2: Deterministic Variant S P (s|x) P (z,x|s)Variational Autoencoder (Li et al., 2019) Z P (z|x) P (z, x)
sent3: D-NDMV (Han et al., 2019a) Variational Variant S P (s|x) P (z, x|s) (Corro and Titov, 2018) Z P (z|x) P (x|z) Table 1: Major approaches based on autoencoders and variational autoencoders for unsupervised dependency parsing.
sent4: Z: dependency tree. S: continuous sentence representation.x is a copy of x representing the reconstructed sentence.
sent5: z is the dependency tree. s is the continuous representation of sentence x.
sent6: In addition to the EM algorithm, the learning objective can also be optimized with gradient descent.
sent7: Yang et al. (2020) recently observe that gradient descent can sometimes significantly outperform EM when learning neural DMV.
sent8: Better learning results can also be achieved by manipulating the training data.
sent9: Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences.
sent10: Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.
sent11: Spitkovsky et al. (2013) propose to treat different learning algorithms and configurations as modules and connect them to form a network.
sent12: Some approaches discussed above, such as Lateen EM and curriculum learning, can be seen as special cases of this approach.","1. What are the major approaches based on autoencoders and variational autoencoders for unsupervised dependency parsing? sent1, sent2, sent3
    1.1. What do the symbols Z and S represent in the context of these approaches? sent4
    1.2. What do the symbols z and s represent? sent5
2. Besides the EM algorithm, what other method can be used to optimize the learning objective? sent6
    2.1. What observation did Yang et al. (2020) make regarding gradient descent? sent7
3. How can better learning results be achieved in unsupervised dependency parsing? sent8
    3.1. How is curriculum learning applied to DMV training? sent9
    3.2. What theoretical analysis is provided by Tu and Honavar (2011)? sent10
4. What proposal is made by Spitkovsky et al. (2013) regarding learning algorithms and configurations? sent11
    4.1. How can some approaches like Lateen EM and curriculum learning be viewed in this context? sent12","Question: How can better learning results be achieved in unsupervised dependency parsing, and what role does curriculum learning play?

Supporting sentence: sent8, sent9, sent10","How can better learning results be achieved in unsupervised dependency parsing, and what role does curriculum learning play?","sent8, sent9, sent10",2,implement,"Better learning results can also be achieved by manipulating the training data.

Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences.

Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.","Better learning results in unsupervised dependency parsing can be achieved by manipulating the training data.

Spitkovsky et al. (2010a) apply curriculum learning to DMV training by initially using only the shortest sentences and gradually incorporating longer ones.

Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.","Question:

How can better learning results be achieved in unsupervised dependency parsing, and what role does curriculum learning play?

Answer:

Better learning results in unsupervised dependency parsing can be achieved by manipulating the training data.

Spitkovsky et al. (2010a) apply curriculum learning to DMV training by initially using only the shortest sentences and gradually incorporating longer ones.

Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing.","Question:

How can better learning results be achieved in unsupervised dependency parsing, and what role does curriculum learning play?

Answer:

Better learning results can also be achieved by manipulating the training data.

Spitkovsky et al. (2010a) apply curriculum learning to DMV training, which starts with only the shortest sentences and then progresses to increasingly longer sentences.

Tu and Honavar (2011) provide a theoretical analysis on the utility of curriculum learning in unsupervised dependency parsing."
222133962,A Survey of Unsupervised Dependency Parsing,https://www.semanticscholar.org/paper/16160fbefc830117a8395a4b665c39feae834e48,Variational Autoencoder-Based Approaches,4,"As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable. However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption. Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability. Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.

Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1). There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.

Recurrent Neural Network Grammars (RNNG) ) is a transition-based constituent parser, with a discriminative and a generative variant. Discriminative RNNG incrementally constructs the constituency tree of the input sentence through three kinds of operations: generating a non-terminal token, shifting, and reducing. Generative RNNG replaces the shifting operation with a word generation operation and incrementally generates a constituency tree and its corresponding sentence. The probability of each operation is calculated by a neural network. Li et al. (2019) modify RNNG for dependency parsing and use discriminative RNNG and generative RNNG as the encoder and decoder of a variational autoencoder respectively. However, because RNNG has a strong expressive power, it is prone to overfitting in the unsupervised setting. Li et al. (2019) propose to use posterior regularization to introduce linguistic knowledge as a constraint in learning, thereby mitigating this problem to a certain extent.

The model proposed by Corro and Titov (2018) is also based on a variational autoencoder. It is designed for semi-supervised dependency parsing, but in principle it can also be applied for unsupervised dependency parsing. The encoder of this model is a conditional random field model while the decoder generates a sentence based on a graph convolutional neural network whose structure is specified by the dependency tree. Since the variational autoencoder needs Monte Carlo sampling to approximate the gradient and the complexity of sampling a dependency tree is very high, Corro and Titov (2018) use Gumbel random perturbation. Jang et al. (2017) use differentiable dynamic programming to design an efficient approximate sampling algorithm.

The variational variant of D-NDMV (Han et al., 2019a) has the same structure as the deterministic variant described in Section 3.2.1, except that the variational variant probabilistically models the intermediate continuous vector conditioned on the input sentence using a Gaussian distribution. It also specifies a Gaussian prior over the intermediate continuous vector.","sent1: As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable.
sent2: However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption.
sent3: Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability.
sent4: Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.
sent5: Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1).
sent6: There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.
sent7: Recurrent Neural Network Grammars (RNNG) ) is a transition-based constituent parser, with a discriminative and a generative variant.
sent8: Discriminative RNNG incrementally constructs the constituency tree of the input sentence through three kinds of operations: generating a non-terminal token, shifting, and reducing.
sent9: Generative RNNG replaces the shifting operation with a word generation operation and incrementally generates a constituency tree and its corresponding sentence.
sent10: The probability of each operation is calculated by a neural network.
sent11: Li et al. (2019) modify RNNG for dependency parsing and use discriminative RNNG and generative RNNG as the encoder and decoder of a variational autoencoder respectively.
sent12: However, because RNNG has a strong expressive power, it is prone to overfitting in the unsupervised setting.
sent13: Li et al. (2019) propose to use posterior regularization to introduce linguistic knowledge as a constraint in learning, thereby mitigating this problem to a certain extent.
sent14: The model proposed by Corro and Titov (2018) is also based on a variational autoencoder.
sent15: It is designed for semi-supervised dependency parsing, but in principle it can also be applied for unsupervised dependency parsing.
sent16: The encoder of this model is a conditional random field model while the decoder generates a sentence based on a graph convolutional neural network whose structure is specified by the dependency tree.
sent17: Since the variational autoencoder needs Monte Carlo sampling to approximate the gradient and the complexity of sampling a dependency tree is very high, Corro and Titov (2018) use Gumbel random perturbation.
sent18: Jang et al. (2017) use differentiable dynamic programming to design an efficient approximate sampling algorithm.
sent19: The variational variant of D-NDMV (Han et al., 2019a) has the same structure as the deterministic variant described in Section 3.2.1, except that the variational variant probabilistically models the intermediate continuous vector conditioned on the input sentence using a Gaussian distribution.
sent20: It also specifies a Gaussian prior over the intermediate continuous vector.","1. What is the training objective of a generative model in the context of unsupervised dependency parsing? sent1
2. Why can't the marginalized probability be calculated accurately for more complex models? sent2
3. What does a variational autoencoder maximize instead of the marginalized probability? sent3
4. How is the objective function optimized in variational autoencoders? sent4
5. How many unsupervised dependency parsing models based on variational autoencoders have been proposed recently? sent5
6. What are the three probabilities involved in the Evidence Lower Bound (ELBO)? sent6
7. What is Recurrent Neural Network Grammars (RNNG) and what are its variants? sent7
    7.1. How does the discriminative RNNG construct the constituency tree? sent8
    7.2. How does the generative RNNG differ from the discriminative RNNG? sent9
    7.3. How is the probability of each operation in RNNG calculated? sent10
8. How did Li et al. (2019) modify RNNG for dependency parsing? sent11
    8.1. What problem does RNNG face in the unsupervised setting and how is it mitigated? sent12, sent13
9. What is the model proposed by Corro and Titov (2018) based on, and what is its primary design? sent14, sent15
    9.1. What is the structure of the encoder and decoder in Corro and Titov's model? sent16
    9.2. How do Corro and Titov (2018) address the complexity of sampling a dependency tree? sent17
10. What approach did Jang et al. (2017) use to design an efficient approximate sampling algorithm? sent18
11. How does the variational variant of D-NDMV differ from its deterministic variant? sent19
    11.1. What does the variational variant of D-NDMV specify over the intermediate continuous vector? sent20","Question: How do variational autoencoder-based models address challenges in unsupervised dependency parsing?

Supporting sentence: sent1, sent2, sent3, sent4, sent5, sent6",How do variational autoencoder-based models address challenges in unsupervised dependency parsing?,"sent1, sent2, sent3, sent4, sent5, sent6",2,implement,"As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable.

However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption.

Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability.

Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.

Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1).

There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.","The training objective of a generative model in variational autoencoder-based approaches is typically the probability of the training sentence, with the dependency tree marginalized as a hidden variable.

However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumptions.

Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), which serves as a lower bound of the marginalized probability.

Since the intermediate representation follows a distribution, various sampling approaches are employed to optimize the likelihood according to different model schemas.

Three unsupervised dependency parsing models have been proposed in recent years based on variational autoencoders.

In these models, the ELBO involves three probabilities: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.","Question:

How do variational autoencoder-based models address challenges in unsupervised dependency parsing?

Answer:

The training objective of a generative model in variational autoencoder-based approaches is typically the probability of the training sentence, with the dependency tree marginalized as a hidden variable.

However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumptions.

Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), which serves as a lower bound of the marginalized probability.

Since the intermediate representation follows a distribution, various sampling approaches are employed to optimize the likelihood according to different model schemas.

Three unsupervised dependency parsing models have been proposed in recent years based on variational autoencoders.

In these models, the ELBO involves three probabilities: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure.","Question:

How do variational autoencoder-based models address challenges in unsupervised dependency parsing?

Answer:

As mentioned in Section 3.1, the training objective of a generative model is typically the probability of the training sentence and the dependency tree is marginalized as a hidden variable.

However, the marginalized probability cannot usually be calculated accurately for more complex models that do not make strict independence assumption.

Instead, a variational autoencoder maximizes the Evidence Lower Bound (ELBO), a lower bound of the marginalized probability.

Since the intermediate representation follows a distribution, different sampling approaches are used to optimize the objective function (i.e., likelihood) according to different model schema.

Three unsupervised dependency parsing models were proposed in recent years based on variational autoencoders (shown in Table 1).

There are three probabilities involved in ELBO: the prior probability of the syntactic structure, the probability of generating the sentence from the syntactic structure (the decoder), and the variational posterior (the encoder) from the sentence to the syntactic structure."
252819333,A Survey of Automatic Text Summarization using Graph Neural Networks,https://www.semanticscholar.org/paper/923a7db0522f53e7a01e1c7303d45fef0091fcb8,Why graph neural networks ?,9,"Contemporary solutions to the task of ATS suffer from a number of issues, chiefly an inconsistent evaluation protocol and, somewhat, a lack of progress, as noted by Kryściński et al. (2019). In recent years GNNs have been successfully applied to a number of downstream NLP tasks such as classification    and translation (Xu et al., 2021) (Yin et al., 2020). Although GNNs may not be able to solve all problems related to the task of ATS, we believe that they can at least give a new perspective to this task. Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey. In particular we want to highlight the following aspects of GNNs:

• Scalability and Flexibility. A vast number of ATS models are based on BERT (Devlin et al., 2019). However, the computational complexity of BERT-based ATS models grows quadratic with the input length; due to the selfattention operation. This fact renders them impractical for long, or even medium sized text documents. Recently some work has been done in order to circumvent this limiting factor (Ding et al., 2020) (Zhang et al., 2021). In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more. This is in part due to the linear scaling of the memory cost with regards to the input size. The total memory cost of a GNN model depends on the size of the graph, the number of layers and the feature vector size of the nodes present. Formally, for L layers and an input of N nodes with each node's feature vector being of size H the memory complexity is O(LN H). But even for very large graphs on the scale of millions of nodes one can utilize GNNs. This can be achieved using methods such as neighbour sampling or distributing the graph over multiple GPUs, as done for example by Jia et al. (2020b). We recommend the paper by  for insights as to how one can train large and very deep GNNs. As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures. Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.

• Understanding and Explainability. It is often difficult to understand why a model arrived at a certain conclusion. Additionally it is often difficult to see how the model aggregates information. This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output. This removes a layer of the blackbox magic present in many current non-GNN models. We recommend the survey by Yuan et al. (2020) for an overview of methods for generating explanations for GNNs.","sent1: Contemporary solutions to the task of ATS suffer from a number of issues, chiefly an inconsistent evaluation protocol and, somewhat, a lack of progress, as noted by Kryściński et al. (2019).
sent2: In recent years GNNs have been successfully applied to a number of downstream NLP tasks such as classification    and translation (Xu et al., 2021) (Yin et al., 2020).
sent3: Although GNNs may not be able to solve all problems related to the task of ATS, we believe that they can at least give a new perspective to this task.
sent4: Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey.
sent5: In particular we want to highlight the following aspects of GNNs:• Scalability and Flexibility.
sent6: A vast number of ATS models are based on BERT (Devlin et al., 2019).
sent7: However, the computational complexity of BERT-based ATS models grows quadratic with the input length; due to the selfattention operation.
sent8: This fact renders them impractical for long, or even medium sized text documents.
sent9: Recently some work has been done in order to circumvent this limiting factor (Ding et al., 2020) (Zhang et al., 2021).
sent10: In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more.
sent11: This is in part due to the linear scaling of the memory cost with regards to the input size.
sent12: The total memory cost of a GNN model depends on the size of the graph, the number of layers and the feature vector size of the nodes present.
sent13: Formally, for L layers and an input of N nodes with each node's feature vector being of size H the memory complexity is O(LN H).
sent14: But even for very large graphs on the scale of millions of nodes one can utilize GNNs.
sent15: This can be achieved using methods such as neighbour sampling or distributing the graph over multiple GPUs, as done for example by Jia et al. (2020b).
sent16: We recommend the paper by  for insights as to how one can train large and very deep GNNs.
sent17: As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures.
sent18: Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.
sent19: • Understanding and Explainability.
sent20: It is often difficult to understand why a model arrived at a certain conclusion.
sent21: Additionally it is often difficult to see how the model aggregates information.
sent22: This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output.
sent23: This removes a layer of the blackbox magic present in many current non-GNN models.
sent24: We recommend the survey by Yuan et al. (2020) for an overview of methods for generating explanations for GNNs.","1. What issues do contemporary solutions to the task of ATS face? sent1
2. How have GNNs been applied in recent years in NLP tasks? sent2
3. Can GNNs solve all problems related to the task of ATS? sent3
4. What advantages do GNNs bring to ATS? sent4
    4.1. What specific aspects of GNNs are highlighted as significant for ATS? sent5
5. What is a common basis for many ATS models, and what is its limitation? sent6, sent7
    5.1. Why are BERT-based ATS models impractical for certain text documents? sent8
    5.2. Has any work been done to address the limitations of BERT-based ATS models? sent9
6. How do GNNs compare to BERT-based models in terms of scalability? sent10
    6.1. What contributes to the scalability of GNNs? sent11
    6.2. What is the memory complexity of a GNN model? sent12, sent13
    6.3. How can GNNs handle very large graphs? sent14, sent15
    6.4. What resource is recommended for insights on training large and deep GNNs? sent16
7. How do GNNs handle varying input sizes and structures? sent17
    7.1. What is the benefit of GNNs' ability to handle varying input sizes and structures? sent18
8. What is a challenge in understanding model conclusions, and how do GNNs address it? sent19, sent20, sent21
    8.1. How do methods like GNN Explainer help in understanding GNN models? sent22
    8.2. What does the use of GNNs remove in terms of model understanding? sent23
    8.3. What resource is recommended for an overview of methods for generating explanations for GNNs? sent24","Question: What are the advantages of using graph neural networks (GNNs) for automatic text summarization (ATS)?

Supporting sentence: sent4, sent5, sent10, sent11, sent17, sent18, sent19, sent20, sent21, sent22, sent23",What are the advantages of using graph neural networks (GNNs) for automatic text summarization (ATS)?,"sent4, sent5, sent10, sent11, sent17, sent18, sent19, sent20, sent21, sent22, sent23",4,implement,"Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey.

In particular we want to highlight the following aspects of GNNs:• Scalability and Flexibility.

In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more.

This is in part due to the linear scaling of the memory cost with regards to the input size.

As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures.

Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.

• Understanding and Explainability.

It is often difficult to understand why a model arrived at a certain conclusion.

Additionally it is often difficult to see how the model aggregates information.

This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output.

This removes a layer of the blackbox magic present in many current non-GNN models.","Graph neural networks (GNNs) bring several advantages to automatic text summarization (ATS) that are significant enough to warrant further research.

In particular, GNNs offer scalability and flexibility.

GNNs can naturally scale to graphs with thousands of nodes and more.

This scalability is partly due to the linear scaling of the memory cost with respect to the input size.

Since the input of a GNN is a graph, GNNs can adapt to varying text sizes and structures.

These aspects combined allow GNNs to produce summaries that are not restricted by hard-coded limits related to input or output size.

GNNs also enhance understanding and explainability in automatic text summarization.

This is because it is often difficult to understand why a model arrived at a certain conclusion.

Additionally, it is often challenging to discern how the model aggregates information.

With GNNs, methods like GNN Explainer (Ying et al., 2019) help in understanding which nodes were utilized by the model to reach its output.

This approach removes a layer of the blackbox magic present in many current non-GNN models.","Question:

What are the advantages of using graph neural networks (GNNs) for automatic text summarization (ATS)?

Answer:

Graph neural networks (GNNs) bring several advantages to automatic text summarization (ATS) that are significant enough to warrant further research.

In particular, GNNs offer scalability and flexibility.

GNNs can naturally scale to graphs with thousands of nodes and more.

This scalability is partly due to the linear scaling of the memory cost with respect to the input size.

Since the input of a GNN is a graph, GNNs can adapt to varying text sizes and structures.

These aspects combined allow GNNs to produce summaries that are not restricted by hard-coded limits related to input or output size.

GNNs also enhance understanding and explainability in automatic text summarization.

This is because it is often difficult to understand why a model arrived at a certain conclusion.

Additionally, it is often challenging to discern how the model aggregates information.

With GNNs, methods like GNN Explainer (Ying et al., 2019) help in understanding which nodes were utilized by the model to reach its output.

This approach removes a layer of the blackbox magic present in many current non-GNN models.","Question:

What are the advantages of using graph neural networks (GNNs) for automatic text summarization (ATS)?

Answer:

Generally GNNs bring a number of advantages to ATS which we believe to be significant enough to warrant further research, and this survey.

In particular we want to highlight the following aspects of GNNs:• Scalability and Flexibility.

In contrast, GNNs can scale by their nature to graphs of thousands of nodes and more.

This is in part due to the linear scaling of the memory cost with regards to the input size.

As the input of a GNN is a graph, the input can vary in size, therefore GNNs are also able to cope with changing text sizes and structures.

Both of these aspects combined allow GNNs to produce summaries which are not restricted by hard-coded limits related to input or output size.

• Understanding and Explainability.

It is often difficult to understand why a model arrived at a certain conclusion.

Additionally it is often difficult to see how the model aggregates information.

This is not the case with GNNs, as with the help of methods such as GNN Explainer (Ying et al., 2019) one can understand which nodes were used by the model to reach its output.

This removes a layer of the blackbox magic present in many current non-GNN models."
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,MIND Link Top-N RS,6,"Fine-tuning Holistic Model (Xiao et al., 2022), Fine-tuning Partial Mode (Yu et al., 2022), Fine-tuning External Part (Yu et al., 2022), Fixed-prompt PTM Tuning  Textual data (Xiao et al., 2022;Yu et al., 2022;; Sequential data (Xiao et al., 2022;Yu et al., 2022) ReDial Link Conversational RS Fine-tuning Holistic Model , Fixed-PTM Prompt Tuning (Wang et al., 2022c), Fixed-prompt PTM Tuning (Yang et al., 2022a) Textual data (Wang et al., 2022c;Yang et al., 2022a;; Graph (Li et (Hou et al., 2022) Textual + Sequential data (Hou et al., 2022)  where y t = 1(x t = x t ), andX is corrupted from the input sequence X. de Souza Pereira Moreira et al. (2021) trained a Transformer-based model with RTD objective for session-based recommendations, which achieved the best performance among MLM and AM objectives. This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.","sent1: Fine-tuning Holistic Model (Xiao et al., 2022), Fine-tuning Partial Mode (Yu et al., 2022), Fine-tuning External Part (Yu et al., 2022), Fixed-prompt PTM Tuning  Textual data (Xiao et al., 2022;Yu et al., 2022;; Sequential data (Xiao et al., 2022;Yu et al., 2022) ReDial Link Conversational RS Fine-tuning Holistic Model , Fixed-PTM Prompt Tuning (Wang et al., 2022c), Fixed-prompt PTM Tuning (Yang et al., 2022a) Textual data (Wang et al., 2022c;Yang et al., 2022a;; Graph (Li et (Hou et al., 2022) Textual + Sequential data (Hou et al., 2022)  where y t = 1(x t = x t ), andX is corrupted from the input sequence X. de Souza Pereira Moreira et al. (2021) trained a Transformer-based model with RTD objective for session-based recommendations, which achieved the best performance among MLM and AM objectives.
sent2: This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.","1. What are some fine-tuning methods mentioned in the context of MIND Link Top-N RS? sent1
2. Why did the Transformer-based model trained with the RTD objective achieve the best performance among MLM and AM objectives? sent2","Question: How does the RTD objective improve the performance of Transformer-based models in session-based recommendations?

Supporting sentence: sent2",How does the RTD objective improve the performance of Transformer-based models in session-based recommendations?,sent2,2,implement,This is probably because RTD takes the whole user-item interaction sequence as input and model the context from the bidirectional way.,N/A,"Question:

How does the RTD objective improve the performance of Transformer-based models in session-based recommendations?

Answer:

N/A","Question:

How does the RTD objective improve the performance of Transformer-based models in session-based recommendations?

Answer:

N/A"
258832362,Beyond Words: A Comprehensive Survey of Sentence Representations,https://www.semanticscholar.org/paper/8579ad4a8e835cada64c0eae142a00205ce857b5,Alternative Loss and Objectives,6,"In § 2, we discuss Contrastive loss, which is widely used in machine learning. However, this loss suffers from several limitations: for instance it only considers binary relationships between instances, lacks a mechanism to incorporate ""hard negatives"". To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss. Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations. This section provides an overview of these approaches.

To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses. These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics; (3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness. For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances. In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.

However, recent research has moved away from using the contrastive loss and has employed different loss functions to learn sentence representations. For instance, Zhang et al. (2020) maximize the mutual information between a local and a global representation of a sentence using .  identify an alternative sub-manifold within the sentence representation space that considers the geometric structure of sentences to compute semantic similarity.","sent1: In § 2, we discuss Contrastive loss, which is widely used in machine learning.
sent2: However, this loss suffers from several limitations: for instance it only considers binary relationships between instances, lacks a mechanism to incorporate ""hard negatives"".
sent3: To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss.
sent4: Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations.
sent5: This section provides an overview of these approaches.
sent6: To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses.
sent7: These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics;
sent8: (3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.
sent9: Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness.
sent10: For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.
sent11: In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.
sent12: However, recent research has moved away from using the contrastive loss and has employed different loss functions to learn sentence representations.
sent13: For instance, Zhang et al. (2020) maximize the mutual information between a local and a global representation of a sentence using .
sent14: identify an alternative sub-manifold within the sentence representation space that considers the geometric structure of sentences to compute semantic similarity.","1. What is discussed in Section 2 regarding Contrastive loss? sent1
    1.1. What are the limitations of Contrastive loss? sent2
    1.2. How have researchers attempted to overcome the drawbacks of Contrastive loss? sent3
        1.2.1. What alterations and alternative loss functions have been proposed for contrastive learning of sentence representations? sent4
        1.2.2. What does this section provide an overview of? sent5
2. What supplementary losses have been introduced to improve the learning of sentence representations using Contrastive loss? sent6
    2.1. What are some examples of supplementary losses introduced by researchers? sent7, sent8
3. What modifications have been suggested to the original contrastive loss for better effectiveness? sent9
    3.1. What additional term has Wu et al. (2022c) proposed for the contrastive loss? sent10
    3.2. What losses have Zhang et al. (2022d) introduced to address similarity intricacies? sent11
4. How has recent research shifted away from using the contrastive loss? sent12
    4.1. What alternative approach has Zhang et al. (2020) used to learn sentence representations? sent13
    4.2. What alternative sub-manifold approach is identified for computing semantic similarity? sent14","Question: What are the supplementary losses and modifications proposed to enhance contrastive learning of sentence representations?

Supporting sentence: sent3, sent4, sent6, sent7, sent8, sent9, sent10, sent11",What are the supplementary losses and modifications proposed to enhance contrastive learning of sentence representations?,"sent3, sent4, sent6, sent7, sent8, sent9, sent10, sent11",4,implement,"To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss.

Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations.

To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses.

These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics;

(3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness.

For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.

In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples.","Researchers have explored supplementary losses that can be used in conjunction with the contrastive loss to enhance contrastive learning of sentence representations.

Moreover, alterations to the loss function have been proposed to make it more effective for learning, along with alternative loss functions for contrastive learning of sentence representations.

To improve the learning of sentence representations using the contrastive loss, researchers have introduced several supplementary losses.

These supplementary losses include the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs, and losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics.

Additional supplementary losses include a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations, and a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

In addition to these supplementary losses, some studies have suggested modifications to the original contrastive loss to enhance its effectiveness.

For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.

Zhang et al. (2022d) have introduced the angular loss and margin-based triplet loss to better address the intricacies of similarity between pairs of examples.","Question:

What are the supplementary losses and modifications proposed to enhance contrastive learning of sentence representations?

Answer:

Researchers have explored supplementary losses that can be used in conjunction with the contrastive loss to enhance contrastive learning of sentence representations.

Moreover, alterations to the loss function have been proposed to make it more effective for learning, along with alternative loss functions for contrastive learning of sentence representations.

To improve the learning of sentence representations using the contrastive loss, researchers have introduced several supplementary losses.

These supplementary losses include the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs, and losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics.

Additional supplementary losses include a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations, and a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

In addition to these supplementary losses, some studies have suggested modifications to the original contrastive loss to enhance its effectiveness.

For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.

Zhang et al. (2022d) have introduced the angular loss and margin-based triplet loss to better address the intricacies of similarity between pairs of examples.","Question:

What are the supplementary losses and modifications proposed to enhance contrastive learning of sentence representations?

Answer:

To overcome these drawbacks, researchers have explored supplementary losses that can be used in conjunction with the Contrastive loss.

Moreover, they have proposed alterations to the loss function that make it more effective for learning, as well as alternative loss functions for contrastive learning of sentence representations.

To improve the learning of sentence representations using the Contrastive loss, researchers have introduced several supplementary losses.

These include: (1) the hinge loss proposed by Jiang et al. (2022b), which enhances discrimination between positive and negative pairs; (2) losses suggested by Wu et al. (2022b) for reconstructing the original sentence from its representation to better capture sentence semantics;(3) a loss developed by Chuang et al. (2022) to identify masked words and improve sensitivity to meaningless semantic transformations; and (4) a loss proposed by Chen et al. (2022a) to minimize redundant information from transformations by minimizing information entropy.

Besides such supplementary losses, some studies have suggested modifications to the original contrastive loss for better effectiveness.

For instance, Wu et al. (2022c) have proposed an additional term that incorporates random noise from a Gaussian distribution as negative instances.

In the same vein, Zhang et al. (2022d) have introduced two lossesthe angular loss and margin-based triplet loss-to better address the intricacies of similarity between pairs of examples."
234093015,A Survey of Data Augmentation Approaches for NLP,https://www.semanticscholar.org/paper/63d8426ba1f51a8525dd19fd8ec92934ec71aea5,Rule-Based Techniques,4,"Here, we cover DA primitives which use easyto-compute, predetermined transforms sans model components. Feature space DA approaches generate augmented examples in the model's feature space rather than input data. Many few-shot learning approaches (Hariharan and Girshick, 2017;Schwartz et al., 2018) leverage estimated feature space ""analogy"" transformations between examples of known classes to augment for novel classes (see §4.4). Paschali et al. (2019) use iterative affine transformations and projections to maximally ""stretch"" an example along the class-manifold. Wei and Zou (2019) propose EASY DATA AUG-MENTATION (EDA), a set of token-level random perturbation operations including random insertion, deletion, and swap. They show improved performance on many text classification tasks. UDA (Xie et al., 2020) show how supervised DA methods can be exploited for unsupervised data through consistency training on (x, DA(x)) pairs.

For paraphrase identification, Chen et al. (2020b) construct a signed graph over the data, with individual sentences as nodes and pair labels as signed edges. They use balance theory and transitivity to infer augmented sentence pairs from this graph. Motivated by image cropping and rotation, Şahin and Steedman (2018) propose dependency tree morphing. For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2. This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).","sent1: Here, we cover DA primitives which use easyto-compute, predetermined transforms sans model components.
sent2: Feature space DA approaches generate augmented examples in the model's feature space rather than input data.
sent3: Many few-shot learning approaches (Hariharan and Girshick, 2017;Schwartz et al., 2018) leverage estimated feature space ""analogy"" transformations between examples of known classes to augment for novel classes (see §4.4).
sent4: Paschali et al. (2019) use iterative affine transformations and projections to maximally ""stretch"" an example along the class-manifold.
sent5: Wei and Zou (2019) propose EASY DATA AUG-MENTATION (EDA), a set of token-level random perturbation operations including random insertion, deletion, and swap.
sent6: They show improved performance on many text classification tasks.
sent7: UDA (Xie et al., 2020) show how supervised DA methods can be exploited for unsupervised data through consistency training on (x, DA(x)) pairs.
sent8: For paraphrase identification, Chen et al. (2020b) construct a signed graph over the data, with individual sentences as nodes and pair labels as signed edges.
sent9: They use balance theory and transitivity to infer augmented sentence pairs from this graph.
sent10: Motivated by image cropping and rotation, Şahin and
sent11: Steedman (2018) propose dependency tree morphing.
sent12: For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2.
sent13: This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).","1. What are DA primitives and how are they characterized in the context of rule-based techniques? sent1
2. What do feature space DA approaches do? sent2
3. How do few-shot learning approaches leverage feature space transformations for data augmentation? sent3
4. What method do Paschali et al. (2019) use for data augmentation? sent4
5. What is EASY DATA AUGMENTATION (EDA) and what operations does it include? sent5
    5.1. What is the impact of EDA on text classification tasks? sent6
6. How does UDA exploit supervised DA methods for unsupervised data? sent7
7. How do Chen et al. (2020b) approach paraphrase identification using a graph-based method? sent8
    7.1. What techniques do they use to infer augmented sentence pairs? sent9
8. What is dependency tree morphing and who proposed it? sent10, sent11
    8.1. How is dependency tree morphing applied to dependency-annotated sentences? sent12
    8.2. For which language families is dependency tree morphing most beneficial? sent13","Question: How is dependency tree morphing applied in data augmentation, and for which language families is it most beneficial?

Supporting sentence: sent10, sent11, sent12, sent13","How is dependency tree morphing applied in data augmentation, and for which language families is it most beneficial?","sent10, sent11, sent12, sent13",2,implement,"Motivated by image cropping and rotation, Şahin and

Steedman (2018) propose dependency tree morphing.

For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2.

This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic).","Dependency tree morphing, inspired by image cropping and rotation, is applied in data augmentation.

Steedman (2018) proposed dependency tree morphing.

For dependency-annotated sentences, children of the same parent are swapped or some are deleted, similar to image rotation and cropping.

This technique is most beneficial for language families with rich case marking systems, such as Baltic and Slavic.","Question:

How is dependency tree morphing applied in data augmentation, and for which language families is it most beneficial?

Answer:

Dependency tree morphing, inspired by image cropping and rotation, is applied in data augmentation.

Steedman (2018) proposed dependency tree morphing.

For dependency-annotated sentences, children of the same parent are swapped or some are deleted, similar to image rotation and cropping.

This technique is most beneficial for language families with rich case marking systems, such as Baltic and Slavic.","Question:

How is dependency tree morphing applied in data augmentation, and for which language families is it most beneficial?

Answer:

Motivated by image cropping and rotation, Şahin andSteedman (2018) propose dependency tree morphing.

For dependency-annotated sentences, children of the same parent are swapped (à la rotation) or some deleted (à la cropping), as seen in Figure 2.

This is most beneficial for language families with rich case marking systems (e.g. Baltic and Slavic)."
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Graph-based Methods,12,"Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures. As summarized in § 2, datasets prior to Spider typically involve simple DBs that contain only one table or a single DB in both training and testing. As a result, modeling DB schema receives little attention. Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas. Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure. In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation. RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.

Graphs have also been used to encode questions together with DB schema. Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema. Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently. SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking. Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance. To improve the generalization of the graph method for unseen domains, ShawdowGNN (Chen et al., 2021b) ignores names of tables or columns in the database and uses abstract schemas in the graph projection neural network to obtain delexicalized representations of questions and DB schemas.

Finally, graph-based techniques are also exploited in context-dependent text-to-SQL. For instance, IGSQL (Cai and Wan, 2020) uses a graph encoder to utilize historical information of DB schemas in the previous turns.

Self-attention Models using transformer-based encoder (He et al., 2019;Xie et al., 2022) incorporate the original self-attention mechanism by default because it is the building block of the transformer structure.

RAT-SQL  applies relationaware self-attention, a modified version of selfattention (Vaswani et al., 2017), to leverage relations of tables and columns. DuoRAT (Scholak et al., 2021a) also adopts such a relation-aware self-attention in their encoder.

Adapt PLM Various methods have been proposed to leverage the knowledge in pre-trained language models (PLMs) and better align PLM with the text-to-SQL task. PLMs such as BERT (Devlin et al., 2019) are used to encode questions and DB schemas. The modus operandi is to input the concatenation of question words and schema words to the BERT encoder Choi et al., 2021). Other methods adjust the embeddings by PLMs. On WikiSQL, for instance, X-SQL (He et al., 2019) replaces segment embeddings from the pre-trained encoder by column type embeddings. Guo and Gao (2019) encode two additional feature vectors for matching between question tokens and table cells as well as column names and concatenate them with BERT embeddings of questions and DB schemas.

HydraNet  uses BERT to encode the question and an individual column, aligning with the tasks BERT is pre-trained on. After obtaining the BERT representations of all columns, Lyu et al. (2020) select top-ranked columns for SQL prediction. Liu et al. (2021b) train an auxiliary concept prediction module to predict which tables and columns correspond to the question. They detect important question tokens by detecting the largest drop in the confidence score caused by erasing that token in the question. Lastly, they train the PLM with a grounding module using the question tokens and the corresponding tables as well as columns. By empirical studies, Liu et al. (2021b) claim that their approach can awaken the latent grounding from PLM via this erase-andpredict technique.

Pre-training There have been various works proposing different pre-training objectives and using different pre-training data to better align the transformer-based encoder with the text-to-SQL task. For instance, TaBERT  uses tabular data for pre-training with objectives of masked column prediction and cell value recovery to pre-train BERT. Grappa  synthesizes question-SQL pairs over tables and pre-trains BERT with the objectives of masked language modeling (MLM) and predicting whether a column appears in the SQL query as well as what SQL operations are triggered. GAP (Shi et al., 2020a) pre-trains BART (Lewis et al., 2020) on synthesized text-to-SQL and tabular data with the objectives of MLM, column prediction, column recovery, and SQL generation.","sent1: Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures.
sent2: As summarized in § 2, datasets prior to Spider typically involve simple DBs that contain only one table or a single DB in both training and testing.
sent3: As a result, modeling DB schema receives little attention.
sent4: Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas.
sent5: Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure.
sent6: In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.
sent7: RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.
sent8: Graphs have also been used to encode questions together with DB schema.
sent9: Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema.
sent10: Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently.
sent11: SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking.
sent12: Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance.
sent13: To improve the generalization of the graph method for unseen domains, ShawdowGNN (Chen et al., 2021b) ignores names of tables or columns in the database and uses abstract schemas in the graph projection neural network to obtain delexicalized representations of questions and DB schemas.
sent14: Finally, graph-based techniques are also exploited in context-dependent text-to-SQL.
sent15: For instance, IGSQL (Cai and Wan, 2020) uses a graph encoder to utilize historical information of DB schemas in the previous turns.
sent16: Self-attention Models using transformer-based encoder (He et al., 2019;Xie et al., 2022) incorporate the original self-attention mechanism by default because it is the building block of the transformer structure.
sent17: RAT-SQL  applies relationaware self-attention, a modified version of selfattention (Vaswani et al., 2017), to leverage relations of tables and columns.
sent18: DuoRAT (Scholak et al., 2021a) also adopts such a relation-aware self-attention in their encoder.
sent19: Adapt PLM Various methods have been proposed to leverage the knowledge in pre-trained language models (PLMs) and better align PLM with the text-to-SQL task.
sent20: PLMs such as BERT (Devlin et al., 2019) are used to encode questions and DB schemas.
sent21: The modus operandi is to input the concatenation of question words and schema words to the BERT encoder Choi et al., 2021).
sent22: Other methods adjust the embeddings by PLMs.
sent23: On WikiSQL, for instance, X-SQL (He et al., 2019) replaces segment embeddings from the pre-trained encoder by column type embeddings.
sent24: Guo and Gao (2019) encode two additional feature vectors for matching between question tokens and table cells as well as column names and concatenate them with BERT embeddings of questions and DB schemas.
sent25: HydraNet  uses BERT to encode the question and an individual column, aligning with the tasks BERT is pre-trained on.
sent26: After obtaining the BERT representations of all columns, Lyu et al. (2020) select top-ranked columns for SQL prediction.
sent27: Liu et al. (2021b) train an auxiliary concept prediction module to predict which tables and columns correspond to the question.
sent28: They detect important question tokens by detecting the largest drop in the confidence score caused by erasing that token in the question.
sent29: Lastly, they train the PLM with a grounding module using the question tokens and the corresponding tables as well as columns.
sent30: By empirical studies, Liu et al. (2021b) claim that their approach can awaken the latent grounding from PLM via this erase-andpredict technique.
sent31: Pre-training There have been various works proposing different pre-training objectives and using different pre-training data to better align the transformer-based encoder with the text-to-SQL task.
sent32: For instance, TaBERT  uses tabular data for pre-training with objectives of masked column prediction and cell value recovery to pre-train BERT.
sent33: Grappa  synthesizes question-SQL pairs over tables and pre-trains BERT with the objectives of masked language modeling (MLM) and predicting whether a column appears in the SQL query as well as what SQL operations are triggered.
sent34: GAP (Shi et al., 2020a) pre-trains BART (Lewis et al., 2020) on synthesized text-to-SQL and tabular data with the objectives of MLM, column prediction, column recovery, and SQL generation.","1. Why are graph-based methods used in modeling DB schemas? sent1
2. What is the typical structure of datasets prior to Spider, and how does it affect DB schema modeling? sent2, sent3
3. How does Spider differ in terms of DB complexity, and what method did Bogin et al. (2019a) propose to handle it? sent4
    3.1. How do Bogin et al. (2019a) represent DB schemas using graphs? sent5
    3.2. What advancements did Bogin et al. (2019b) make in capturing DB structures? sent6
4. How does RAT-SQL enhance the encoding of DB schemas? sent7
5. How are graphs used to encode questions along with DB schemas? sent8
6. What types of graphs are used to capture semantics in natural language and facilitate linking with table schema? sent9
    6.1. How does Cao et al. (2021) use line graphs to capture multi-hop semantics? sent10
    6.2. How does SADGA utilize graph structures for question-schema linking? sent11
    6.3. How does S 2 SQL integrate syntax dependency into graphs? sent12
7. How does ShawdowGNN improve generalization for unseen domains? sent13
8. How are graph-based techniques applied in context-dependent text-to-SQL? sent14
    8.1. How does IGSQL utilize historical information of DB schemas? sent15
9. What role does self-attention play in transformer-based models for text-to-SQL? sent16
    9.1. How does RAT-SQL apply relation-aware self-attention? sent17
    9.2. How does DuoRAT utilize relation-aware self-attention? sent18
10. How are pre-trained language models (PLMs) adapted for the text-to-SQL task? sent19
    10.1. How are PLMs like BERT used to encode questions and DB schemas? sent20, sent21
    10.2. How do other methods adjust embeddings using PLMs? sent22
        10.2.1. How does X-SQL adjust embeddings on WikiSQL? sent23
        10.2.2. How do Guo and Gao (2019) enhance matching between question tokens and table cells? sent24
        10.2.3. How does HydraNet align with BERT's pre-training tasks? sent25
        10.2.4. How do Lyu et al. (2020) select columns for SQL prediction? sent26
        10.2.5. How does Liu et al. (2021b) train an auxiliary concept prediction module? sent27
            10.2.5.1. How do they detect important question tokens? sent28
            10.2.5.2. How do they train the PLM with a grounding module? sent29
            10.2.5.3. What claim do Liu et al. (2021b) make about their approach? sent30
11. What are some pre-training objectives and data used to align transformer-based encoders with text-to-SQL tasks? sent31
    11.1. How does TaBERT use tabular data for pre-training? sent32
    11.2. How does Grappa synthesize question-SQL pairs for pre-training? sent33
    11.3. How does GAP pre-train BART for text-to-SQL tasks? sent34","Question: How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?

Supporting sentence: sent1, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?,"sent1, sent4, sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12",2,implement,"Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures.

Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas.

Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure.

In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.

RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.

Graphs have also been used to encode questions together with DB schema.

Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema.

Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently.

SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking.

Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance.","Graph-based methods are used to better encode the rich structural information contained in DB schemas.

Bogin et al. (2019a) propose using graphs to represent the structure of DB schemas due to the complexity and diversity of databases in the Spider dataset.

Specifically, Bogin et al. (2019a) utilize nodes to represent tables and columns, and edges to depict relationships like primary key and foreign key constraints, employing graph neural networks (GNNs) (Li et al., 2016) to encode this graph structure.

In their subsequent work, Bogin et al. (2019b) employ a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.

RAT-SQL encodes additional relationships for DB schemas, such as ""both columns are from the same table,"" in their graph.

Graphs have also been utilized to encode questions alongside DB schemas.

Different types of graphs have been employed to capture the semantics in natural language and facilitate linking between natural language and table schema.

Cao et al. (2021) adopt line graphs to capture multi-hop semantics by using meta-paths and distinguish between local and nonlocal neighbors, allowing different tables and columns to be attended differently.

SADGA (Cai et al., 2021) uses a graph structure to provide a unified encoding for both natural utterances and DB schemas, facilitating question-schema linking.

In addition to the relations between entities in both questions and DB schemas, S 2 SQL (Hui et al., 2022) incorporates syntax dependency among question tokens into the graph to enhance model performance.","Question:

How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?

Answer:

Graph-based methods are used to better encode the rich structural information contained in DB schemas.

Bogin et al. (2019a) propose using graphs to represent the structure of DB schemas due to the complexity and diversity of databases in the Spider dataset.

Specifically, Bogin et al. (2019a) utilize nodes to represent tables and columns, and edges to depict relationships like primary key and foreign key constraints, employing graph neural networks (GNNs) (Li et al., 2016) to encode this graph structure.

In their subsequent work, Bogin et al. (2019b) employ a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.

RAT-SQL encodes additional relationships for DB schemas, such as ""both columns are from the same table,"" in their graph.

Graphs have also been utilized to encode questions alongside DB schemas.

Different types of graphs have been employed to capture the semantics in natural language and facilitate linking between natural language and table schema.

Cao et al. (2021) adopt line graphs to capture multi-hop semantics by using meta-paths and distinguish between local and nonlocal neighbors, allowing different tables and columns to be attended differently.

SADGA (Cai et al., 2021) uses a graph structure to provide a unified encoding for both natural utterances and DB schemas, facilitating question-schema linking.

In addition to the relations between entities in both questions and DB schemas, S 2 SQL (Hui et al., 2022) incorporates syntax dependency among question tokens into the graph to enhance model performance.","Question:

How do graph-based methods enhance the encoding of DB schemas and questions in text-to-SQL tasks?

Answer:

Since DB schemas contain rich structural information, graph-based methods are used to better encode such structures.

Because Spider contains complex and different DB in training and testing, Bogin et al. (2019a) propose to use graphs to represent the structure of the DB schemas.

Specifically, Bogin et al. (2019a) use nodes to represent tables and columns, edges to represent relationships between tables and columns, such as tables containing columns, primary key, and foreign key constraints, and then use graph neural networks (GNNs) (Li et al., 2016) to encode the graph structure.

In their subsequent work, Bogin et al. (2019b) use a graph convolutional network (GCN) to capture DB structures and a gated GCN to select the relevant DB information for SQL generation.

RAT-SQL  encodes more relationships for DB schemas such as ""both columns are from the same table"" in their graph.

Graphs have also been used to encode questions together with DB schema.

Researchers have been using different types of graphs to capture the semantics in NL and facilitate linking between NL and table schema.

Cao et al. (2021) adopt line graph (Gross et al., 2018) to capture multi-hop semantics by meta-path (e.g., an exact match for a question token and column, together with the column belonging to a table can form a 2-hop meta-path) and distinguish between local and nonlocal neighbors so that different tables and columns will be attended differently.

SADGA (Cai et al., 2021) adopts the graph structure to provide a unified encoding for both natural utterances and DB schemas to help question-schema linking.

Apart from the relations between entities in both questions and DB schema, the structure for DB schemas, S 2 SQL (Hui et al., 2022) integrates syntax dependency among question tokens into the graph to improve model performance."
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Optimized Inputs,20,"Probing inputs contribute substantially to the probing procedure.PLMs are sensitive to the inputs (Petroni et al., 2019;Jiang et al., 2020b;Elazar et al., 2021), and even syntactical variations or distractors, that do not alter the meaning, cause the PLM's predictions to change (Heinzerling and Inui, 2021;Longpre et al., 2021;Pandia and Ettinger, 2021;Podkorytov et al., 2021;Li et al., 2022a).Therefore, depending on the probing inputs, the estimate on factual knowledge we obtain may vary significantly.Optimized inputs represent variations of the inputs, where the inputs are changed to account for the sensitivity of the probed PLMs.

Diversification and mining methods aim to diversify and optimize prompts by mining Wikipedia or other resources, and selecting the best performing prompts or a combination of them.For example, Jiang et al. (2020b) propose a mining-based and a paraphrasing-based approach to create alternative prompts that outperform manual ones.The final prompts are selected based on their performance on a training set, and can also be combined in an ensemble.Bouraoui et al. (2020) mine for prompts that contain the entities of interest, and filter these based on the ability of the probed PLMs to predict the masked objects.After the filtering step, the remaining prompts are utilized to create a dataset that consists of positive inputs, i.e., containing true subject-object pairs, and negative inputs, which contain false pairs.This dataset is then used for the final evaluation.

Direct optimization methods aim to directly optimize existing prompts.This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.These tokens are chosen to increase the probability of predicting the correct object.OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.

Generation with PLM methods re-write prompts with the help of a secondary PLM.Haviv et al. (2021) re-write manual prompts using another version of the probed model.The re-writing model is trained to produce prompts that help extract more knowledge from the probed one, which is kept unchanged.Zhang et al. (2022) leverage a generative PLM to produce optimized prompts.","sent1: Probing inputs contribute substantially to the probing procedure.
sent2: PLMs are sensitive to the inputs (Petroni et al., 2019;Jiang et al., 2020b;Elazar et al., 2021), and even syntactical variations or distractors, that do not alter the meaning, cause the PLM's predictions to change (Heinzerling and Inui, 2021;Longpre et al., 2021;Pandia and Ettinger, 2021;Podkorytov et al., 2021;Li et al., 2022a).Therefore, depending on the probing inputs, the estimate on factual knowledge we obtain may vary significantly.
sent3: Optimized inputs represent variations of the inputs, where the inputs are changed to account for the sensitivity of the probed PLMs.
sent4: Diversification and mining methods aim to diversify and optimize prompts by mining Wikipedia or other resources, and selecting the best performing prompts or a combination of them.
sent5: For example, Jiang et al. (2020b) propose a mining-based and a paraphrasing-based approach to create alternative prompts that outperform manual ones.
sent6: The final prompts are selected based on their performance on a training set, and can also be combined in an ensemble.
sent7: Bouraoui et al. (2020) mine for prompts that contain the entities of interest, and filter these based on the ability of the probed PLMs to predict the masked objects.
sent8: After the filtering step, the remaining prompts are utilized to create a dataset that consists of positive inputs, i.e., containing true subject-object pairs, and negative inputs, which contain false pairs.
sent9: This dataset is then used for the final evaluation.
sent10: Direct optimization methods aim to directly optimize existing prompts.
sent11: This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.
sent12: Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.
sent13: Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.
sent14: These tokens are chosen to increase the probability of predicting the correct object.
sent15: OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.
sent16: In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.
sent17: Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.
sent18: The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.
sent19: Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.
sent20: Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.
sent21: These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.
sent22: PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.
sent23: Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.
sent24: Generation with PLM methods re-write prompts with the help of a secondary PLM.Haviv et al. (2021) re-write manual prompts using another version of the probed model.
sent25: The re-writing model is trained to produce prompts that help extract more knowledge from the probed one, which is kept unchanged.
sent26: Zhang et al. (2022) leverage a generative PLM to produce optimized prompts.","1. How do probing inputs contribute to the probing procedure? sent1
2. Why are PLMs sensitive to inputs, and how does this affect factual knowledge estimation? sent2
3. What are optimized inputs in the context of probing PLMs? sent3
4. What methods are used to diversify and optimize prompts? sent4
    4.1. Can you provide an example of a mining-based and paraphrasing-based approach to create alternative prompts? sent5
    4.2. How are final prompts selected and utilized in the probing process? sent6, sent7, sent8, sent9
5. What are direct optimization methods for prompts? sent10
    5.1. How does optimization occur in discrete and continuous spaces? sent11
    5.2. What specific aspects of prompts can be targeted for optimization? sent12
    5.3. How does AUTOPROMPT extend manually created prompts? sent13, sent14
    5.4. How does OPTIPROMPT differ from AUTOPROMPT? sent15
    5.5. What approach do Qin and Eisner propose for learning continuous prompts? sent16, sent17, sent18
    5.6. How do Newman et al. utilize adapters in prompt optimization? sent19
    5.7. What are Type Embeddings, and how do they help in prompt optimization? sent20, sent21
    5.8. How does PERO optimize prompts using training examples? sent22, sent23
6. How do generation with PLM methods re-write prompts? sent24
    6.1. How do Haviv et al. re-write manual prompts using another version of the probed model? sent25
    6.2. How do Zhang et al. leverage a generative PLM for optimized prompts? sent26","Question: How do direct optimization methods enhance prompt effectiveness in probing pre-trained language models?

Supporting sentence: sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23",How do direct optimization methods enhance prompt effectiveness in probing pre-trained language models?,"sent10, sent11, sent12, sent13, sent14, sent15, sent16, sent17, sent18, sent19, sent20, sent21, sent22, sent23",2,implement,"Direct optimization methods aim to directly optimize existing prompts.

This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.

Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.

Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.

These tokens are chosen to increase the probability of predicting the correct object.

OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.

In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.

Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.

The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.

Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.

Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.

These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.

PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.

Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts.","Direct optimization methods enhance prompt effectiveness by directly optimizing existing prompts.

This optimization occurs either in a discrete space, maintaining the prompts in natural language, or in a continuous space where the prompts are not restricted to specific tokens from the vocabulary.

Optimization could also target only the masked token or the order of the examples in the prompt, especially when a few examples are provided to better indicate the task.

Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by using a pre-defined number of trigger tokens and employs gradient-based search to sequentially replace these trigger tokens with concrete tokens.

These tokens are selected to increase the probability of predicting the correct object.

OPTIPROMPT (Zhong et al., 2021) is similar to AUTOPROMPT, but it allows the trigger tokens to be replaced with vectors from a continuous embedding space.

Similarly, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.

Additionally, Qin and Eisner (2021) perturb the representations of the prompts in each layer of the probed PLMs using small learnable vectors.

The intuition behind these methods is to create activation patterns similar to those encountered during pre-training, facilitating the elicitation of knowledge from pre-trained language models.

Newman et al. (2022) utilize adapters to map embedding vectors to continuous prompts, aiming to reduce the sensitivity of probed PLMs to variations in prompt phrasing.

Saeed and Papotti (2022) enhance the masked tokens by incorporating a special type of embeddings known as Type Embeddings.

These embeddings are derived from several entities that share the same type and help tie the probed PLM's predictions to the expected type of the masked entity.

PERO (Kumar and Talukdar, 2021) relies on querying pre-trained language models with prompts that include a few training examples, or shots, to demonstrate the task to the models.

Since pre-trained language models (PLMs) are sensitive to the order and quality of training examples in the prompt, PERO uses a genetic algorithm to optimize the prompt and a separator token for concatenating examples. Li et al. (2022c) further exploit task symmetry by optimizing prompts in a continuous space to maximize the probability of predicting both the subject and the object.","Question:

How do direct optimization methods enhance prompt effectiveness in probing pre-trained language models?

Answer:

Direct optimization methods enhance prompt effectiveness by directly optimizing existing prompts.

This optimization occurs either in a discrete space, maintaining the prompts in natural language, or in a continuous space where the prompts are not restricted to specific tokens from the vocabulary.

Optimization could also target only the masked token or the order of the examples in the prompt, especially when a few examples are provided to better indicate the task.

Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by using a pre-defined number of trigger tokens and employs gradient-based search to sequentially replace these trigger tokens with concrete tokens.

These tokens are selected to increase the probability of predicting the correct object.

OPTIPROMPT (Zhong et al., 2021) is similar to AUTOPROMPT, but it allows the trigger tokens to be replaced with vectors from a continuous embedding space.

Similarly, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.

Additionally, Qin and Eisner (2021) perturb the representations of the prompts in each layer of the probed PLMs using small learnable vectors.

The intuition behind these methods is to create activation patterns similar to those encountered during pre-training, facilitating the elicitation of knowledge from pre-trained language models.

Newman et al. (2022) utilize adapters to map embedding vectors to continuous prompts, aiming to reduce the sensitivity of probed PLMs to variations in prompt phrasing.

Saeed and Papotti (2022) enhance the masked tokens by incorporating a special type of embeddings known as Type Embeddings.

These embeddings are derived from several entities that share the same type and help tie the probed PLM's predictions to the expected type of the masked entity.

PERO (Kumar and Talukdar, 2021) relies on querying pre-trained language models with prompts that include a few training examples, or shots, to demonstrate the task to the models.

Since pre-trained language models (PLMs) are sensitive to the order and quality of training examples in the prompt, PERO uses a genetic algorithm to optimize the prompt and a separator token for concatenating examples. Li et al. (2022c) further exploit task symmetry by optimizing prompts in a continuous space to maximize the probability of predicting both the subject and the object.","Question:

How do direct optimization methods enhance prompt effectiveness in probing pre-trained language models?

Answer:

Direct optimization methods aim to directly optimize existing prompts.

This optimization happens either in a discrete space, to keep the prompts in natural language, or in a continuous space where the prompts do not have to correspond to specific tokens from the vocabulary.

Optimization could also target only the masked token or the order of the examples in the prompt, in case a few examples are provided in the prompt to better indicate the task.

Shin et al. (2020)'s AUTOPROMPT extends manually created prompts by prompts with a pre-defined number of trigger tokens, and employs gradientbased search to sequentially replace the trigger tokens with concrete tokens.

These tokens are chosen to increase the probability of predicting the correct object.

OPTIPROMPT (Zhong et al., 2021) is sim-ilar to AUTOPROMPT, but allows for the trigger tokens to be replaced with vectors from a continuous embedding space.

In a similar fashion, Qin and Eisner (2021) propose learning an ensemble of continuous prompts per relation.

Additionally, they perturb the representations of the prompts in each layer in the probed PLMs using small learnable vectors.

The intuition is to have activation patterns that are similar to the ones encountered during pre-training, which would make it easier to elicit knowledge from PLMs.

Newman et al. (2022) utilize adapters (Houlsby et al., 2019) to map the embedding vectors to continuous prompts in order to make the probed PLMs less sensitive to different phrasings of the same prompts.Saeed and Papotti (2022) augment the masked tokens with a special type of embeddings, called Type Embeddings.

These embeddings are derived from several entities that share the same type, and are shown to help tie the probed PLM's predictions to the expected type of the masked entity.

PERO (Kumar and Talukdar, 2021) depends on querying PLMs with prompts containing few training examples (or shots), which demonstrate the task to the queried PLMs.

Since PLMs are quite sensitive to the order and the quality of the provided training examples in the prompt, PERO leverages a genetic algorithm to find an optimized prompt and a separator token to concatenate the examples in the prompts.(Li et al., 2022c) exploit the symmetry of the task, and optimize prompts in a continuous space so that the probability of predicting both the subject and the object is maximized using the resulting prompts."
252683270,A Decade of Knowledge Graphs in Natural Language Processing: A Survey,https://www.semanticscholar.org/paper/2341353cae858ce06225e46356c472b71dc63372,Knowledge Graph Construction,8,"The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020). Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a). A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018). Entity linking is a task of linking entities recognized in some text to already existing entities in KGs (Moon et al., 2018;. Since synonymous or similar entities often exist in different KGs or in different languages, entity alignment can be performed to reduce redundancy and repetition in future tasks (Gangemi et al., 2016;Chen et al., 2018). Coming up with the rules and schemes of KGs, i.e., their structure and format of knowledge presented in it, is done with the task of ontology construction (Haussmann et al., 2019).","sent1: The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020).
sent2: Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a).
sent3: A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).
sent4: Entity linking is a task of linking entities recognized in some text to already existing entities in KGs (Moon et al., 2018;. Since synonymous or similar entities often exist in different KGs or in different languages, entity alignment can be performed to reduce redundancy and repetition in future tasks (Gangemi et al., 2016;Chen et al., 2018).
sent5: Coming up with the rules and schemes of KGs, i.e., their structure and format of knowledge presented in it, is done with the task of ontology construction (Haussmann et al., 2019).","1. What is the starting point in constructing Knowledge Graphs (KGs)? sent1
    1.1. What is the purpose of entity extraction in KG construction? sent1
2. What task follows entity extraction in KG construction? sent2
    2.1. How are relationships and interactions between entities found? sent2
3. How are entity extraction and relation extraction used in constructing new KGs? sent3
4. What is the task of entity linking in the context of KGs? sent4
    4.1. Why is entity alignment important in KG construction? sent4
5. What task is involved in defining the structure and format of KGs? sent5","Question: How do entity extraction and relation extraction contribute to the construction of new Knowledge Graphs?

Supporting sentence: sent1, sent2, sent3",How do entity extraction and relation extraction contribute to the construction of new Knowledge Graphs?,"sent1, sent2, sent3",2,implement,"The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020).

Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a).

A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).","Entity extraction serves as a starting point in constructing Knowledge Graphs (KGs) by deriving real-world entities from unstructured text (Al-Moslmi et al., 2020).

Once the relevant entities are identified, relation extraction is used to find the relationships and interactions between them (Zhang et al., 2019a).

Many studies utilize both entity extraction and relation extraction to construct new KGs, such as for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).","Question:

How do entity extraction and relation extraction contribute to the construction of new Knowledge Graphs?

Answer:

Entity extraction serves as a starting point in constructing Knowledge Graphs (KGs) by deriving real-world entities from unstructured text (Al-Moslmi et al., 2020).

Once the relevant entities are identified, relation extraction is used to find the relationships and interactions between them (Zhang et al., 2019a).

Many studies utilize both entity extraction and relation extraction to construct new KGs, such as for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018).","Question:

How do entity extraction and relation extraction contribute to the construction of new Knowledge Graphs?

Answer:

The task of entity extraction is a starting point in constructing KGs and is used to derive real-world entities from unstructured text (Al-Moslmi et al., 2020).

Once the relevant entities are singled out, relationships and interactions between them are found with the task of relation extraction (Zhang et al., 2019a).

A lot of papers use both entity extraction and relation extraction to construct new KGs, e.g., for news events (Rospocher et al., 2016) or scholarly research (Luan et al., 2018)."
253736389,Transformers for Tabular Data Representation: A Survey of Models and Applications,https://www.semanticscholar.org/paper/18ff1542d5a2a4490c7b3f21522bf1343889f700,Vanilla Transformer,6,"The vanilla transformer (Vaswani et al., 2017) is a seq2seq model (Sutskever et al., 2014) consisting of an encoder and a decoder, each of which is a stack of N identical modules. The encoder block is composed of a multi-head self-attention module and a position-wise feed-forward network. Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. Residual connections and layer-normalization modules are also used. Decoder blocks consist of cross-attention modules between the multi-head self-attention modules and the position-wise feed-forward networks, where masking is used to prevent each position from attending to subsequent positions.

The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model. The choice of the architecture depends on the final task. Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data. In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input. The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX).","sent1: The vanilla transformer (Vaswani et al., 2017) is a seq2seq model (Sutskever et al., 2014) consisting of an encoder and a decoder, each of which is a stack of N identical modules.
sent2: The encoder block is composed of a multi-head self-attention module and a position-wise feed-forward network.
sent3: Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.
sent4: Residual connections and layer-normalization modules are also used.
sent5: Decoder blocks consist of cross-attention modules between the multi-head self-attention modules and the position-wise feed-forward networks, where masking is used to prevent each position from attending to subsequent positions.
sent6: The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model.
sent7: The choice of the architecture depends on the final task.
sent8: Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data.
sent9: In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input.
sent10: The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX).","1. What is the vanilla transformer and what does it consist of? sent1
    1.1. What is the composition of the encoder block in a vanilla transformer? sent2
        1.1.1. What is the purpose of multi-head attention in the encoder block? sent3
        1.1.2. What additional modules are used in the encoder block? sent4
    1.2. What do decoder blocks consist of in a vanilla transformer? sent5
2. How can the transformer architecture be utilized? sent6
    2.1. What determines the choice of transformer architecture? sent7
    2.2. What are encoder-only models mainly used for, and what is their popular application? sent8
        2.2.1. How is pretraining done for encoder-only models? sent9
    2.3. What is the encoder-decoder architecture used for? sent10","Question: How is the transformer architecture adapted for different tasks, and what are the specific uses of encoder-only models?

Supporting sentence: sent6, sent7, sent8, sent9, sent10","How is the transformer architecture adapted for different tasks, and what are the specific uses of encoder-only models?","sent6, sent7, sent8, sent9, sent10",4,implement,"The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model.

The choice of the architecture depends on the final task.

Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data.

In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input.

The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX).","The transformer architecture can be adapted as an encoder-decoder (Vaswani et al., 2017; Raffel et al., 2020), an encoder-only, or a decoder-only (Radford et al., 2019; Brown et al., 2020) model.

The choice of architecture depends on the final task.

Encoder-only models are mainly used for classification and are the most popular choice for extensions involving tabular data.

In this case, pretraining involves a masked language modeling (MLM) task, which aims to predict masked tokens in an altered input.

The encoder-decoder architecture is used for models that focus on sequence generation tasks.","Question:

How is the transformer architecture adapted for different tasks, and what are the specific uses of encoder-only models?

Answer:

The transformer architecture can be adapted as an encoder-decoder (Vaswani et al., 2017; Raffel et al., 2020), an encoder-only, or a decoder-only (Radford et al., 2019; Brown et al., 2020) model.

The choice of architecture depends on the final task.

Encoder-only models are mainly used for classification and are the most popular choice for extensions involving tabular data.

In this case, pretraining involves a masked language modeling (MLM) task, which aims to predict masked tokens in an altered input.

The encoder-decoder architecture is used for models that focus on sequence generation tasks.","Question:

How is the transformer architecture adapted for different tasks, and what are the specific uses of encoder-only models?

Answer:

The transformer architecture can be used as an encoder-decoder (Vaswani et al., 2017;Raffel et al., 2020), an encoder-only , or decoder-only (Radford et al., 2019;Brown et al., 2020) model.

The choice of the architecture depends on the final task.

Encoder-only models are mainly used for classification and are the most popular choice for extensions for tabular data.

In this case, pretraining is done with a masked language modeling (MLM) task, whose goal is to predict masked token(s) of an altered input.

The encoder-decoder architecture is used for models that focus on sequence generation tasks (RPT, TAPEX)."
246863418,A Survey on Dynamic Neural Networks for Natural Language Processing,https://www.semanticscholar.org/paper/802a5d24c78f713e282b003d99b4afd924bd7568,Skimming,7,"Skimming techniques, as summarized in Table 1, skip some time steps or allocate different computation on them. Intuitively, skimming matches how human beings efficiently read text and extract information from it (Li et al., 2019). By em-phasizing the important information within a sequence and ignoring parts with little importance, skimming helps the model achieve faster inference speed and better capture long-term dependencies. The three categories of skimming are skipping and early stopping, computation reduction, and dynamic hierarchical RNN, corresponding with three motivations: to skip unimportant input, to allocate less computation to unimportant input, and to increase computation to important input only.

Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early. LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU). At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading. LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions. The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label. Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up. Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update. If the gate decides to skip a time step, the hidden states will be directly copied without any update.

To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level. Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings. They then apply early stopping at a sentence when the policy network decides to stop reading. Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text. They propose Reading Inspired Model to mimic the behaviors of humans, which allows the model to decide whether to skip a single time step or stop reading early. Yu et al. (2018) add a rereading operation to LSTM-Jump (Yu et al., 2017) which allows the model to stay on the current time step, allocating more computation to important information.

The aforementioned techniques can only go forward, which makes it impossible to regret if hav-","sent1: Skimming techniques, as summarized in Table 1, skip some time steps or allocate different computation on them.
sent2: Intuitively, skimming matches how human beings efficiently read text and extract information from it (Li et al., 2019).
sent3: By em-phasizing the important information within a sequence and ignoring parts with little importance, skimming helps the model achieve faster inference speed and better capture long-term dependencies.
sent4: The three categories of skimming are skipping and early stopping, computation reduction, and dynamic hierarchical RNN, corresponding with three motivations: to skip unimportant input, to allocate less computation to unimportant input, and to increase computation to important input only.
sent5: Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.
sent6: LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU).
sent7: At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading.
sent8: LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.
sent9: The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label.
sent10: Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.
sent11: Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update.
sent12: If the gate decides to skip a time step, the hidden states will be directly copied without any update.
sent13: To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level.
sent14: Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings.
sent15: They then apply early stopping at a sentence when the policy network decides to stop reading.
sent16: Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text.
sent17: They propose Reading Inspired Model to mimic the behaviors of humans, which allows the model to decide whether to skip a single time step or stop reading early.
sent18: Yu et al. (2018) add a rereading operation to LSTM-Jump (Yu et al., 2017) which allows the model to stay on the current time step, allocating more computation to important information.
sent19: The aforementioned techniques can only go forward, which makes it impossible to regret if hav-","1. What are skimming techniques in the context of dynamic neural networks for NLP? sent1
    1.1. How do skimming techniques relate to human reading behavior? sent2
    1.2. What benefits do skimming techniques provide to models? sent3
    1.3. What are the three categories of skimming techniques? sent4
2. What is the purpose of skipping and early stopping in skimming techniques? sent5
    2.1. What is LSTM-Jump and how does it function? sent6, sent7, sent8
        2.1.1. What is the reward mechanism in LSTM-Jump? sent9
        2.1.2. How does LSTM-Jump compare to a standard LSTM? sent10
    2.2. What is Skip RNN and how does it operate? sent11, sent12
    2.3. How does Rea-soNet implement early stopping? sent13
    2.4. How does Jumper apply early stopping? sent14, sent15
    2.5. What evidence supports the use of skipping and early stopping in human reading? sent16
    2.6. What is the Reading Inspired Model proposed by Li et al. (2019)? sent17
    2.7. How does Yu et al. (2018) enhance LSTM-Jump with a rereading operation? sent18","Question: What are the mechanisms and benefits of skipping and early stopping in skimming techniques for NLP?

Supporting sentence: sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16",What are the mechanisms and benefits of skipping and early stopping in skimming techniques for NLP?,"sent5, sent6, sent7, sent8, sent9, sent10, sent11, sent12, sent13, sent14, sent15, sent16",2,implement,"Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.

LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU).

At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading.

LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.

The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label.

Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.

Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update.

If the gate decides to skip a time step, the hidden states will be directly copied without any update.

To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level.

Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings.

They then apply early stopping at a sentence when the policy network decides to stop reading.

Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text.","Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.

LSTM-Jump (Yu et al., 2017) is a skipping mechanism designed to ignore irrelevant information for natural language understanding (NLU).

At each step, the current states are used to compute a ""jumping softmax"", which determines how many steps to jump forward and whether to stop reading.

LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.

The reward mechanism in LSTM-Jump is a binary function that rewards correct predictions and penalizes incorrect ones.

Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.

Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update, enhancing efficiency by reducing unnecessary computations.

If the gate decides to skip a time step, the hidden states are directly copied without any update.

ReasoNet (Shen et al., 2017) introduces a terminal state to decide whether to terminate early for machine reading comprehension at each time step at the token level.

Jumper first splits a paragraph into several sub-sentences and encodes them into sentence embeddings.

Early stopping is applied at a sentence when the policy network decides to stop reading.

Li et al. (2019) confirm that skipping and early stopping are common strategies employed by humans when reading text, as observed through eye-tracking devices.","Question:

What are the mechanisms and benefits of skipping and early stopping in skimming techniques for NLP?

Answer:

Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.

LSTM-Jump (Yu et al., 2017) is a skipping mechanism designed to ignore irrelevant information for natural language understanding (NLU).

At each step, the current states are used to compute a ""jumping softmax"", which determines how many steps to jump forward and whether to stop reading.

LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.

The reward mechanism in LSTM-Jump is a binary function that rewards correct predictions and penalizes incorrect ones.

Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.

Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update, enhancing efficiency by reducing unnecessary computations.

If the gate decides to skip a time step, the hidden states are directly copied without any update.

ReasoNet (Shen et al., 2017) introduces a terminal state to decide whether to terminate early for machine reading comprehension at each time step at the token level.

Jumper first splits a paragraph into several sub-sentences and encodes them into sentence embeddings.

Early stopping is applied at a sentence when the policy network decides to stop reading.

Li et al. (2019) confirm that skipping and early stopping are common strategies employed by humans when reading text, as observed through eye-tracking devices.","Question:

What are the mechanisms and benefits of skipping and early stopping in skimming techniques for NLP?

Answer:

Skipping and Early Stopping Skipping and early stopping aim to improve efficiency for a long sequence by skipping some tokens or stopping reading early.

LSTM-Jump (Yu et al., 2017) is a skipping mechanism to ignore irrelevant information for natural language understanding (NLU).

At each step, the current states are used to compute a ""jumping softmax"", which decides how many steps to jump forward and whether to stop reading.

LSTM-Jump employs policy gradient to train the model to make non-differentiable discrete jumping decisions.

The reward is a binary function which rewards a correct prediction and penalizes an incorrect prediction of the label.

Compared to a standard LSTM, LSTM-Jump achieves better accuracy with up to 6× speed-up.

Skip RNN (Campos et al., 2018) introduces a binary gate to learn whether to skip a state update.

If the gate decides to skip a time step, the hidden states will be directly copied without any update.

To stop reading early as needed, Rea-soNet (Shen et al., 2017) introduces a terminal state which decides whether to terminate early for machine reading comprehension on each time step at the token level.

Jumper  first splits a paragraph to several sub-sentences and encodes them into sentence embeddings.

They then apply early stopping at a sentence when the policy network decides to stop reading.

Li et al. (2019) use eye-tracking devices and confirm that skipping and early stopping are common when humans read text."
232075945,A Survey on Stance Detection for Mis-and Disinformation Identification,https://www.semanticscholar.org/paper/14ba97c7e4c7d370965333ecf3835e514c664106,B Additional Formulations of Stance as a Component for Fact-Checking,11,"Beyond the approaches that we outlined in Section 3.2, stance has also been used for detecting misconceptions and for profiling media sources as part of a fact-checking pipeline. Below, we describe some work that follows these formulations.

Misconceptions Hossain et al. (2020) focused on detecting misinformation related to COVID-19, based on known misconceptions listed in Wikipedia. They evaluated the veracity of a tweet depending on whether it agrees, disagrees, or has no stance with respect to a set of misconceptions. A related formulation of the task is detecting previously fact-checked claims (Shaar et al., 2020). This allows to assess the veracity of dubious content by evaluating the stance of a claim regarding already checked stories, known misconceptions, and facts.

Media Profiling Stance detection has also been used for media profiling. Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics. They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020). This is an important step towards understanding media biases. Tweet: Wow, that is fascinating! I hope you never mock our proud Scandi heritage again.

(b) Examples from Qazvinian et al. (2011) andDerczynski et al. (2017) Claim: The Rodney King riots took place in the most populous county in the USA. ɀiki Evidence 1: The 1992 Los Angeles riots, also known as the Rodney King riots were a series of riots, lootings, arsons, and civil disturbances that occurred in Los Angeles County, California in April and May 1992. ɀiki Evidence 2: Los Angeles County, officially the County of Los Angeles, is the most populous county in the USA.

(c) Example from  Headline: Jess Smith of Chatham, Kent was the smiling sun baby in the Teletubbies TV show ǌ Summary 1: Canterbury Christ Church University student Jess Smith, from Chatham, starred as Teletubbies sun ǌ Summary 2: This College Student Claims She Was The Teletubbies Sun Baby (d) Example from Ferreira and Vlachos (2016) u1: We understand that there are two gunmen and up to a dozen hostages inside the cafe under siege at Sydney.. ISIS flags remain on display #7News u2: @u1 not ISIS flags u3: @u1 sorry -how do you know its an ISIS flag? Can you actually confirm that? ɳ u4: @u3 no she cant cos its actually not u5: @u1 More on situation at Martin Place in Sydney, AU LINK u6: @u1 Have you actually confirmed its an ISIS flag or are you talking shit ɳ  Table 3: Illustrative examples for different stance detection scenarios included in our survey. We annotate the expressed stance with (support, for), (deny, against), ɳ (query), and (comment).

The reliability of entire news media sources has been automatically rated based on their stance with respect to manually fact-checked claims, without access to gold labels for the overall medium-level factuality of reporting (Mukherjee and Weikum, 2015;Popat et al., 2017Popat et al., , 2018. The assumption in such methods is that reliable media agree with true claims and disagree with false ones, while for unreliable media, the situation is reversed. The trustworthiness of Web sources has also been studied from a data analytics perspective, e.g., Dong et al. (2015) proposed that a trustworthy source is one that contains very few false claims.

More recently, Baly et al. (2018a) used gold labels from Media Bias/Fact Check, 5 and a variety of information sources: articles published by the medium, what is said about the medium on Wikipedia, metadata from its Twitter profile, URL structure, and traffic information. In follow-up work, Baly et al. (2019) used the same representation to jointly predict a medium's factuality of reporting (high vs. mixed vs. low) and its bias (left vs. center vs. right) on an ordinal scale, in a multi-task ordinal regression setup.  (Nakov et al., 2021) for a recent survey on media profiling.

There is a well-known connection between factuality and bias. 6 For example, hyper-partisanship is often linked to low trustworthiness (Potthast et al., 2018), e.g., appealing to emotions rather than sticking to the facts, while center media tend to be generally more impartial and also more trustworthy.

User Profiling In the case of social media and community fora, it is important to model the trustworthiness of the user. In particular, there has been research on finding opinion manipulation trolls, paid (Mihaylov et al., 2015b) or just perceived (Mihaylov et al., 2015a), sockpuppets (Maity et al., 2017Kumar et al., 2017), Internet water army (Chen et al., 2013), and seminar users (Darwish et al., 2017).","sent1: Beyond the approaches that we outlined in Section 3.2, stance has also been used for detecting misconceptions and for profiling media sources as part of a fact-checking pipeline.
sent2: Below, we describe some work that follows these formulations.
sent3: Misconceptions Hossain et al. (2020) focused on detecting misinformation related to COVID-19, based on known misconceptions listed in Wikipedia.
sent4: They evaluated the veracity of a tweet depending on whether it agrees, disagrees, or has no stance with respect to a set of misconceptions.
sent5: A related formulation of the task is detecting previously fact-checked claims (Shaar et al., 2020).
sent6: This allows to assess the veracity of dubious content by evaluating the stance of a claim regarding already checked stories, known misconceptions, and facts.
sent7: Media Profiling Stance detection has also been used for media profiling.
sent8: Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics.
sent9: They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020).
sent10: This is an important step towards understanding media biases.
sent11: Tweet: Wow, that is fascinating!
sent12: I hope you never mock our proud Scandi heritage again.
sent13: (b) Examples from Qazvinian et al. (2011)
sent14: andDerczynski et al. (2017) Claim: The Rodney King riots took place in the most populous county in the USA. ɀiki Evidence 1: The 1992 Los Angeles riots, also known as the Rodney King riots were a series of riots, lootings, arsons, and civil disturbances that occurred in Los Angeles County, California in April and May 1992.
sent15: ɀiki Evidence 2: Los Angeles County, officially the County of Los Angeles, is the most populous county in the USA.(c)
sent16: Example from  Headline: Jess Smith of Chatham, Kent was the smiling sun baby in the Teletubbies TV show ǌ
sent17: Summary 1: Canterbury Christ Church University student Jess Smith, from Chatham, starred as Teletubbies sun ǌ
sent18: Summary 2: This College Student Claims She Was The Teletubbies Sun Baby (d) Example from Ferreira and Vlachos (2016) u1: We understand that there are two gunmen and up to a dozen hostages inside the cafe under siege at Sydney.. ISIS flags remain on display #7News u2: @u1 not ISIS flags u3: @u1 sorry -how
sent19: do you know its an ISIS flag? Can you actually confirm that?
sent20: ɳ u4: @u3 no she cant cos its actually not u5: @u1 More on situation at Martin Place in Sydney, AU LINK u6: @u1 Have you actually confirmed its an ISIS flag or are you talking shit ɳ  Table
sent21: 3: Illustrative examples for different stance detection scenarios included in our survey.
sent22: We annotate the expressed stance with (support, for), (deny, against), ɳ (query), and (comment).
sent23: The reliability of entire news media sources has been automatically rated based on their stance with respect to manually fact-checked claims, without access to gold labels for the overall medium-level factuality of reporting (Mukherjee and Weikum, 2015;Popat et al., 2017Popat et al., , 2018. The assumption in such methods is that reliable media agree with true claims and disagree with false ones, while for unreliable media, the situation is reversed. The trustworthiness of Web sources has also been studied from a data analytics perspective, e.g., Dong et al. (2015) proposed that a trustworthy source is one that contains very few false claims.
sent24: More recently, Baly et al. (2018a) used gold labels from Media Bias/Fact Check, 5 and a variety of information sources: articles published by the medium, what is said about the medium on Wikipedia, metadata from its Twitter profile, URL structure, and traffic information.
sent25: In follow-up work, Baly et al. (2019) used the same representation to jointly predict a medium's factuality of reporting (high vs. mixed vs. low) and its bias (left vs. center vs. right) on an ordinal scale, in a multi-task ordinal regression setup.  (Nakov et al., 2021) for a recent survey on media profiling.
sent26: There is a well-known connection between factuality and bias.
sent27: 6 For example, hyper-partisanship is often linked to low trustworthiness (Potthast et al., 2018), e.g., appealing to emotions rather than sticking to the facts, while center media tend to be generally more impartial and also more trustworthy.
sent28: User Profiling In the case of social media and community fora, it is important to model the trustworthiness of the user.
sent29: In particular, there has been research on finding opinion manipulation trolls, paid (Mihaylov et al., 2015b) or just perceived (Mihaylov et al., 2015a), sockpuppets (Maity et al., 2017Kumar et al., 2017), Internet water army (Chen et al., 2013), and seminar users (Darwish et al., 2017).","1. How has stance been used beyond the approaches outlined in Section 3.2? sent1
    1.1. What are some works that follow these additional formulations of stance? sent2
        1.1.1. How has stance been used for detecting misconceptions? sent3
            1.1.1.1. How is the veracity of a tweet evaluated in the context of misconceptions? sent4
        1.1.2. What is a related formulation of the task involving fact-checked claims? sent5
            1.1.2.1. How does this formulation assess the veracity of dubious content? sent6
    1.2. How has stance detection been used for media profiling? sent7
        1.2.1. What approach did Stefanov et al. (2020) explore for media profiling? sent8
            1.2.1.1. How did they build clusters of users on Twitter? sent9
            1.2.1.2. Why is this step important? sent10
2. How is the reliability of news media sources rated based on stance? sent23
    2.1. What assumption is made about reliable and unreliable media? sent23
    2.2. What recent work used gold labels from Media Bias/Fact Check for media profiling? sent24
        2.2.1. What did the follow-up work by Baly et al. (2019) aim to predict? sent25
3. What is the connection between factuality and bias? sent26
    3.1. How is hyper-partisanship linked to trustworthiness? sent27
4. Why is it important to model the trustworthiness of users in social media and community fora? sent28
    4.1. What research has been conducted on opinion manipulation and related activities? sent29","Question: How is stance detection utilized in media profiling to identify political leanings and biases?

Supporting sentence: sent7, sent8, sent9, sent10",How is stance detection utilized in media profiling to identify political leanings and biases?,"sent7, sent8, sent9, sent10",4,implement,"Media Profiling Stance detection has also been used for media profiling.

Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics.

They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020).

This is an important step towards understanding media biases.","Stance detection has been used for media profiling to identify political leanings and biases.

Stefanov et al. (2020) explored an unsupervised approach to identify the political leanings of media outlets and influential people on Twitter based on their stance on controversial topics.

Clusters of users were built around core vocal ones based on their behavior on Twitter, such as retweeting, using the procedure proposed by Darwish et al. (2020).

This approach is an important step towards understanding media biases.","Question:

How is stance detection utilized in media profiling to identify political leanings and biases?

Answer:

Stance detection has been used for media profiling to identify political leanings and biases.

Stefanov et al. (2020) explored an unsupervised approach to identify the political leanings of media outlets and influential people on Twitter based on their stance on controversial topics.

Clusters of users were built around core vocal ones based on their behavior on Twitter, such as retweeting, using the procedure proposed by Darwish et al. (2020).

This approach is an important step towards understanding media biases.","Question:

How is stance detection utilized in media profiling to identify political leanings and biases?

Answer:

Media Profiling Stance detection has also been used for media profiling.

Stefanov et al. (2020) explored the feasibility of an unsupervised approach for identifying the political leanings (left, center, or right bias) of media outlets and influential people on Twitter based on their stance on controversial topics.

They built clusters of users around core vocal ones based on their behaviour on Twitter such as retweeting, using the procedure proposed by Darwish et al. (2020).

This is an important step towards understanding media biases."
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,Adaptive objectives to recommendation,7,"Numerous pre-training or fine-tuning objectives draw inspiration from LM objectives and have been effectively applied to specific downstream tasks based on the input data types and recommendation goals. In sequential recommendations, there is a common interest in modelling an ordered input sequence in an auto-regressive manner from left to right.

Analogous to text sentences,  and Xiao et al. (2022) treated the user's clicked news history as input text and proposed to model user behavior in an auto-regressive manner for next-click prediction. However, as the sequential dependency may not always hold strictly in terms of user preference for recommendations (Yuan et al., 2020a), MLM objectives can be modified accordingly. Yuan et al. (2020b) randomly masked a certain percentage of historical user records and predicted the masked items during training. Autoregressive learning tasks can also be adapted to other types of data. Geng et al. (2022b) modeled a series of paths sampled from a knowledge graph in an auto-regressive manner for recommendation by generating the end node from the pretrained model. Zhao (2022) proposed pre-training the Rearrange Sequence Prediction task to learn the sequence-level information of the user's entire interaction history by predicting whether the user interaction history had been rearranged, which is similar to Permuted Language Modelling (PerLM) (Yang et al., 2019).

MLM, also known as Cloze Prediction, can be adapted to learn graph representations for different recommendation purposes.  proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives. Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node. Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context. Apart from that, MLM can also be adapted to multi-modal data called Masked Multimodal Modelling (MMM) (Wu et al., 2022a). MMM was performed by predicting the semantics of masked news and news image regions given the unmasked inputs and indicating whether a news image and news content segment correspond to each other for news recommendation purposes.

The NSP/SOP can be adapted for CTR prediction as Next K Behaviors Prediction (NBP). NBP was proposed to learn user representations in the pre-training stage by inferring whether a candidate behavior is the next i-th behavior of the target user based on their past N behaviors. NBP can also capture the relatedness between past and multiple future behaviors.","sent1: Numerous pre-training or fine-tuning objectives draw inspiration from LM objectives and have been effectively applied to specific downstream tasks based on the input data types and recommendation goals.
sent2: In sequential recommendations, there is a common interest in modelling an ordered input sequence in an auto-regressive manner from left to right.
sent3: Analogous to text sentences,  and Xiao et al. (2022) treated the user's clicked news history as input text and proposed to model user behavior in an auto-regressive manner for next-click prediction.
sent4: However, as the sequential dependency may not always hold strictly in terms of user preference for recommendations (Yuan et al., 2020a), MLM objectives can be modified accordingly.
sent5: Yuan et al. (2020b) randomly masked a certain percentage of historical user records and predicted the masked items during training.
sent6: Autoregressive learning tasks can also be adapted to other types of data.
sent7: Geng et al. (2022b) modeled a series of paths sampled from a knowledge graph in an auto-regressive manner for recommendation by generating the end node from the pretrained model.
sent8: Zhao (2022) proposed pre-training the Rearrange Sequence Prediction task to learn the sequence-level information of the user's entire interaction history by predicting whether the user interaction history had been rearranged, which is similar to Permuted Language Modelling (PerLM) (Yang et al., 2019).MLM, also known as Cloze Prediction, can be adapted to learn graph representations for different recommendation purposes.
sent9: proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.
sent10: Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node.
sent11: Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context.
sent12: Apart from that, MLM can also be adapted to multi-modal data called Masked Multimodal Modelling (MMM) (Wu et al., 2022a).
sent13: MMM was performed by predicting the semantics of masked news and news image regions given the unmasked inputs and indicating whether a news image and news content segment correspond to each other for news recommendation purposes.
sent14: The NSP/SOP can be adapted for CTR prediction as Next K Behaviors Prediction (NBP).
sent15: NBP was proposed to learn user representations in the pre-training stage by inferring whether a candidate behavior is the next i-th behavior of the target user based on their past N behaviors.
sent16: NBP can also capture the relatedness between past and multiple future behaviors.","1. What are the inspirations and applications of pre-training or fine-tuning objectives in recommendation systems? sent1
2. How are sequential recommendations typically modeled? sent2
    2.1. How did Xiao et al. (2022) model user behavior for next-click prediction? sent3
    2.2. Why might sequential dependency not always hold in user preferences, and how can MLM objectives be modified? sent4
        2.2.1. How did Yuan et al. (2020b) modify MLM objectives for recommendations? sent5
3. Can autoregressive learning tasks be adapted to other types of data? sent6
    3.1. How did Geng et al. (2022b) use autoregressive modeling in recommendations? sent7
    3.2. What is the Rearrange Sequence Prediction task proposed by Zhao (2022)? sent8
4. How can MLM be adapted for graph representations in recommendations? sent9
    4.1. What is Masked Node Prediction (MNP) and how is it performed? sent10
    4.2. What is Masked Edge Prediction (MEP) and how is it performed? sent11
5. How can MLM be adapted to multi-modal data? sent12
    5.1. What is Masked Multimodal Modelling (MMM) and how is it performed? sent13
6. How can NSP/SOP be adapted for CTR prediction? sent14
    6.1. What is Next K Behaviors Prediction (NBP) and how does it function? sent15
    6.2. What additional capability does NBP have? sent16","Question: How can MLM objectives be adapted for graph representations in recommendation systems?

Supporting sentence: sent9, sent10, sent11",How can MLM objectives be adapted for graph representations in recommendation systems?,"sent9, sent10, sent11",2,implement,"proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.

Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node.

Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context.","A transformer model can be pre-trained on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.

Specifically, MNP involves randomly masking a proportion of nodes in a heterogeneous subgraph and predicting the masked nodes based on the remaining context by maximizing the distance between the masked node and irrelevant nodes.

Similarly, MEP is used to recover the masked edge between two adjacent nodes based on the surrounding context.","Question:

How can MLM objectives be adapted for graph representations in recommendation systems?

Answer:

A transformer model can be pre-trained on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.

Specifically, MNP involves randomly masking a proportion of nodes in a heterogeneous subgraph and predicting the masked nodes based on the remaining context by maximizing the distance between the masked node and irrelevant nodes.

Similarly, MEP is used to recover the masked edge between two adjacent nodes based on the surrounding context.","Question:

How can MLM objectives be adapted for graph representations in recommendation systems?

Answer:

proposed pre-training a transformer model on a reconstructed subgraph from a user-item-attribute heterogeneous graph, using Masked Node Prediction (MNP), Masked Edge Prediction (MEP), and meta-path type prediction as objectives.

Specifically, MNP was performed by randomly masking a proportion of nodes in a heterogeneous subgraph and then predicting the masked nodes based on the remaining contexts by maximizing the distance between the masked node and the irrelevant node.

Similarly, MEP was used to recover the masked edge of two adjacent nodes based on the surrounding context."
254877753,Towards Reasoning in Large Language Models: A Survey,https://www.semanticscholar.org/paper/db4ab91d5675c37795e719e997a2827d3d83cd45,Fully Supervised Finetuning,5,"Before discussing reasoning in large language models, it is worth mentioning there is research working on eliciting/improving reasoning in small language models through fully supervised finetuning on specific datasets. For example, Rajani et al.

(2019) finetune a pretrained GPT model (Radford et al., 2018) to generate rationales that explain model predictions with the built CoS-E dataset, and find that models trained with explanations perform better on commonsense question answering tasks (Talmor et al., 2019). Talmor et al. (2020) train RoBERTa (Liu et al., 2019) to perform reasoning/inference based on both implicit pre-trained knowledge and explicit free-text statements. Hendrycks et al. (2021) finetune pretrained 2 It is important to note that the term ""reasoning"" in this paper does not necessarily imply that LLMs are truly capable of reasoning or that they are able to reason in the same way that humans do. We will discuss this issue in more detail in §6. language models to solve competition mathematics problems by generating full step-by-step solutions, though the accuracy is relatively low. Nye et al. (2022) train language models to do multi-step reasoning for program synthesis/execution by generating ""scratchpads"", i.e., intermediate computations, before producing the final answers. We refer the reader to Helwe et al. (2021); Bhargava and Ng (2022)'s survey for more studies in this line.

There are two major limitations of fully supervised finetuning. First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create. Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.","sent1: Before discussing reasoning in large language models, it is worth mentioning there is research working on eliciting/improving reasoning in small language models through fully supervised finetuning on specific datasets.
sent2: For example, Rajani et al.(2019) finetune a pretrained GPT model (Radford et al., 2018) to generate rationales that explain model predictions with the built CoS-E dataset, and find that models trained with explanations perform better on commonsense question answering tasks (Talmor et al., 2019).
sent3: Talmor et al. (2020) train RoBERTa (Liu et al., 2019) to perform reasoning/inference based on both implicit pre-trained knowledge and explicit free-text statements.
sent4: Hendrycks et al. (2021) finetune pretrained 2
sent5: It is important to note that the term ""reasoning"" in this paper does not necessarily imply that LLMs are truly capable of reasoning or that they are able to reason in the same way that humans do.
sent6: We will discuss this issue in more detail in §6.
sent7: language models to solve competition mathematics problems by generating full step-by-step solutions, though the accuracy is relatively low.
sent8: Nye et al. (2022) train language models to do multi-step reasoning for program synthesis/execution by generating ""scratchpads"", i.e., intermediate computations, before producing the final answers.
sent9: We refer the reader to Helwe et al. (2021); Bhargava and Ng (2022)'s survey for more studies in this line.
sent10: There are two major limitations of fully supervised finetuning.
sent11: First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.
sent12: Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.","1. What is the focus of research before discussing reasoning in large language models? sent1
    1.1. Can you provide an example of finetuning a pretrained model to improve reasoning? sent2
    1.2. How do Talmor et al. (2020) train RoBERTa for reasoning/inference? sent3
    1.3. What is the approach used by Hendrycks et al. (2021) for solving mathematics problems? sent7
    1.4. How do Nye et al. (2022) train language models for multi-step reasoning? sent8
    1.5. Where can more studies on this line of research be found? sent9
2. What is important to note about the term ""reasoning"" in the context of this paper? sent5
    2.1. Where will this issue be discussed in more detail? sent6
3. What are the two major limitations of fully supervised finetuning? sent10
    3.1. What is the first limitation of fully supervised finetuning? sent11
    3.2. What is the second limitation of fully supervised finetuning? sent12","Question: What are the limitations of fully supervised finetuning in improving reasoning in language models?

Supporting sentence: sent10, sent11, sent12",What are the limitations of fully supervised finetuning in improving reasoning in language models?,"sent10, sent11, sent12",4,implement,"There are two major limitations of fully supervised finetuning.

First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.

Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions.","Fully supervised finetuning has two major limitations.

First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.

Additionally, the model is only trained on a specific dataset, which restricts its application to a particular domain and may cause it to depend on artifacts in the training data rather than genuine reasoning for making predictions.","Question:

What are the limitations of fully supervised finetuning in improving reasoning in language models?

Answer:

Fully supervised finetuning has two major limitations.

First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.

Additionally, the model is only trained on a specific dataset, which restricts its application to a particular domain and may cause it to depend on artifacts in the training data rather than genuine reasoning for making predictions.","Question:

What are the limitations of fully supervised finetuning in improving reasoning in language models?

Answer:

There are two major limitations of fully supervised finetuning.

First, it requires a dataset containing explicit reasoning, which can be difficult and time-consuming to create.

Additionally, the model is only trained on a specific dataset, which limits its application to a specific domain and may result in the model relying on artifacts in the training data rather than actual reasoning to make predictions."
256231532,Social Influence Dialogue Systems: A Survey of Datasets and Models For Social Influence Tasks,https://www.semanticscholar.org/paper/a1275e92f4830e5bbd53bc1b1fa44a9a2f024f88,Strategy Representation,4,"Implicit: The most obvious way to represent the system strategy is implicitly, without any intended decoupling between system strategy and response realization. This corresponds to the usual sequenceto-sequence framework that has been a standard baseline for the methods developed in this space. An important example is the work by Lewis et al. (2017), who were one of the first works to train endto-end dialogue models that exhibit social influence. The authors employed a neural network based on GRUs, one for encoding the negotiation context, one to encode the dialogue utterances, and two recurrent units to generate the output agreement in a bidirectional manner. Latent vectors: Yarats and Lewis (2018) explored latent vectors to decouple utterance semantics from its linguistic aspects. Their hierarchical approach first constructs a latent vector from the input message, which is then used for response generation and planning. These latent vectors are trained to maximize the likelihood of future dialogue messages and actions, which enables the decoupling between semantics and realization. Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response. The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018). Semantic Strategies: The structural properties ex-  ","sent1: Implicit: The most obvious way to represent the system strategy is implicitly, without any intended decoupling between system strategy and response realization.
sent2: This corresponds to the usual sequenceto-sequence framework that has been a standard baseline for the methods developed in this space.
sent3: An important example is the work by Lewis et al. (2017), who were one of the first works to train endto-end dialogue models that exhibit social influence.
sent4: The authors employed a neural network based on GRUs, one for encoding the negotiation context, one to encode the dialogue utterances, and two recurrent units to generate the output agreement in a bidirectional manner.
sent5: Latent vectors: Yarats and Lewis (2018) explored latent vectors to decouple utterance semantics from its linguistic aspects.
sent6: Their hierarchical approach first constructs a latent vector from the input message, which is then used for response generation and planning.
sent7: These latent vectors are trained to maximize the likelihood of future dialogue messages and actions, which enables the decoupling between semantics and realization.
sent8: Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response.
sent9: The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018).
sent10: Semantic Strategies: The structural properties ex-","1. What is the most obvious way to represent the system strategy in dialogue systems? sent1
    1.1. What framework corresponds to this implicit strategy representation? sent2
    1.2. Can you provide an example of a work that uses this implicit strategy representation? sent3
        1.2.1. What neural network architecture did Lewis et al. (2017) employ for their dialogue model? sent4
2. How did Yarats and Lewis (2018) explore the use of latent vectors in dialogue systems? sent5
    2.1. What is the hierarchical approach used by Yarats and Lewis (2018) for response generation? sent6
    2.2. How are these latent vectors trained, and what is their purpose? sent7
3. What role do Dialogue Acts (DAs) play in strategy representation for dialogue systems? sent8
    3.1. How do Dialogue Acts facilitate the use of reinforcement learning and modular design in dialogue systems? sent9","Question: How do Dialogue Acts contribute to strategy representation and facilitate reinforcement learning in dialogue systems?

Supporting sentence: sent8, sent9",How do Dialogue Acts contribute to strategy representation and facilitate reinforcement learning in dialogue systems?,"sent8, sent9",4,implement,"Dialogue Acts (DAs): Dialogue Acts, such as greeting, offer propose, agreement, or disagreement, are effective at capturing a high-level structure of the dialogue flow in social influence settings, reducing the model strategy to first predicting the dialogue act for the next response.

The use of DAs makes it convenient to apply reinforcement learning approaches (Zhang et al., 2020b;Yang et al., 2021), while also aiding in developing a modular dialogue system design (He et al., 2018).",N/A,"Question:

How do Dialogue Acts contribute to strategy representation and facilitate reinforcement learning in dialogue systems?

Answer:

N/A","Question:

How do Dialogue Acts contribute to strategy representation and facilitate reinforcement learning in dialogue systems?

Answer:

N/A"
254877175,A Survey of Deep Learning for Mathematical Reasoning,https://www.semanticscholar.org/paper/2dbec38fe353ab0e495ad09263389dbc9260824d,High-quality Reasoning Chains,14,"Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt. However, manually creating reasoning chains has two disadvantages. First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks. Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer. To address this limitation, recent studies mainly fo- Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex (175B) Clustering Language Auto-generated -Complexity- CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).

Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks. In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems. Similarly , an alternative solution that uses large language models to express the reasoning process as a program. The computation is then relegated to an external computer, which executes the generated programs to derive the answer. A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.

Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a). Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer. In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.

6 Discussion and Findings

Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt. However, manually creating reasoning chains has two disadvantages. First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks. Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer. To address this limitation, recent studies mainly fo- Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex (175B) Clustering Language Auto-generated -Complexity- CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).

Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks. In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems. Similarly , an alternative solution that uses large language models to express the reasoning process as a program. The computation is then relegated to an external computer, which executes the generated programs to derive the answer. A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.

Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a). Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer. In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.

6 Discussion and Findings","sent1: Early chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt.
sent2: However, manually creating reasoning chains has two disadvantages.
sent3: First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks.
sent4: Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer.
sent5: To address this limitation, recent studies mainly fo-
sent6: Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex
sent7: (175B) Clustering Language Auto-generated -Complexity-
sent8: CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT
sent9: (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.
sent10: In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.
sent11: Similarly , an alternative solution that uses large language models to express the reasoning process as a program.
sent12: The computation is then relegated to an external computer, which executes the generated programs to derive the answer.
sent13: A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).
sent14: Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.
sent15: In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.
sent16: 6 Discussion and FindingsEarly chain of thought work (e.g., Wei et al. (2022)) mainly relies on a single human-annotated reasoning chain as a prompt.
sent17: However, manually creating reasoning chains has two disadvantages.
sent18: First, as tasks become more complex, current models may not be sufficient to learn to perform all necessary reasoning steps and cannot easily generalize to different tasks.
sent19: Second, a single decoding process is vulnerable to incorrect inference steps, leading to an incorrect prediction as the final answer.
sent20: To address this limitation, recent studies mainly fo-
sent21: Hand-crafted -Self-Consistency-CoT (Wang et al., 2023) Codex (175B) Random Language Hand-crafted Self-consistency Least-to-most CoT (Zhou et al., 2023) Codex (175B) Random Language Hand-crafted -PromptPG- CoT (Lu et al., 2022b) GPT-3 (175B) RL Language Hand-crafted -Retrieval-CoT (Zhang et al., 2023) GPT-3 (175B) Retrival Language Auto-generated -Auto-CoT (Zhang et al., 2023) Codex
sent22: (175B) Clustering Language Auto-generated -Complexity-
sent23: CoT (Fu et al., 2023) GPT-3 (175B) Complexity Language Hand-crafted Self-consistency Few-shot- PoT
sent24: (Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.
sent25: In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.
sent26: Similarly , an alternative solution that uses large language models to express the reasoning process as a program.
sent27: The computation is then relegated to an external computer, which executes the generated programs to derive the answer.
sent28: A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).
sent29: Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.
sent30: In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.
sent31: 6 Discussion and Findings","1. What does early chain of thought work rely on? sent1
2. What are the disadvantages of manually creating reasoning chains? sent2
    2.1. Why might current models struggle with complex tasks? sent3
    2.2. What is a vulnerability of a single decoding process? sent4
3. How do recent studies address the limitations of manually created reasoning chains? sent5
    3.1. What are process-based approaches? sent9
        3.1.1. How is least-to-most prompting implemented? sent10
        3.1.2. What is an alternative solution using large language models? sent11, sent12
        3.1.3. What does the Chameleon work integrate? sent13
    3.2. What are outcome-based approaches? sent13
        3.2.1. How does self-consistency work? sent14
        3.2.2. What does Li et al. (2022a) propose to increase diversity? sent15","Question: How do recent studies improve reasoning chain quality and address limitations in mathematical reasoning tasks?

Supporting sentence: sent5, sent9, sent10, sent11, sent12, sent13, sent14, sent15",How do recent studies improve reasoning chain quality and address limitations in mathematical reasoning tasks?,"sent5, sent9, sent10, sent11, sent12, sent13, sent14, sent15",4,implement,"To address this limitation, recent studies mainly fo-

(Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.

In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.

Similarly , an alternative solution that uses large language models to express the reasoning process as a program.

The computation is then relegated to an external computer, which executes the generated programs to derive the answer.

A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).

Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.

In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity.","Recent studies focus on improving reasoning chain quality to address limitations in mathematical reasoning tasks.

Process-based approaches, such as those by Zhou et al. (2023) and Chen et al. (2022b), focus on hand-crafting more complex demonstrations to enhance chain-of-thought reasoning quality, particularly for complex reasoning tasks.

In least-to-most prompting (Zhou et al., 2023), the problem-solving process involves two-stage prompting: first, breaking down a complex problem into a list of subproblems, and then solving these subproblems sequentially, where each solution is aided by the answers to previously solved subproblems.

Similarly, an alternative solution involves using large language models to express the reasoning process as a program.

The computation is then delegated to an external computer, which executes the generated programs to derive the answer.

A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of large language models for compositional reasoning. Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path and instead use multiple reasoning paths (Wang et al., 2023; Li et al., 2022a).

Self-consistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model and selects the most common answer by marginalizing out the reasoning paths.

In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose introducing diverse prompts through ""self-teaching"" to achieve a higher degree of diversity.","Question:

How do recent studies improve reasoning chain quality and address limitations in mathematical reasoning tasks?

Answer:

Recent studies focus on improving reasoning chain quality to address limitations in mathematical reasoning tasks.

Process-based approaches, such as those by Zhou et al. (2023) and Chen et al. (2022b), focus on hand-crafting more complex demonstrations to enhance chain-of-thought reasoning quality, particularly for complex reasoning tasks.

In least-to-most prompting (Zhou et al., 2023), the problem-solving process involves two-stage prompting: first, breaking down a complex problem into a list of subproblems, and then solving these subproblems sequentially, where each solution is aided by the answers to previously solved subproblems.

Similarly, an alternative solution involves using large language models to express the reasoning process as a program.

The computation is then delegated to an external computer, which executes the generated programs to derive the answer.

A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of large language models for compositional reasoning. Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path and instead use multiple reasoning paths (Wang et al., 2023; Li et al., 2022a).

Self-consistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model and selects the most common answer by marginalizing out the reasoning paths.

In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose introducing diverse prompts through ""self-teaching"" to achieve a higher degree of diversity.","Question:

How do recent studies improve reasoning chain quality and address limitations in mathematical reasoning tasks?

Answer:

To address this limitation, recent studies mainly fo-(Chen et al., 2022b) GPT-3 (175B) Random Code Hand-crafted - cus on two aspects, (i) hand-crafting more complex demonstrations, which we refer to as process-based approaches (Zhou et al., 2023;Chen et al., 2022b), (ii) leveraging ensemble-like methods, which we refer to as outcome-based approaches (Wang et al., 2023;Li et al., 2022a).Process-based approaches aim to improve the chain-of-thought reasoning quality, especially for complex reasoning tasks.

In least-to-most prompting (Zhou et al., 2023), the problem-solving process is implemented through two-stage prompting: (i) reducing a complex problem into a list of subproblems; (ii) solving these sub-problems sequentially, so that solving a given sub-problem is facilitated by the answers to previously solved subproblems.

Similarly , an alternative solution that uses large language models to express the reasoning process as a program.

The computation is then relegated to an external computer, which executes the generated programs to derive the answer.

A more recent work, Chameleon (Lu et al., 2023), integrates different tools to enhance the abilities of LLMs for compositional reasoning.

Outcome-based approaches acknowledge the potential incorrectness of an individual reasoning path, and instead use multiple reasoning paths (Wang et al., 2023;Li et al., 2022a).

Selfconsistency (Wang et al., 2023) generates a set of reasoning paths by sampling from the language model, and marginalizes out the reasoning paths by choosing the most common answer.

In addition to using sampling with a single prompt to produce multiple reasoning paths, Li et al. (2022a) propose to introduce diverse prompts through ""selfteaching"", as a complementary solution to produce a higher degree of diversity."
258740687,A Survey on Zero Pronoun Translation,https://www.semanticscholar.org/paper/8fa265a8ca46c9c0ad35d2c5b519a86e2a092dfe,Data-Level Methods Do Not Change Model,9,"Architecture. This is more friendly to NMT. Some researchers targeted making better usage of the limited training data (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021). They trained an external model on the ZP data to recover the ZP information in the input sequence of the MT model (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021) or correct the errors in the translation outputs (Voita et al., 2019). Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021). They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019). Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data. 4. Multitask and Multi-Lingual Learning. ZPT is a hard task to be done alone, researchers are investigating how to leverage other related NLP tasks to improve ZPT by training models to perform multiple tasks simultaneously (Wang et al., 2018a). Since ZPT is a cross-lingual problem, researchers are exploring techniques for training models that can work across multiple languages, rather than being limited to a single language (Aloraini and Poesio, 2020).

6 Evaluation Methods","sent1: Architecture. This is more friendly to NMT.
sent2: Some researchers targeted making better usage of the limited training data (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021).
sent3: They trained an external model on the ZP data to recover the ZP information in the input sequence of the MT model (Tan et al., 2019;Ohtani et al., 2019;Tan et al., 2021) or correct the errors in the translation outputs (Voita et al., 2019).
sent4: Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021).
sent5: They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019).
sent6: Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data.
sent7: 4. Multitask and Multi-Lingual Learning.
sent8: ZPT is a hard task to be done alone, researchers are investigating how to leverage other related NLP tasks to improve ZPT by training models to perform multiple tasks simultaneously (Wang et al., 2018a).
sent9: Since ZPT is a cross-lingual problem, researchers are exploring techniques for training models that can work across multiple languages, rather than being limited to a single language (Aloraini and Poesio, 2020).
sent10: 6 Evaluation Methods","1. What is the focus of some researchers in making better use of limited training data for zero pronoun translation (ZPT)? sent2
2. How do researchers use external models in the context of ZPT? sent3
3. What is the aim of other researchers regarding the training data for the ZPT task? sent4
4. How do researchers prefer to improve ZPT performance without modifying the MT architecture? sent5
5. What did Kimura et al. (2019) and Ri et al. (2021) verify about ZPT performance? sent6
6. What is the role of multitask and multi-lingual learning in ZPT? sent8
7. How are researchers addressing the cross-lingual nature of ZPT? sent9","Question: How do researchers enhance zero pronoun translation performance without altering the machine translation architecture?

Supporting sentence: sent4, sent5, sent6",How do researchers enhance zero pronoun translation performance without altering the machine translation architecture?,"sent4, sent5, sent6",2,implement,"Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021).

They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019).

Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data.","Some researchers aimed to enhance zero pronoun translation performance by up-sampling the training data for the ZPT task (Sugiyama and Yoshinaga, 2019; Kimura et al., 2019; Ri et al., 2021).

They chose to improve ZPT performance through data augmentation without modifying the MT architecture (Wang et al., 2016a; Sugiyama and Yoshinaga, 2019).

Kimura et al. (2019) and Ri et al. (2021) verified that performance can be further improved by denoising the pseudo data.","Question:

How do researchers enhance zero pronoun translation performance without altering the machine translation architecture?

Answer:

Some researchers aimed to enhance zero pronoun translation performance by up-sampling the training data for the ZPT task (Sugiyama and Yoshinaga, 2019; Kimura et al., 2019; Ri et al., 2021).

They chose to improve ZPT performance through data augmentation without modifying the MT architecture (Wang et al., 2016a; Sugiyama and Yoshinaga, 2019).

Kimura et al. (2019) and Ri et al. (2021) verified that performance can be further improved by denoising the pseudo data.","Question:

How do researchers enhance zero pronoun translation performance without altering the machine translation architecture?

Answer:

Others aimed to up-sample the training data for the ZPT task (Sugiyama and Yoshinaga, 2019;Kimura et al., 2019;Ri et al., 2021).

They preferred to  improve the ZPT performance via a data augmentation without modifying the MT architecture (Wang et al., 2016a;Sugiyama and Yoshinaga, 2019).Kimura et al. (2019); Ri et al. (2021) verified that the performance can be further improved by denoising the pseudo data."
251719280,Recent Advances in Text-to-SQL: A Survey of What We Have and What We Expect,https://www.semanticscholar.org/paper/a814b76e589ef27e3f4af379d319d02d2110faa1,Evaluation,4,"Metrics Table 4 shows widely used automatic evaluation metrics for the text-to-SQL task. Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold) SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets. Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time. Other splitting methods also exist to help different research topics (Shaw et al., 2021;.","sent1: Metrics Table 4 shows widely used automatic evaluation metrics for the text-to-SQL task.
sent2: Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold)
sent3: SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets.
sent4: Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time.
sent5: Other splitting methods also exist to help different research topics (Shaw et al., 2021;.","1. What does Table 4 show in the context of text-to-SQL evaluation? sent1
2. How did early works evaluate SQL queries in the text-to-SQL task? sent2
3. What is the SQL query split proposed by Yaghmazadeh et al. (2017)? sent3
4. What is the database split proposed by Yu et al. (2018c)? sent4
5. Are there other splitting methods mentioned for different research topics? sent5","Question: How have early works approached the evaluation of SQL queries in text-to-SQL tasks?

Supporting sentence: sent2, sent3, sent4, sent5",How have early works approached the evaluation of SQL queries in text-to-SQL tasks?,"sent2, sent3, sent4, sent5",2,implement,"Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold)

SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets.

Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time.

Other splitting methods also exist to help different research topics (Shaw et al., 2021;.","Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold).

SQL query split is proposed, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets (Zelle and Mooney, 1996; Yaghmazadeh et al., 2017).

Furthermore, Yu et al. (2018c) propose a database split, where the model does not encounter the databases in the test set during its training phase.

Other splitting methods also exist to support various research topics (Shaw et al., 2021).","Question:

How have early works approached the evaluation of SQL queries in text-to-SQL tasks?

Answer:

Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold).

SQL query split is proposed, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets (Zelle and Mooney, 1996; Yaghmazadeh et al., 2017).

Furthermore, Yu et al. (2018c) propose a database split, where the model does not encounter the databases in the test set during its training phase.

Other splitting methods also exist to support various research topics (Shaw et al., 2021).","Question:

How have early works approached the evaluation of SQL queries in text-to-SQL tasks?

Answer:

Early works evaluate SQL queries by comparing the database querying results executed from the predicted SQL query and the ground-truth (or gold)SQL query (Zelle and Mooney, 1996;Yaghmazadeh et al., 2017) (2018) propose SQL query split, where no SQL query is allowed to appear in more than one set among the train, dev, and test sets.

Furthermore, Yu et al. (2018c) propose a database split, where the model does not see the databases in the test set in its training time.

Other splitting methods also exist to help different research topics (Shaw et al., 2021;."
245144787,Measure and Improve Robustness in NLP Models: A Survey,https://www.semanticscholar.org/paper/f91dbd39d4c742ba675e447b04a0b0c70b33e836,Inductive-prior-based Approaches,9,"Another thread is to introduce inductive bias (i.e., to regularize the hypothesis space) to force the model to discard some spurious features. This is closely connected to the human-prior-based identification approaches in Section 4.1 as those human-priors can often be used to re-formulate the training objective with additional regularizers. To achieve this goal, one usually needs to first construct a side component to inform the main model about the misaligned features, and then to regularize the main model according to the side component. The construction of this side component usually relies on prior knowledge of what the misaligned features are. Then, methods can be built accordingly to counter the features such as label-associated keywords (He et al., 2019), label-associated text fragments (Mahabadi et al., 2020), and general easy-to-learn patterns of data (Nam et al., 2020). Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases. More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model. Furthermore, additional regularizers have been introduced for robust fine-tuning over pre-trained models, e.g., mutual-information-based regularizers (Wang et al., 2021a) and smoothness-inducing adversarial regularization (Jiang et al., 2020).

In a broader scope, given that one of the main challenges of domain adaptation is to counter the model's tendency in learning domain-specific spurious features (Ganin et al., 2016), some methods contributing to domain adaption may have also progressed along the line of our interest, e.g., domain adversarial neural network (Ganin et al., 2016). This line of work also inspires a family of methods forcing the model to learn auxiliary-annotationinvariant representations with a side component (Ghifary et al., 2016;Wang et al., 2017;Rozantsev et al., 2018;Motiian et al., 2017;Li et al., 2018;Vernikos et al., 2020).

Despite the diverse concrete ideas introduced, the above is mainly training for small empirical loss across different domains or distributions in addition to forcing the model to be invariant to domain-specific spurious features. As an extension along this direction, invariant risk minimization (IRM) (Arjovsky et al., 2019) introduces the idea of invariant predictors across multiple environments, which was later followed and discussed by a variety of extensions (Choe et al., 2020;Ahmed et al., 2020;Rosenfeld et al., 2021). More recently, Dranker et al. (2021) applied IRM in natural language inference and found that a more naturalistic characterization of the problem setup is needed.","sent1: Another thread is to introduce inductive bias (i.e., to regularize the hypothesis space) to force the model to discard some spurious features.
sent2: This is closely connected to the human-prior-based identification approaches in Section 4.1 as those human-priors can often be used to re-formulate the training objective with additional regularizers.
sent3: To achieve this goal, one usually needs to first construct a side component to inform the main model about the misaligned features, and then to regularize the main model according to the side component.
sent4: The construction of this side component usually relies on prior knowledge of what the misaligned features are.
sent5: Then, methods can be built accordingly to counter the features such as label-associated keywords (He et al., 2019), label-associated text fragments (Mahabadi et al., 2020), and general easy-to-learn patterns of data (Nam et al., 2020).
sent6: Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases.
sent7: More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model.
sent8: Furthermore, additional regularizers have been introduced for robust fine-tuning over pre-trained models, e.g., mutual-information-based regularizers (Wang et al., 2021a) and smoothness-inducing adversarial regularization (Jiang et al., 2020).
sent9: In a broader scope, given that one of the main challenges of domain adaptation is to counter the model's tendency in learning domain-specific spurious features (Ganin et al., 2016), some methods contributing to domain adaption may have also progressed along the line of our interest, e.g., domain adversarial neural network (Ganin et al., 2016).
sent10: This line of work also inspires a family of methods forcing the model to learn auxiliary-annotationinvariant representations with a side component (Ghifary et al., 2016;Wang et al., 2017;Rozantsev et al., 2018;Motiian et al., 2017;Li et al., 2018;Vernikos et al., 2020).
sent11: Despite the diverse concrete ideas introduced, the above is mainly training for small empirical loss across different domains or distributions in addition to forcing the model to be invariant to domain-specific spurious features.
sent12: As an extension along this direction, invariant risk minimization (IRM) (Arjovsky et al., 2019) introduces the idea of invariant predictors across multiple environments, which was later followed and discussed by a variety of extensions (Choe et al., 2020;Ahmed et al., 2020;Rosenfeld et al., 2021).
sent13: More recently, Dranker et al. (2021) applied IRM in natural language inference and found that a more naturalistic characterization of the problem setup is needed.","1. What is the purpose of introducing inductive bias in NLP models? sent1
    1.1. How is this approach connected to human-prior-based identification approaches? sent2
    1.2. What is the typical process to achieve the goal of introducing inductive bias? sent3
        1.2.1. What does the construction of the side component rely on? sent4
        1.2.2. What methods can be built to counter misaligned features? sent5
    1.3. How do ensemble-based approaches work in the context of bias reduction? sent6
        1.3.1. How can ensemble-based approaches be improved? sent7
    1.4. What additional regularizers have been introduced for robust fine-tuning? sent8
2. How does domain adaptation relate to the introduction of inductive bias? sent9
    2.1. What methods contribute to domain adaptation by countering domain-specific spurious features? sent10
3. What is the main focus of the diverse ideas introduced in this line of work? sent11
4. What is invariant risk minimization (IRM) and how does it extend this line of work? sent12
    4.1. How has IRM been applied in natural language inference? sent13","Question: How do ensemble-based approaches reduce bias in NLP models, and how can they be further improved?

Supporting sentence: sent6, sent7","How do ensemble-based approaches reduce bias in NLP models, and how can they be further improved?","sent6, sent7",4,implement,"Similarly, Clark et al. (2019Utama et al. (2020a,b) propose to ensemble with a model explicitly capturing bias, where the main model is trained together with this ""bias-only"" model such that the main model is discouraged from using biases.

More recent work (Xiong et al., 2021) shows the ensemble-based approaches can be further improved via better calibrating the bias-only model.",N/A,"Question:

How do ensemble-based approaches reduce bias in NLP models, and how can they be further improved?

Answer:

N/A","Question:

How do ensemble-based approaches reduce bias in NLP models, and how can they be further improved?

Answer:

N/A"
236460206,Towards Argument Mining for Social Good: A Survey,https://www.semanticscholar.org/paper/dcb0b23685c9c116d8d53fe47e5157753659d3bd,NLP-Supported Moderation: desiderata and challenges,24,"NLP-supported moderation represents a clear solution to the bottleneck problem affecting facilitation in digital democracy. Automatic tools can take over some of the tasks that human moderators typically perform when monitoring online discussions. For example, in Social Sciences, one of the most discussed issues in crowd-scale deliberation is ""flaming"", i.e., aggressive and disrespectful communicative behavior (Lampe et al., 2014). Here, moderators could benefit from hate-speech and trolling detection methods in NLP. NLP methods to support deliberative decisionmaking have already been applied for the realtime visualisation of argument maps (El-Assady et al., 2017). Deliberation in real-time applications has the clear potential of structured arguments extraction from the news media (Daxenberger and Gurevych, 2020), the identification of the argumentative structure in deliberative contexts (Liebeck et al., 2016), as well as automatic argument summarization (Lawrence et al., 2017).

Beyond the real-time support to users (and moderators) provided by the methods described above, further tasks specific to AM which are part of the role of a human or (semi-)automoated moderator include: detecting fallacies (Habernal et al., 2018b), reasoning and common-sense (Habernal et al., 2018a), relevance estimation (Potthast et al., 2019). In addition, detecting and highlighting parts of an argument that are a good target for attacks (Jo et al., 2020a) can help the moderator to motivate more participation and argumentation from opposing sides of a discussion. Another important source is the detection of implicitly asserted prepositions (Jo et al., 2020b) which has a counterpart in the framing detection task (Card et al., 2015;Akyürek et al., 2020), as framing is a manipulation strategy which highlights specific aspects of an issue under discussion to promote certain interpretations.

Further NLP tasks which can play a crucial role in ensuring a healthy interaction are, for example, Hate Speech Detection (Warner and Hirschberg, 2012;Waseem and Hovy, 2016;Schmidt and Wiegand, 2017), Fact Checking (Vlachos and Riedel, 2014;Kotonya and Toni, 2020), Facts recognition and source identification (Dusmanu et al., 2017).

How to represent discourse? Thus far, we have discussed the main ingredients of a rich NLP-informed approach to deliberative discourse. These components, together with the deliberationaugmented definition of AQ sketched in section 3 are the features that the NLP moderator takes as an input. One question remains open: How to represent the argumentative discourse within a contribution (e.g. a forum post) and across contributions (e.g. an entire online deliberation campaign)? We can approach also this question from an interdisciplinary perspective. Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017). A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim. Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013). Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020). Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim. This type of representation is perfectly compatible with a graph-based approach on argument representation which has already been established as to be preferred to a tree-structure representation both empirically (Niculae et al., 2017) and theoretically (Afantenos and Asher, 2014).

Moderation can thus be modeled as optimization of specific quantitative properties of the discourse network: participant inclusion, can be enforced by ensuring that the contributions of peripheric actor nodes receive the deserved salience; argument mapping and summarization can be modeled by identifying ""hot"" sub-graphs in the network; the impact of a contribution (the grounded notion of AQ we have been advocating thus far) can be quantified as the perturbation introduced in the network, with its long term effects on convergence or polarization.

Who moderates the (NLP) moderators? The problem of biased moderation obviously relates to the issue of bias in NLP (Blodgett et al., 2020;Caliskan et al., 2017;Bolukbasi et al., 2016;Spliethöver and Wachsmuth, 2020) and it has a clear implication in the application of NLP methods to moderation. For example, we would not want our NLP models to infer a negative impact on AQ from cues which just reveal that the user belongs to certain groups. This is a real risk when quality is equated to ""success"", in turn quantified in terms of likes, replies, retweets. The public of a forum may be sensitive to such cues, but the moderator should be unbiased with respect to them. Another source of bias is the degree of literacy of a contribution: while users who express themselves poorly are likely to be less popular with the forum public, their contributions may still be a very good move in the ""cooperation challenge"" -one that moderators (NLP or humans, online or in-person) have to ensure will not be left unexploited.","sent1: NLP-supported moderation represents a clear solution to the bottleneck problem affecting facilitation in digital democracy.
sent2: Automatic tools can take over some of the tasks that human moderators typically perform when monitoring online discussions.
sent3: For example, in Social Sciences, one of the most discussed issues in crowd-scale deliberation is ""flaming"", i.e., aggressive and disrespectful communicative behavior (Lampe et al., 2014).
sent4: Here, moderators could benefit from hate-speech and trolling detection methods in NLP.
sent5: NLP methods to support deliberative decisionmaking have already been applied for the realtime visualisation of argument maps (El-Assady et al., 2017).
sent6: Deliberation in real-time applications has the clear potential of structured arguments extraction from the news media (Daxenberger and Gurevych, 2020), the identification of the argumentative structure in deliberative contexts (Liebeck et al., 2016), as well as automatic argument summarization (Lawrence et al., 2017).
sent7: Beyond the real-time support to users (and moderators) provided by the methods described above, further tasks specific to AM which are part of the role of a human or (semi-)automoated moderator include: detecting fallacies (Habernal et al., 2018b), reasoning and common-sense (Habernal et al., 2018a), relevance estimation (Potthast et al., 2019).
sent8: In addition, detecting and highlighting parts of an argument that are a good target for attacks (Jo et al., 2020a) can help the moderator to motivate more participation and argumentation from opposing sides of a discussion.
sent9: Another important source is the detection of implicitly asserted prepositions (Jo et al., 2020b) which has a counterpart in the framing detection task (Card et al., 2015;Akyürek et al., 2020), as framing is a manipulation strategy which highlights specific aspects of an issue under discussion to promote certain interpretations.
sent10: Further NLP tasks which can play a crucial role in ensuring a healthy interaction are, for example, Hate Speech Detection (Warner and Hirschberg, 2012;Waseem and Hovy, 2016;Schmidt and Wiegand, 2017), Fact Checking (Vlachos and Riedel, 2014;Kotonya and Toni, 2020), Facts recognition and source identification (Dusmanu et al., 2017).How to represent discourse?
sent11: Thus far, we have discussed the main ingredients of a rich NLP-informed approach to deliberative discourse.
sent12: These components, together with the deliberationaugmented definition of AQ sketched in section 3 are the features that the NLP moderator takes as an input.
sent13: One question remains open: How to represent the argumentative discourse within a contribution (e.g. a forum post) and across contributions (e.g. an entire online deliberation campaign)?
sent14: We can approach also this question from an interdisciplinary perspective.
sent15: Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017).
sent16: A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim.
sent17: Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013).
sent18: Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020).
sent19: Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim.
sent20: This type of representation is perfectly compatible with a graph-based approach on argument representation which has already been established as to be preferred to a tree-structure representation both empirically (Niculae et al., 2017) and theoretically (Afantenos and Asher, 2014).
sent21: Moderation can thus be modeled as optimization of specific quantitative properties of the discourse network: participant inclusion, can be enforced by ensuring that the contributions of peripheric actor nodes receive the deserved salience; argument mapping and summarization can be modeled by identifying ""hot"" sub-graphs in the network; the impact of a contribution (the grounded notion of AQ we have been advocating thus far) can be quantified as the perturbation introduced in the network, with its long term effects on convergence or polarization.
sent22: Who moderates the (NLP) moderators?
sent23: The problem of biased moderation obviously relates to the issue of bias in NLP (Blodgett et al., 2020;Caliskan et al., 2017;Bolukbasi et al., 2016;Spliethöver and Wachsmuth, 2020) and it has a clear implication in the application of NLP methods to moderation.
sent24: For example, we would not want our NLP models to infer a negative impact on AQ from cues which just reveal that the user belongs to certain groups.
sent25: This is a real risk when quality is equated to ""success"", in turn quantified in terms of likes, replies, retweets.
sent26: The public of a forum may be sensitive to such cues, but the moderator should be unbiased with respect to them.
sent27: Another source of bias is the degree of literacy of a contribution: while users who express themselves poorly are likely to be less popular with the forum public, their contributions may still be a very good move in the ""cooperation challenge"" -one that moderators (NLP or humans, online or in-person) have to ensure will not be left unexploited.","1. What problem does NLP-supported moderation address in digital democracy? sent1
2. What tasks can automatic tools take over from human moderators in online discussions? sent2
3. What is ""flaming"" and how can NLP help moderators address it? sent3, sent4
4. How have NLP methods been applied to support deliberative decision-making? sent5
5. What potential does real-time deliberation have in terms of argument extraction and summarization? sent6
6. Beyond real-time support, what additional tasks are part of a moderator's role in argument mining? sent7
7. How can detecting and highlighting parts of an argument benefit moderation? sent8
8. What is the significance of detecting implicitly asserted prepositions in argument mining? sent9
9. What are some NLP tasks crucial for ensuring healthy interaction in online discussions? sent10
10. What question remains open regarding the representation of argumentative discourse? sent13
11. How can the representation of argumentative discourse be approached? sent14
12. What is a discourse network and how is it structured? sent15, sent16
13. What are discourse coalitions and argumentative clusters? sent17
14. How has recent NLP research integrated machine learning with discourse network analysis? sent18
15. How can discourse networks be enhanced for argument mining? sent19
16. Why is a graph-based approach preferred for argument representation? sent20
17. How can moderation be modeled in terms of discourse networks? sent21
18. What is the issue of bias in NLP moderation? sent23
19. Why is it important for NLP models to avoid inferring negative impacts based on group membership? sent24
20. What is a potential risk when equating quality with ""success"" in online discussions? sent25
21. How should moderators handle contributions from users with varying degrees of literacy? sent27","Question: How can discourse networks be structured and utilized to enhance argument mining in NLP-supported moderation?

Supporting sentence: sent15, sent16, sent17, sent18, sent19",How can discourse networks be structured and utilized to enhance argument mining in NLP-supported moderation?,"sent15, sent16, sent17, sent18, sent19",4,implement,"Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017).

A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim.

Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013).

Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020).

Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim.","Discourse networks, as defined in Leifeld (2017), can be structured to model the mechanisms of political discourse, which can enhance argument mining in NLP-supported moderation.

A discourse network is a bipartite graph consisting of two classes of nodes: actors, such as political figures or parties, and claims, such as policy statements. Edges between these nodes represent the support or opposition of an actor to a specific claim.

Discourse coalitions and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012; Haunss et al., 2013).

Recent NLP research has focused on integrating machine learning into the discourse network analysis workflow (Padó et al., 2019; Haunss et al., 2020).

Discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim.","Question:

How can discourse networks be structured and utilized to enhance argument mining in NLP-supported moderation?

Answer:

Discourse networks, as defined in Leifeld (2017), can be structured to model the mechanisms of political discourse, which can enhance argument mining in NLP-supported moderation.

A discourse network is a bipartite graph consisting of two classes of nodes: actors, such as political figures or parties, and claims, such as policy statements. Edges between these nodes represent the support or opposition of an actor to a specific claim.

Discourse coalitions and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012; Haunss et al., 2013).

Recent NLP research has focused on integrating machine learning into the discourse network analysis workflow (Padó et al., 2019; Haunss et al., 2020).

Discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim.","Question:

How can discourse networks be structured and utilized to enhance argument mining in NLP-supported moderation?

Answer:

Reference work in political science aims at modeling the mechanisms of political discourse in forms of discourse networks, as defined in Leifeld (2017).

A discourse network is a bipartite graph, containing two classes of nodes: actors (e.g. Angela Merkel; the left-wing party; etc.) and claims (e.g. housing opportunities should be established for refugees); Edges between actors and claims indicate the support or opposition of a certain actor to a specific claim.

Discourse coalitions (Hajer, 1993) and argumentative clusters are the projection of the affiliation network on the actor and claim sides of the network (Leifeld and Haunss, 2012;Haunss et al., 2013).

Recent NLP research has targeted integration machine learning in the discourse network analysis workflow (Padó et al., 2019;Haunss et al., 2020).

Crucially for AM, discourse networks can integrate claims and actors with a third class of nodes, the frame nodes, which encode the reason put forward by an actor to support or reject a claim."
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,One-Stage Supervised Keyphrase Extraction Models,7,"A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates. Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task. Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results. Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","sent1: A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.
sent2: Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task.
sent3: Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results.
sent4: Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","1. What is a major limitation of two-stage supervised approaches in keyphrase extraction? sent1
2. How have recent studies formulated keyphrase extraction to address the limitation of two-stage approaches? sent2
3. What does Mu et al. (2020) propose for keyphrase extraction, and how does it work? sent3
4. What additional capability does the model proposed by Mu et al. (2020) have? sent4","Question: How do recent one-stage supervised models improve keyphrase extraction over two-stage approaches?

Supporting sentence: sent1, sent2, sent3, sent4",How do recent one-stage supervised models improve keyphrase extraction over two-stage approaches?,"sent1, sent2, sent3, sent4",2,implement,"A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.

Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task.

Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results.

Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","A major limitation of two-stage supervised approaches is that they classify the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.

Recent studies (Gollapalli et al., 2017; Basaldella et al., 2018; Wang et al., 2018; Alzaidy et al., 2019; Sun et al., 2019; Mu et al., 2020; Sahrawat et al., 2020) have formulated keyphrase extraction as sequence labeling, demonstrating that using linear-chain Conditional Random Fields enhances performance over baseline models.

Mu et al. (2020) propose SKE-BASE-CLS and -RANK, which directly extract span-based phrase representations from all document tokens using pre-trained language models, and further learn to capture interactions between these representations and their corresponding documents for improved ranking results.

Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","Question:

How do recent one-stage supervised models improve keyphrase extraction over two-stage approaches?

Answer:

A major limitation of two-stage supervised approaches is that they classify the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.

Recent studies (Gollapalli et al., 2017; Basaldella et al., 2018; Wang et al., 2018; Alzaidy et al., 2019; Sun et al., 2019; Mu et al., 2020; Sahrawat et al., 2020) have formulated keyphrase extraction as sequence labeling, demonstrating that using linear-chain Conditional Random Fields enhances performance over baseline models.

Mu et al. (2020) propose SKE-BASE-CLS and -RANK, which directly extract span-based phrase representations from all document tokens using pre-trained language models, and further learn to capture interactions between these representations and their corresponding documents for improved ranking results.

Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020).","Question:

How do recent one-stage supervised models improve keyphrase extraction over two-stage approaches?

Answer:

A major limitation of the above two-stage supervised approaches is classifying the labels of each candidate phrase independently while ignoring the dependencies that could potentially exist between candidates.

Therefore, recent studies (Gollapalli et al., 2017;Basaldella et al., 2018;Wang et al., 2018;Alzaidy et al., 2019;Sun et al., 2019;Mu et al., 2020;Sahrawat et al., 2020) formulated keyphrase extraction as sequence labeling and showed that using linear-chain Conditional Random Fields improved the performance over baseline models for this task.

Then, Mu et al. (2020) proposes SKE-BASE-CLS and -RANK, which directly extracts span-based phrase representations from all the document tokens via pre-trained language models and further learn to capture the interaction between them and their corresponding document to get better ranking results.

Furthermore, this kind of model can extract overlapped keyphrases (Mu et al., 2020)."
256662721,"Pre-train, Prompt and Recommendation: A Comprehensive Survey of Language Modelling Paradigm Adaptations in Recommender Systems",https://www.semanticscholar.org/paper/c589a3420ba335a05c248f525ea3c6e90215e42b,Evaluation metrics,4,"As an essential aspect of recommendation design, evaluation can provide insights on recommendation quality from multiple dimensions. Apart from well-known metrics such as RMSE, MAP, AUC, MAE, Recall, Precision, MRR, NDCG, F1-score and HitRate in offline mode, some works define Group AUC  or User Group AUC  to evaluate the utility of group recommendations. JIANG et al. (2022) and  conducted A/B testing to evaluate performance with online users using Conversion rate or CTR.

The integration of generative modules such as GPT and T5 into existing recommender systems offers additional possibilities for recommender systems, such as generating free-form textual explanations for recommendation results or simulating more realistic real-life dialogue scenarios during conversational recommendations to enhance users' experience. In such cases, BLEU and ROUGE are commonly adopted to automatically evaluate the relevance of generated text based on lexicon overlap. Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts. Other evaluation metrics are leveraged with respect to special requests in LMRSs. For instance, Xie et al. (2023) adopted Entailment Ratio and MAUVE to measure if the generated explanations are factually correct and how close the generated contents are to the ground truth corpus, respectively. Geng et al. (2022a) adopted Feature Diversity (DIV) and CLIPScore (CS) to measure the generated explanations and text-image alignment. Besides, to assess the system's capability to provide item recommendations during conversations, Wang et al. (2022a) computed the Item Ratio within the final generated responses. They evaluated the recommendation performance in an end-to-end manner to prevent the inappropriate insertion of recommended items into dialogues.

Human evaluation complements objective evaluation, as automatic metrics may not match sub-jective feedback from users. Liu et al. (2023a) pointed out that human subjective and automatic objective evaluation measurements may yield opposite results, which underscores the limitations of existing automatic metrics for evaluating generated explanations and dialogues in LMRSs. Figure  3 displays usage frequency statistics for different evaluation metrics in their respective tasks.","sent1: As an essential aspect of recommendation design, evaluation can provide insights on recommendation quality from multiple dimensions.
sent2: Apart from well-known metrics such as RMSE, MAP, AUC, MAE, Recall, Precision, MRR, NDCG, F1-score and HitRate in offline mode, some works define Group AUC  or User Group AUC  to evaluate the utility of group recommendations.
sent3: JIANG et al. (2022) and  conducted A/B testing to evaluate performance with online users using Conversion rate or CTR.
sent4: The integration of generative modules such as GPT and T5 into existing recommender systems offers additional possibilities for recommender systems, such as generating free-form textual explanations for recommendation results or simulating more realistic real-life dialogue scenarios during conversational recommendations to enhance users' experience.
sent5: In such cases, BLEU and ROUGE are commonly adopted to automatically evaluate the relevance of generated text based on lexicon overlap.
sent6: Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts.
sent7: Other evaluation metrics are leveraged with respect to special requests in LMRSs.
sent8: For instance, Xie et al. (2023) adopted Entailment Ratio and MAUVE to measure if the generated explanations are factually correct and how close the generated contents are to the ground truth corpus, respectively.
sent9: Geng et al. (2022a) adopted Feature Diversity (DIV) and CLIPScore (CS) to measure the generated explanations and text-image alignment.
sent10: Besides, to assess the system's capability to provide item recommendations during conversations, Wang et al. (2022a) computed the Item Ratio within the final generated responses.
sent11: They evaluated the recommendation performance in an end-to-end manner to prevent the inappropriate insertion of recommended items into dialogues.
sent12: Human evaluation complements objective evaluation, as automatic metrics may not match sub-jective feedback from users.
sent13: Liu et al. (2023a) pointed out that human subjective and automatic objective evaluation measurements may yield opposite results, which underscores the limitations of existing automatic metrics for evaluating generated explanations and dialogues in LMRSs.
sent14: Figure  3 displays usage frequency statistics for different evaluation metrics in their respective tasks.","1. What role does evaluation play in recommendation design? sent1
2. What are some well-known metrics used in offline mode for evaluating recommendations? sent2
    2.1. What metrics are used to evaluate group recommendations? sent2
3. How is performance evaluated with online users? sent3
4. What possibilities do generative modules like GPT and T5 offer in recommender systems? sent4
    4.1. What metrics are commonly used to evaluate the relevance of generated text in these systems? sent5
    4.2. What other metrics are used to measure fluency, diversity, and informativeness of generated texts? sent6
5. Are there evaluation metrics specific to special requests in LMRSs? sent7
    5.1. What metrics did Xie et al. (2023) adopt for evaluating generated explanations? sent8
    5.2. What metrics did Geng et al. (2022a) use for evaluating text-image alignment? sent9
    5.3. How did Wang et al. (2022a) assess item recommendations during conversations? sent10
        5.3.1. How was recommendation performance evaluated to prevent inappropriate item insertion? sent11
6. How does human evaluation complement objective evaluation in LMRSs? sent12
    6.1. What did Liu et al. (2023a) point out about human and automatic evaluation measurements? sent13
7. What does Figure 3 display regarding evaluation metrics? sent14","Question: How are fluency, diversity, and informativeness of generated texts evaluated in language modeling recommender systems?

Supporting sentence: sent6","How are fluency, diversity, and informativeness of generated texts evaluated in language modeling recommender systems?",sent6,4,implement,"Besides, Perplexity (PPL), Distinct-n, and Unique Sentence Ratio (USR) are also widely used metrics to measure fluency, diversity, and informativeness of generated texts.",N/A,"Question:

How are fluency, diversity, and informativeness of generated texts evaluated in language modeling recommender systems?

Answer:

N/A","Question:

How are fluency, diversity, and informativeness of generated texts evaluated in language modeling recommender systems?

Answer:

N/A"
264451714,Give Me the Facts! A Survey on Factual Knowledge Probing in Pre-trained Language Models,https://www.semanticscholar.org/paper/18d18d4ffdc070868ce06f216a2a8d040d42a4cb,Factors Affecting Knowledge Retention,20,"PLMs are diverse with respect to their architectures, pre-training objectives and their pre-training data.A compelling question is: how do all these factors affect knowledge retention in PLMs?

Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.

A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.

Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.","sent1: PLMs are diverse with respect to their architectures, pre-training objectives and their pre-training data.
sent2: A compelling question is: how do all these factors affect knowledge retention in PLMs?
sent3: Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.
sent4: More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.
sent5: A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.
sent6: Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.","1. What factors contribute to the diversity of PLMs? sent1
2. What is a compelling question regarding knowledge retention in PLMs? sent2
3. How do large language models generally perform in terms of knowledge retention, and what factors are more decisive? sent3
    3.1. How does the Salient Span Masking objective affect PLMs? sent3
    3.2. What is the benefit of training models to predict entity replacements in text? sent3
4. What general conclusion did Ye et al. (2021) reach regarding masking strategies? sent4
5. How does the size of the pre-training corpus affect knowledge retention in different model architectures? sent5
    5.1. What roles do recency and frequency play in knowledge retention? sent5
6. What can improve knowledge retention in larger models and with more pre-training data? sent6
    6.1. Why might scaling alone not be sufficient for improving knowledge retention? sent6
    6.2. What is a promising future work direction for increasing factual knowledge retention in PLMs? sent6","Question: How do architecture and pre-training objectives influence knowledge retention in pre-trained language models?

Supporting sentence: sent3, sent4, sent5, sent6",How do architecture and pre-training objectives influence knowledge retention in pre-trained language models?,"sent3, sent4, sent5, sent6",4,implement,"Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.

More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.

A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.

Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement.","Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020; Roberts et al., 2020), but the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).

Ye et al. (2021) conclude that a masking strategy aligned with the downstream task positively affects performance on that task.

A larger pre-training corpus with an encoder-only model (Liu et al., 2020) enhances knowledge retention (Zhang et al., 2021), whereas with an encoder-decoder model (Lewis et al., 2020), it negatively impacts knowledge retention (Wang et al., 2021a). Additionally, recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023) of data observation during training are crucial for knowledge retention.

Larger models and more pre-training data can enhance knowledge retention when combined with appropriate architecture and pre-training objectives. However, scaling alone might not be sufficient (Kandpal et al., 2023). Although many studies propose new architectures and pre-training objectives to boost factual knowledge retention in pre-trained language models and their robustness to prompts (Févry et al., 2020; Hosseini et al., 2021; Sadeq et al., 2022; Whitehouse et al., 2022; Min et al., 2023; Zhong et al., 2023), this remains a promising area for future research, as there is still room for improvement.","Question:

How do architecture and pre-training objectives influence knowledge retention in pre-trained language models?

Answer:

Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020; Roberts et al., 2020), but the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).

Ye et al. (2021) conclude that a masking strategy aligned with the downstream task positively affects performance on that task.

A larger pre-training corpus with an encoder-only model (Liu et al., 2020) enhances knowledge retention (Zhang et al., 2021), whereas with an encoder-decoder model (Lewis et al., 2020), it negatively impacts knowledge retention (Wang et al., 2021a). Additionally, recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023) of data observation during training are crucial for knowledge retention.

Larger models and more pre-training data can enhance knowledge retention when combined with appropriate architecture and pre-training objectives. However, scaling alone might not be sufficient (Kandpal et al., 2023). Although many studies propose new architectures and pre-training objectives to boost factual knowledge retention in pre-trained language models and their robustness to prompts (Févry et al., 2020; Hosseini et al., 2021; Sadeq et al., 2022; Whitehouse et al., 2022; Min et al., 2023; Zhong et al., 2023), this remains a promising area for future research, as there is still room for improvement.","Question:

How do architecture and pre-training objectives influence knowledge retention in pre-trained language models?

Answer:

Large language models are known to perform generally better and hold more knowledge (Brown et al., 2020;Roberts et al., 2020).However, the model's architecture and pre-training objectives are more decisive for knowledge retention than its size (Li et al., 2022a).For example, pre-training with the Salient Span Masking objective (Guu et al., 2020) helps PLMs to absorb more facts (Roberts et al., 2020;Cole et al., 2023).Similarly, Xiong et al. (2020) demonstrate that training the model to predict if the original entities in the text have been replaced with other entities is beneficial for fact retrieval.

More generally, Ye et al. (2021) conclude that a masking strategy matching the downstream task, positively affects the performance on that task.

A larger pre-training corpus with an encoderonly model (Liu et al., 2020) leads to higher knowledge retention (Zhang et al., 2021), but with an encoder-decoder model (Lewis et al., 2020), a larger corpus negatively affects knowledge retention Wang et al. (2021a).Recency (Chiang et al., 2020) and frequency (Kandpal et al., 2023), i.e., when and how often the data is observed at training, are also essential for knowledge retention.

Larger models and more pre-training data can improve knowledge retention if combined with the right choices for architecture and pre-training objective(s).However, scaling might not be sufficient (Kandpal et al., 2023).Even though many works propose new architectures and pre-training objectives to increase factual knowledge retention in PLMs and their robustness to prompts (Févry et al., 2020;Hosseini et al., 2021;Sadeq et al., 2022;Whitehouse et al., 2022;Min et al., 2023;Zhong et al., 2023), this is a promising future work direction, as there is more room for improvement."
258378191,A Survey on Recent Advances in Keyphrase Extraction from Pre-trained Language Models,https://www.semanticscholar.org/paper/0d94850737bcf0df409ac7f2a6610f6ec69a6809,Pre-trained Language Models,6,"Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021). State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ). Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019). Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks. Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.","sent1: Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021).
sent2: State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ).
sent3: Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019).
sent4: Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks.
sent5: Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.","1. What advancements have pre-trained language models brought to NLP tasks? sent1
    1.1. What are some examples of state-of-the-art pre-trained language models? sent2
    1.2. How do transformer-based models learn representations for words? sent3
    1.3. What impact has the use of contextualized embeddings from transformer-based models had on NLP tasks? sent4
    1.4. How are pre-trained language models used in relation to downstream tasks? sent5","Question: How do pre-trained language models enhance NLP tasks through contextualized embeddings and representation learning?

Supporting sentence: sent1, sent2, sent3, sent4, sent5",How do pre-trained language models enhance NLP tasks through contextualized embeddings and representation learning?,"sent1, sent2, sent3, sent4, sent5",4,implement,"Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021).

State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ).

Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019).

Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks.

Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks.","Pre-trained language models have recently advanced the state-of-the-art in many NLP tasks, including textual similarity, text summarization (Zhang et al., 2019; Liu and Lapata, 2019; Zhong et al., 2020), and named entity recognition (Zhou et al., 2021).

State-of-the-art pre-trained models include LSTM-based language models like ELMo (Peters et al., 2018) and Transformer-based models such as BERT (Devlin et al., 2019) and RoBERTa.

Specifically, these transformer-based models learn bidirectional representations for words using a masked language model and a sentence adjacency training objective (Devlin et al., 2019).

Simply using contextualized embeddings from transformer-based pre-trained language models instead of traditional embeddings has led to state-of-the-art performance on various NLP tasks.

Pre-trained language models have been employed as encoders to obtain word-, sentence-, and document-level representations, which assist in enhancing downstream NLP tasks.","Question:

How do pre-trained language models enhance NLP tasks through contextualized embeddings and representation learning?

Answer:

Pre-trained language models have recently advanced the state-of-the-art in many NLP tasks, including textual similarity, text summarization (Zhang et al., 2019; Liu and Lapata, 2019; Zhong et al., 2020), and named entity recognition (Zhou et al., 2021).

State-of-the-art pre-trained models include LSTM-based language models like ELMo (Peters et al., 2018) and Transformer-based models such as BERT (Devlin et al., 2019) and RoBERTa.

Specifically, these transformer-based models learn bidirectional representations for words using a masked language model and a sentence adjacency training objective (Devlin et al., 2019).

Simply using contextualized embeddings from transformer-based pre-trained language models instead of traditional embeddings has led to state-of-the-art performance on various NLP tasks.

Pre-trained language models have been employed as encoders to obtain word-, sentence-, and document-level representations, which assist in enhancing downstream NLP tasks.","Question:

How do pre-trained language models enhance NLP tasks through contextualized embeddings and representation learning?

Answer:

Recently, pre-trained language models have advanced the state-of-the-art in many NLP tasks ranging from textual similarity to text summarization (Zhang et al., 2019;Liu and Lapata, 2019;Zhong et al., 2020) and named entity recognition (Zhou et al., 2021).State-of-the-art pre-trained models include LSTM-based language models (e.g., ELMo (Peters et al., 2018)) and Transformer-based language models (e.g., BERT 2 (Devlin et al., 2019) and RoBERTa ).

Specifically, the transformer-based models learn bidirectional representations for words based on a masked language model and sentence adjacency training objective (Devlin et al., 2019).

Simply using contextualized embeddings obtained from the transformerbased pre-trained language models in place of traditional embeddings has resulted in state-of-the-art performance on a range of NLP tasks.

Therefore, pre-trained language models have been employed as encoders for obtaining word-, sentence-, and document-level representations to assist the downstream tasks."
